
finalcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08008fc0  08008fc0  00018fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e8  080093e8  000204e0  2**0
                  CONTENTS
  4 .ARM          00000008  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f0  080093f0  000204e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e0  20000000  080093f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000204e0  2**0
                  CONTENTS
 10 .bss          0000024c  200004e0  200004e0  000204e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000072c  2000072c  000204e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000204e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba34  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e43  00000000  00000000  0002bf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000828  00000000  00000000  0002e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218ad  00000000  00000000  0002eec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b846  00000000  00000000  00050775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ad8  00000000  00000000  0005bfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123a93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035b8  00000000  00000000  00123ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004e0 	.word	0x200004e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fa4 	.word	0x08008fa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004e4 	.word	0x200004e4
 80001cc:	08008fa4 	.word	0x08008fa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t count = 0;
float RX_msg = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000f5c:	f000 fe56 	bl	8001c0c <HAL_CAN_GetRxMessage>
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f62:	681b      	ldr	r3, [r3, #0]
	memcpy(&RX_msg, RxData, 4);
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000f66:	6013      	str	r3, [r2, #0]
	count++;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000f72:	701a      	strb	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000570 	.word	0x20000570
 8000f80:	2000058c 	.word	0x2000058c
 8000f84:	200004fc 	.word	0x200004fc
 8000f88:	200005ac 	.word	0x200005ac
 8000f8c:	200005a8 	.word	0x200005a8

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fb89 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f851 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 f919 	bl	80011d4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000fa2:	f000 f8b7 	bl	8001114 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000fa6:	f000 f8eb 	bl	8001180 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  STMpil_initialize();
 8000faa:	f004 fd39 	bl	8005a20 <STMpil_initialize>
  STMpil_U.In1= 48;
 8000fae:	491d      	ldr	r1, [pc, #116]	; (8001024 <main+0x94>)
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <main+0x98>)
 8000fb6:	e9c1 2300 	strd	r2, r3, [r1]
  float data = (float) STMpil_Y.SOC;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <main+0x9c>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fdf0 	bl	8000ba8 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	607b      	str	r3, [r7, #4]
  float retrived_data;
  Tx.DLC=4;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <main+0xa0>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	611a      	str	r2, [r3, #16]
  Tx.IDE=CAN_ID_STD;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <main+0xa0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  Tx.StdId=0x100;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <main+0xa0>)
 8000fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fde:	601a      	str	r2, [r3, #0]
  Tx.RTR=CAN_RTR_DATA;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <main+0xa0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  */

  //HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);

  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_Start(&hcan1);
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <main+0xa4>)
 8000fe8:	f000 fcf1 	bl	80019ce <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  STMpil_step();
 8000fec:	f002 fb74 	bl	80036d8 <STMpil_step>
	  data = (float) STMpil_Y.SOC;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <main+0x9c>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fdd5 	bl	8000ba8 <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
	  memcpy(buffer, &data, 4);
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <main+0xa8>)
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <main+0xa8>)
 800100a:	681b      	ldr	r3, [r3, #0]
	  memcpy(&retrived_data, buffer, 4);
 800100c:	603b      	str	r3, [r7, #0]
	  HAL_CAN_AddTxMessage(&hcan1, &Tx, buffer, &TxMailbox);
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <main+0xac>)
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <main+0xa8>)
 8001012:	4907      	ldr	r1, [pc, #28]	; (8001030 <main+0xa0>)
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <main+0xa4>)
 8001016:	f000 fd1e 	bl	8001a56 <HAL_CAN_AddTxMessage>
	  //size_len = sprintf (str, "State of Charge : %f\n", RX_msg);
	  //HAL_UART_Transmit (&huart2, (uint8_t *)str, size_len, HAL_MAX_DELAY);
	  HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f000 fbb8 	bl	8001790 <HAL_Delay>
	  STMpil_step();
 8001020:	e7e4      	b.n	8000fec <main+0x5c>
 8001022:	bf00      	nop
 8001024:	200006d8 	.word	0x200006d8
 8001028:	40480000 	.word	0x40480000
 800102c:	200006e0 	.word	0x200006e0
 8001030:	20000574 	.word	0x20000574
 8001034:	200004fc 	.word	0x200004fc
 8001038:	2000056c 	.word	0x2000056c
 800103c:	20000568 	.word	0x20000568

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f005 f892 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <SystemClock_Config+0xcc>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <SystemClock_Config+0xd0>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010be:	2307      	movs	r3, #7
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fbaa 	bl	8002820 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010d2:	f000 f8dd 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2302      	movs	r3, #2
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2105      	movs	r1, #5
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fe0b 	bl	8002d10 <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001100:	f000 f8c6 	bl	8001290 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3750      	adds	r7, #80	; 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_CAN1_Init+0x64>)
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_CAN1_Init+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 17;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_CAN1_Init+0x64>)
 8001120:	2211      	movs	r2, #17
 8001122:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_CAN1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_CAN1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_CAN1_Init+0x64>)
 8001132:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001136:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_CAN1_Init+0x64>)
 800113a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800113e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_CAN1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_CAN1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_CAN1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_CAN1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_CAN1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_CAN1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_CAN1_Init+0x64>)
 8001166:	f000 fb37 	bl	80017d8 <HAL_CAN_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001170:	f000 f88e 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200004fc 	.word	0x200004fc
 800117c:	40006400 	.word	0x40006400

08001180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_USART2_UART_Init+0x50>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b8:	f001 ffca 	bl	8003150 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c2:	f000 f865 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000524 	.word	0x20000524
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_GPIO_Init+0xb4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a25      	ldr	r2, [pc, #148]	; (8001288 <MX_GPIO_Init+0xb4>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_GPIO_Init+0xb4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_GPIO_Init+0xb4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <MX_GPIO_Init+0xb4>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_GPIO_Init+0xb4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_GPIO_Init+0xb4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <MX_GPIO_Init+0xb4>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_GPIO_Init+0xb4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_GPIO_Init+0xb4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <MX_GPIO_Init+0xb4>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_GPIO_Init+0xb4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2104      	movs	r1, #4
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <MX_GPIO_Init+0xb8>)
 8001260:	f001 fac4 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001264:	2304      	movs	r3, #4
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_GPIO_Init+0xb8>)
 800127c:	f001 f91a 	bl	80024b4 <HAL_GPIO_Init>

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40020c00 	.word	0x40020c00

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012da:	2007      	movs	r0, #7
 80012dc:	f001 f8a8 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_CAN_MspInit+0xa4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d13c      	bne.n	8001388 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_CAN_MspInit+0xa8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_CAN_MspInit+0xa8>)
 8001318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_CAN_MspInit+0xa8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_CAN_MspInit+0xa8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <HAL_CAN_MspInit+0xa8>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_CAN_MspInit+0xa8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001358:	2309      	movs	r3, #9
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <HAL_CAN_MspInit+0xac>)
 8001364:	f001 f8a6 	bl	80024b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 2);
 8001368:	2202      	movs	r2, #2
 800136a:	2100      	movs	r1, #0
 800136c:	2013      	movs	r0, #19
 800136e:	f001 f86a 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001372:	2013      	movs	r0, #19
 8001374:	f001 f883 	bl	800247e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	2100      	movs	r1, #0
 800137c:	2014      	movs	r0, #20
 800137e:	f001 f862 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001382:	2014      	movs	r0, #20
 8001384:	f001 f87b 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40006400 	.word	0x40006400
 8001394:	40023800 	.word	0x40023800
 8001398:	40020400 	.word	0x40020400

0800139c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_UART_MspInit+0x84>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12b      	bne.n	8001416 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_UART_MspInit+0x88>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_UART_MspInit+0x88>)
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_UART_MspInit+0x88>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_UART_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_UART_MspInit+0x88>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_UART_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013f6:	230c      	movs	r3, #12
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001406:	2307      	movs	r3, #7
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_UART_MspInit+0x8c>)
 8001412:	f001 f84f 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40004400 	.word	0x40004400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f000 f96a 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <CAN1_TX_IRQHandler+0x10>)
 8001486:	f000 fcd3 	bl	8001e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200004fc 	.word	0x200004fc

08001494 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <CAN1_RX0_IRQHandler+0x10>)
 800149a:	f000 fcc9 	bl	8001e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200004fc 	.word	0x200004fc

080014a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_kill>:

int _kill(int pid, int sig)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014c2:	f004 fe21 	bl	8006108 <__errno>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2216      	movs	r2, #22
 80014ca:	601a      	str	r2, [r3, #0]
	return -1;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffe7 	bl	80014b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ea:	e7fe      	b.n	80014ea <_exit+0x12>

080014ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00a      	b.n	8001514 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014fe:	f3af 8000 	nop.w
 8001502:	4601      	mov	r1, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	b2ca      	uxtb	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf0      	blt.n	80014fe <_read+0x12>
	}

return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e009      	b.n	800154c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf1      	blt.n	8001538 <_write+0x12>
	}
	return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_close>:

int _close(int file)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001586:	605a      	str	r2, [r3, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_isatty>:

int _isatty(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	return 1;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f004 fd86 	bl	8006108 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20020000 	.word	0x20020000
 8001628:	00000400 	.word	0x00000400
 800162c:	200005b0 	.word	0x200005b0
 8001630:	20000730 	.word	0x20000730

08001634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SystemInit+0x20>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <SystemInit+0x20>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001682:	f7ff ffd7 	bl	8001634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f004 fd45 	bl	8006114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7ff fc81 	bl	8000f90 <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	200004e0 	.word	0x200004e0
  ldr r2, =_sidata
 800169c:	080093f8 	.word	0x080093f8
  ldr r2, =_sbss
 80016a0:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 80016a4:	2000072c 	.word	0x2000072c

080016a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_Init+0x40>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_Init+0x40>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x40>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 feab 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fddc 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fec3 	bl	800249a <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 fe8b 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000008 	.word	0x20000008
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	200005b4 	.word	0x200005b4

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200005b4 	.word	0x200005b4

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_Delay+0x44>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0ed      	b.n	80019c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fd78 	bl	80012ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800180c:	f7ff ffb4 	bl	8001778 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001812:	e012      	b.n	800183a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001814:	f7ff ffb0 	bl	8001778 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d90b      	bls.n	800183a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0c5      	b.n	80019c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0e5      	beq.n	8001814 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0202 	bic.w	r2, r2, #2
 8001856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001858:	f7ff ff8e 	bl	8001778 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800185e:	e012      	b.n	8001886 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001860:	f7ff ff8a 	bl	8001778 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b0a      	cmp	r3, #10
 800186c:	d90b      	bls.n	8001886 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2205      	movs	r2, #5
 800187e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e09f      	b.n	80019c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e5      	bne.n	8001860 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e007      	b.n	80018be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7e5b      	ldrb	r3, [r3, #25]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d108      	bne.n	80018d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e007      	b.n	80018e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e9b      	ldrb	r3, [r3, #26]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e007      	b.n	8001912 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0220 	bic.w	r2, r2, #32
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7edb      	ldrb	r3, [r3, #27]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0210 	bic.w	r2, r2, #16
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e007      	b.n	800193c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0210 	orr.w	r2, r2, #16
 800193a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7f1b      	ldrb	r3, [r3, #28]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0208 	orr.w	r2, r2, #8
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e007      	b.n	8001966 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0208 	bic.w	r2, r2, #8
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7f5b      	ldrb	r3, [r3, #29]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0204 	bic.w	r2, r2, #4
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	ea42 0103 	orr.w	r1, r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d12e      	bne.n	8001a40 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019fa:	f7ff febd 	bl	8001778 <HAL_GetTick>
 80019fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a00:	e012      	b.n	8001a28 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a02:	f7ff feb9 	bl	8001778 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	d90b      	bls.n	8001a28 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2205      	movs	r2, #5
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e012      	b.n	8001a4e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e5      	bne.n	8001a02 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e006      	b.n	8001a4e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
  }
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b089      	sub	sp, #36	; 0x24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a74:	7ffb      	ldrb	r3, [r7, #31]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d003      	beq.n	8001a82 <HAL_CAN_AddTxMessage+0x2c>
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 80b8 	bne.w	8001bf2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a0 	beq.w	8001be2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	0e1b      	lsrs	r3, r3, #24
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d907      	bls.n	8001ac2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e09e      	b.n	8001c00 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	6809      	ldr	r1, [r1, #0]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	440b      	add	r3, r1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e00f      	b.n	8001b10 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001afa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b04:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3318      	adds	r3, #24
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	440b      	add	r3, r1
 8001b0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6819      	ldr	r1, [r3, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3318      	adds	r3, #24
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	440b      	add	r3, r1
 8001b20:	3304      	adds	r3, #4
 8001b22:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	7d1b      	ldrb	r3, [r3, #20]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d111      	bne.n	8001b50 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3318      	adds	r3, #24
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3318      	adds	r3, #24
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3307      	adds	r3, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	061a      	lsls	r2, r3, #24
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	041b      	lsls	r3, r3, #16
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3305      	adds	r3, #5
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	3204      	adds	r2, #4
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	4610      	mov	r0, r2
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	6811      	ldr	r1, [r2, #0]
 8001b78:	ea43 0200 	orr.w	r2, r3, r0
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	440b      	add	r3, r1
 8001b82:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	061a      	lsls	r2, r3, #24
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3302      	adds	r3, #2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	7812      	ldrb	r2, [r2, #0]
 8001ba8:	4610      	mov	r0, r2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	6811      	ldr	r1, [r2, #0]
 8001bae:	ea43 0200 	orr.w	r2, r3, r0
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001bbc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3318      	adds	r3, #24
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	6811      	ldr	r1, [r2, #0]
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3318      	adds	r3, #24
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	440b      	add	r3, r1
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e00e      	b.n	8001c00 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e006      	b.n	8001c00 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3724      	adds	r7, #36	; 0x24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d003      	beq.n	8001c30 <HAL_CAN_GetRxMessage+0x24>
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	f040 80f3 	bne.w	8001e16 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d116      	bne.n	8001c72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0e7      	b.n	8001e24 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0d8      	b.n	8001e24 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	331b      	adds	r3, #27
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0204 	and.w	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10c      	bne.n	8001caa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	331b      	adds	r3, #27
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0d5b      	lsrs	r3, r3, #21
 8001ca0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e00b      	b.n	8001cc2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	331b      	adds	r3, #27
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	331b      	adds	r3, #27
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0202 	and.w	r2, r3, #2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	331b      	adds	r3, #27
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 020f 	and.w	r2, r3, #15
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	331b      	adds	r3, #27
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	331b      	adds	r3, #27
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0a1a      	lsrs	r2, r3, #8
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0c1a      	lsrs	r2, r3, #16
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3302      	adds	r3, #2
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0e1a      	lsrs	r2, r3, #24
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	3303      	adds	r3, #3
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3304      	adds	r3, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0a1a      	lsrs	r2, r3, #8
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3305      	adds	r3, #5
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0c1a      	lsrs	r2, r3, #16
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	3306      	adds	r3, #6
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e1a      	lsrs	r2, r3, #24
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3307      	adds	r3, #7
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d108      	bne.n	8001e02 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	e007      	b.n	8001e12 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0220 	orr.w	r2, r2, #32
 8001e10:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e006      	b.n	8001e24 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d07c      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f983 	bl	800219e <HAL_CAN_TxMailbox0CompleteCallback>
 8001e98:	e016      	b.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	e00c      	b.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	e002      	b.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f989 	bl	80021da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f963 	bl	80021b2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001eec:	e016      	b.n	8001f1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	e00c      	b.n	8001f1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	e002      	b.n	8001f1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f969 	bl	80021ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d024      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f943 	bl	80021c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f40:	e016      	b.n	8001f70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
 8001f54:	e00c      	b.n	8001f70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e002      	b.n	8001f70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f949 	bl	8002202 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2210      	movs	r2, #16
 8001f92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2208      	movs	r2, #8
 8001fae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f930 	bl	8002216 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe ffbc 	bl	8000f4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2208      	movs	r2, #8
 8002012:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f912 	bl	800223e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8f9 	bl	800222a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2210      	movs	r2, #16
 8002052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8fc 	bl	8002252 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2208      	movs	r2, #8
 8002074:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8f5 	bl	8002266 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d07b      	beq.n	800217e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d072      	beq.n	8002176 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d043      	beq.n	8002176 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d03e      	beq.n	8002176 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020fe:	2b60      	cmp	r3, #96	; 0x60
 8002100:	d02b      	beq.n	800215a <HAL_CAN_IRQHandler+0x32a>
 8002102:	2b60      	cmp	r3, #96	; 0x60
 8002104:	d82e      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 8002106:	2b50      	cmp	r3, #80	; 0x50
 8002108:	d022      	beq.n	8002150 <HAL_CAN_IRQHandler+0x320>
 800210a:	2b50      	cmp	r3, #80	; 0x50
 800210c:	d82a      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 800210e:	2b40      	cmp	r3, #64	; 0x40
 8002110:	d019      	beq.n	8002146 <HAL_CAN_IRQHandler+0x316>
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d826      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 8002116:	2b30      	cmp	r3, #48	; 0x30
 8002118:	d010      	beq.n	800213c <HAL_CAN_IRQHandler+0x30c>
 800211a:	2b30      	cmp	r3, #48	; 0x30
 800211c:	d822      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 800211e:	2b10      	cmp	r3, #16
 8002120:	d002      	beq.n	8002128 <HAL_CAN_IRQHandler+0x2f8>
 8002122:	2b20      	cmp	r3, #32
 8002124:	d005      	beq.n	8002132 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002126:	e01d      	b.n	8002164 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002130:	e019      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800213a:	e014      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f043 0320 	orr.w	r3, r3, #32
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002144:	e00f      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214e:	e00a      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002158:	e005      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002162:	e000      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            break;
 8002164:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002174:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2204      	movs	r2, #4
 800217c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f872 	bl	800227a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002196:	bf00      	nop
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff8e 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff29 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff3e 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff8e 	bl	8002384 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5d 	bl	8002330 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff31 	bl	80022f4 <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffa2 	bl	80023ec <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e16b      	b.n	80027a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 815a 	bne.w	80027a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d005      	beq.n	8002506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	2b02      	cmp	r3, #2
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80b4 	beq.w	80027a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <HAL_GPIO_Init+0x30c>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a5f      	ldr	r2, [pc, #380]	; (80027c0 <HAL_GPIO_Init+0x30c>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <HAL_GPIO_Init+0x30c>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002656:	4a5b      	ldr	r2, [pc, #364]	; (80027c4 <HAL_GPIO_Init+0x310>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_GPIO_Init+0x314>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d02b      	beq.n	80026da <HAL_GPIO_Init+0x226>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a51      	ldr	r2, [pc, #324]	; (80027cc <HAL_GPIO_Init+0x318>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d025      	beq.n	80026d6 <HAL_GPIO_Init+0x222>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a50      	ldr	r2, [pc, #320]	; (80027d0 <HAL_GPIO_Init+0x31c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01f      	beq.n	80026d2 <HAL_GPIO_Init+0x21e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_GPIO_Init+0x320>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d019      	beq.n	80026ce <HAL_GPIO_Init+0x21a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4e      	ldr	r2, [pc, #312]	; (80027d8 <HAL_GPIO_Init+0x324>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0x216>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4d      	ldr	r2, [pc, #308]	; (80027dc <HAL_GPIO_Init+0x328>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00d      	beq.n	80026c6 <HAL_GPIO_Init+0x212>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	; (80027e0 <HAL_GPIO_Init+0x32c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <HAL_GPIO_Init+0x20e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <HAL_GPIO_Init+0x330>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_GPIO_Init+0x20a>
 80026ba:	2307      	movs	r3, #7
 80026bc:	e00e      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026be:	2308      	movs	r3, #8
 80026c0:	e00c      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026c2:	2306      	movs	r3, #6
 80026c4:	e00a      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026c6:	2305      	movs	r3, #5
 80026c8:	e008      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026ce:	2303      	movs	r3, #3
 80026d0:	e004      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_GPIO_Init+0x228>
 80026da:	2300      	movs	r3, #0
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f002 0203 	and.w	r2, r2, #3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4093      	lsls	r3, r2
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026ec:	4935      	ldr	r1, [pc, #212]	; (80027c4 <HAL_GPIO_Init+0x310>)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_GPIO_Init+0x334>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_GPIO_Init+0x334>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_GPIO_Init+0x334>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <HAL_GPIO_Init+0x334>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_GPIO_Init+0x334>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_GPIO_Init+0x334>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_GPIO_Init+0x334>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <HAL_GPIO_Init+0x334>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	f67f ae90 	bls.w	80024d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40021400 	.word	0x40021400
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40021c00 	.word	0x40021c00
 80027e8:	40013c00 	.word	0x40013c00

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e267      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d075      	beq.n	800292a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283e:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d00c      	beq.n	8002864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d112      	bne.n	800287c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002856:	4b82      	ldr	r3, [pc, #520]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002862:	d10b      	bne.n	800287c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	4b7e      	ldr	r3, [pc, #504]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05b      	beq.n	8002928 <HAL_RCC_OscConfig+0x108>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d157      	bne.n	8002928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e242      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d106      	bne.n	8002894 <HAL_RCC_OscConfig+0x74>
 8002886:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a75      	ldr	r2, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01d      	b.n	80028d0 <HAL_RCC_OscConfig+0xb0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x98>
 800289e:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6f      	ldr	r2, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6c      	ldr	r2, [pc, #432]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0xb0>
 80028b8:	4b69      	ldr	r3, [pc, #420]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a68      	ldr	r2, [pc, #416]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a65      	ldr	r2, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe ff4e 	bl	8001778 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe ff4a 	bl	8001778 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e207      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0xc0>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe ff3a 	bl	8001778 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe ff36 	bl	8001778 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1f3      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0xe8>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002936:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800294a:	2b08      	cmp	r3, #8
 800294c:	d11c      	bne.n	8002988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294e:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d116      	bne.n	8002988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x152>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1c7      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4937      	ldr	r1, [pc, #220]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	e03a      	b.n	80029fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_OscConfig+0x244>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe feef 	bl	8001778 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299e:	f7fe feeb 	bl	8001778 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1a8      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4925      	ldr	r1, [pc, #148]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x244>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fece 	bl	8001778 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7fe feca 	bl	8001778 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e187      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d036      	beq.n	8002a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x248>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe feae 	bl	8001778 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe feaa 	bl	8001778 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e167      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x200>
 8002a3e:	e01b      	b.n	8002a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x248>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a46:	f7fe fe97 	bl	8001778 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	e00e      	b.n	8002a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4e:	f7fe fe93 	bl	8001778 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d907      	bls.n	8002a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e150      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
 8002a60:	40023800 	.word	0x40023800
 8002a64:	42470000 	.word	0x42470000
 8002a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ea      	bne.n	8002a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8097 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8a:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	4b7d      	ldr	r3, [pc, #500]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a7c      	ldr	r2, [pc, #496]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b7a      	ldr	r3, [pc, #488]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b77      	ldr	r3, [pc, #476]	; (8002c94 <HAL_RCC_OscConfig+0x474>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac2:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <HAL_RCC_OscConfig+0x474>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a73      	ldr	r2, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x474>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fe53 	bl	8001778 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fe4f 	bl	8001778 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e10c      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b6a      	ldr	r3, [pc, #424]	; (8002c94 <HAL_RCC_OscConfig+0x474>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2ea>
 8002afc:	4b64      	ldr	r3, [pc, #400]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a63      	ldr	r2, [pc, #396]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x324>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x30c>
 8002b12:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a5e      	ldr	r2, [pc, #376]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	4b5c      	ldr	r3, [pc, #368]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x324>
 8002b2c:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a57      	ldr	r2, [pc, #348]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a54      	ldr	r2, [pc, #336]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fe14 	bl	8001778 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fe fe10 	bl	8001778 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0cb      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ee      	beq.n	8002b54 <HAL_RCC_OscConfig+0x334>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fdfe 	bl	8001778 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fdfa 	bl	8001778 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0b5      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b96:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a1 	beq.w	8002d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d05c      	beq.n	8002c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d141      	bne.n	8002c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fdce 	bl	8001778 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe fdca 	bl	8001778 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e087      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	3b01      	subs	r3, #1
 8002c18:	041b      	lsls	r3, r3, #16
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	491b      	ldr	r1, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fda3 	bl	8001778 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fe fd9f 	bl	8001778 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e05c      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x416>
 8002c54:	e054      	b.n	8002d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fd8c 	bl	8001778 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fd88 	bl	8001778 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e045      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCC_OscConfig+0x470>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x444>
 8002c82:	e03d      	b.n	8002d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e038      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40007000 	.word	0x40007000
 8002c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x4ec>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d028      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d121      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d11a      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ccc:	4013      	ands	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d111      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0cc      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b68      	ldr	r3, [pc, #416]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d90c      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b65      	ldr	r3, [pc, #404]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0b8      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	494d      	ldr	r1, [pc, #308]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d044      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d119      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e07f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d003      	beq.n	8002dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e06f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e067      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	4b37      	ldr	r3, [pc, #220]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4934      	ldr	r1, [pc, #208]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fcba 	bl	8001778 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe fcb6 	bl	8001778 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e04f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 020c 	and.w	r2, r3, #12
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1eb      	bne.n	8002e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d20c      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e032      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4916      	ldr	r1, [pc, #88]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e96:	f000 f821 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	490a      	ldr	r1, [pc, #40]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	5ccb      	ldrb	r3, [r1, r3]
 8002eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fc1a 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	08008fc0 	.word	0x08008fc0
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000004 	.word	0x20000004

08002edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee0:	b094      	sub	sp, #80	; 0x50
 8002ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	2300      	movs	r3, #0
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eec:	2300      	movs	r3, #0
 8002eee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef4:	4b79      	ldr	r3, [pc, #484]	; (80030dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d00d      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x40>
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	f200 80e1 	bhi.w	80030c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f0e:	e0db      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f10:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f14:	e0db      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f16:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f1a:	e0d8      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f26:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f32:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	099b      	lsrs	r3, r3, #6
 8002f38:	2200      	movs	r2, #0
 8002f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
 8002f46:	2300      	movs	r3, #0
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f4e:	4622      	mov	r2, r4
 8002f50:	462b      	mov	r3, r5
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	0159      	lsls	r1, r3, #5
 8002f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f60:	0150      	lsls	r0, r2, #5
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4621      	mov	r1, r4
 8002f68:	1a51      	subs	r1, r2, r1
 8002f6a:	6139      	str	r1, [r7, #16]
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f80:	4659      	mov	r1, fp
 8002f82:	018b      	lsls	r3, r1, #6
 8002f84:	4651      	mov	r1, sl
 8002f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8a:	4651      	mov	r1, sl
 8002f8c:	018a      	lsls	r2, r1, #6
 8002f8e:	4651      	mov	r1, sl
 8002f90:	ebb2 0801 	subs.w	r8, r2, r1
 8002f94:	4659      	mov	r1, fp
 8002f96:	eb63 0901 	sbc.w	r9, r3, r1
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fae:	4690      	mov	r8, r2
 8002fb0:	4699      	mov	r9, r3
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	eb18 0303 	adds.w	r3, r8, r3
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	462b      	mov	r3, r5
 8002fbc:	eb49 0303 	adc.w	r3, r9, r3
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fce:	4629      	mov	r1, r5
 8002fd0:	024b      	lsls	r3, r1, #9
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fd8:	4621      	mov	r1, r4
 8002fda:	024a      	lsls	r2, r1, #9
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fec:	f7fd fe2c 	bl	8000c48 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff8:	e058      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffa:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	2200      	movs	r2, #0
 8003002:	4618      	mov	r0, r3
 8003004:	4611      	mov	r1, r2
 8003006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
 8003010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	f04f 0000 	mov.w	r0, #0
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	0159      	lsls	r1, r3, #5
 8003022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003026:	0150      	lsls	r0, r2, #5
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4641      	mov	r1, r8
 800302e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003032:	4649      	mov	r1, r9
 8003034:	eb63 0b01 	sbc.w	fp, r3, r1
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800304c:	ebb2 040a 	subs.w	r4, r2, sl
 8003050:	eb63 050b 	sbc.w	r5, r3, fp
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	00eb      	lsls	r3, r5, #3
 800305e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003062:	00e2      	lsls	r2, r4, #3
 8003064:	4614      	mov	r4, r2
 8003066:	461d      	mov	r5, r3
 8003068:	4643      	mov	r3, r8
 800306a:	18e3      	adds	r3, r4, r3
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	464b      	mov	r3, r9
 8003070:	eb45 0303 	adc.w	r3, r5, r3
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003082:	4629      	mov	r1, r5
 8003084:	028b      	lsls	r3, r1, #10
 8003086:	4621      	mov	r1, r4
 8003088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800308c:	4621      	mov	r1, r4
 800308e:	028a      	lsls	r2, r1, #10
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003096:	2200      	movs	r2, #0
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	61fa      	str	r2, [r7, #28]
 800309c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a0:	f7fd fdd2 	bl	8000c48 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_GetSysClockFreq+0x200>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	3301      	adds	r3, #1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030c6:	e002      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3750      	adds	r7, #80	; 0x50
 80030d4:	46bd      	mov	sp, r7
 80030d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003104:	f7ff fff0 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0a9b      	lsrs	r3, r3, #10
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	08008fd0 	.word	0x08008fd0

08003128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800312c:	f7ff ffdc 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0b5b      	lsrs	r3, r3, #13
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <HAL_RCC_GetPCLK2Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08008fd0 	.word	0x08008fd0

08003150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e03f      	b.n	80031e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe f910 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	; 0x24
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f829 	bl	80031ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b0c0      	sub	sp, #256	; 0x100
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	68d9      	ldr	r1, [r3, #12]
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	ea40 0301 	orr.w	r3, r0, r1
 8003214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	431a      	orrs	r2, r3
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	431a      	orrs	r2, r3
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003244:	f021 010c 	bic.w	r1, r1, #12
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003252:	430b      	orrs	r3, r1
 8003254:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	6999      	ldr	r1, [r3, #24]
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	ea40 0301 	orr.w	r3, r0, r1
 8003272:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4b8f      	ldr	r3, [pc, #572]	; (80034b8 <UART_SetConfig+0x2cc>)
 800327c:	429a      	cmp	r2, r3
 800327e:	d005      	beq.n	800328c <UART_SetConfig+0xa0>
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b8d      	ldr	r3, [pc, #564]	; (80034bc <UART_SetConfig+0x2d0>)
 8003288:	429a      	cmp	r2, r3
 800328a:	d104      	bne.n	8003296 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7ff ff4c 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 8003290:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003294:	e003      	b.n	800329e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003296:	f7ff ff33 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 800329a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a8:	f040 810c 	bne.w	80034c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032be:	4622      	mov	r2, r4
 80032c0:	462b      	mov	r3, r5
 80032c2:	1891      	adds	r1, r2, r2
 80032c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80032c6:	415b      	adcs	r3, r3
 80032c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032ce:	4621      	mov	r1, r4
 80032d0:	eb12 0801 	adds.w	r8, r2, r1
 80032d4:	4629      	mov	r1, r5
 80032d6:	eb43 0901 	adc.w	r9, r3, r1
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	4623      	mov	r3, r4
 80032f4:	eb18 0303 	adds.w	r3, r8, r3
 80032f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032fc:	462b      	mov	r3, r5
 80032fe:	eb49 0303 	adc.w	r3, r9, r3
 8003302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003312:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800331a:	460b      	mov	r3, r1
 800331c:	18db      	adds	r3, r3, r3
 800331e:	653b      	str	r3, [r7, #80]	; 0x50
 8003320:	4613      	mov	r3, r2
 8003322:	eb42 0303 	adc.w	r3, r2, r3
 8003326:	657b      	str	r3, [r7, #84]	; 0x54
 8003328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800332c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003330:	f7fd fc8a 	bl	8000c48 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <UART_SetConfig+0x2d4>)
 800333a:	fba3 2302 	umull	r2, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	011c      	lsls	r4, r3, #4
 8003342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800334c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003350:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	1891      	adds	r1, r2, r2
 800335a:	64b9      	str	r1, [r7, #72]	; 0x48
 800335c:	415b      	adcs	r3, r3
 800335e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003360:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003364:	4641      	mov	r1, r8
 8003366:	eb12 0a01 	adds.w	sl, r2, r1
 800336a:	4649      	mov	r1, r9
 800336c:	eb43 0b01 	adc.w	fp, r3, r1
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800337c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003384:	4692      	mov	sl, r2
 8003386:	469b      	mov	fp, r3
 8003388:	4643      	mov	r3, r8
 800338a:	eb1a 0303 	adds.w	r3, sl, r3
 800338e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003392:	464b      	mov	r3, r9
 8003394:	eb4b 0303 	adc.w	r3, fp, r3
 8003398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033b0:	460b      	mov	r3, r1
 80033b2:	18db      	adds	r3, r3, r3
 80033b4:	643b      	str	r3, [r7, #64]	; 0x40
 80033b6:	4613      	mov	r3, r2
 80033b8:	eb42 0303 	adc.w	r3, r2, r3
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
 80033be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033c6:	f7fd fc3f 	bl	8000c48 <__aeabi_uldivmod>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <UART_SetConfig+0x2d4>)
 80033d2:	fba3 2301 	umull	r2, r3, r3, r1
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2264      	movs	r2, #100	; 0x64
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	1acb      	subs	r3, r1, r3
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <UART_SetConfig+0x2d4>)
 80033e8:	fba3 2302 	umull	r2, r3, r3, r2
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033f4:	441c      	add	r4, r3
 80033f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003400:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003404:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	1891      	adds	r1, r2, r2
 800340e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003410:	415b      	adcs	r3, r3
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003418:	4641      	mov	r1, r8
 800341a:	1851      	adds	r1, r2, r1
 800341c:	6339      	str	r1, [r7, #48]	; 0x30
 800341e:	4649      	mov	r1, r9
 8003420:	414b      	adcs	r3, r1
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003430:	4659      	mov	r1, fp
 8003432:	00cb      	lsls	r3, r1, #3
 8003434:	4651      	mov	r1, sl
 8003436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343a:	4651      	mov	r1, sl
 800343c:	00ca      	lsls	r2, r1, #3
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	4603      	mov	r3, r0
 8003444:	4642      	mov	r2, r8
 8003446:	189b      	adds	r3, r3, r2
 8003448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800344c:	464b      	mov	r3, r9
 800344e:	460a      	mov	r2, r1
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003464:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800346c:	460b      	mov	r3, r1
 800346e:	18db      	adds	r3, r3, r3
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
 8003472:	4613      	mov	r3, r2
 8003474:	eb42 0303 	adc.w	r3, r2, r3
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800347e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003482:	f7fd fbe1 	bl	8000c48 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <UART_SetConfig+0x2d4>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	2164      	movs	r1, #100	; 0x64
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	3332      	adds	r3, #50	; 0x32
 800349e:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <UART_SetConfig+0x2d4>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	f003 0207 	and.w	r2, r3, #7
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4422      	add	r2, r4
 80034b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034b4:	e105      	b.n	80036c2 <UART_SetConfig+0x4d6>
 80034b6:	bf00      	nop
 80034b8:	40011000 	.word	0x40011000
 80034bc:	40011400 	.word	0x40011400
 80034c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034d6:	4642      	mov	r2, r8
 80034d8:	464b      	mov	r3, r9
 80034da:	1891      	adds	r1, r2, r2
 80034dc:	6239      	str	r1, [r7, #32]
 80034de:	415b      	adcs	r3, r3
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034e6:	4641      	mov	r1, r8
 80034e8:	1854      	adds	r4, r2, r1
 80034ea:	4649      	mov	r1, r9
 80034ec:	eb43 0501 	adc.w	r5, r3, r1
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	00eb      	lsls	r3, r5, #3
 80034fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	4614      	mov	r4, r2
 8003502:	461d      	mov	r5, r3
 8003504:	4643      	mov	r3, r8
 8003506:	18e3      	adds	r3, r4, r3
 8003508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800350c:	464b      	mov	r3, r9
 800350e:	eb45 0303 	adc.w	r3, r5, r3
 8003512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003532:	4629      	mov	r1, r5
 8003534:	008b      	lsls	r3, r1, #2
 8003536:	4621      	mov	r1, r4
 8003538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800353c:	4621      	mov	r1, r4
 800353e:	008a      	lsls	r2, r1, #2
 8003540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003544:	f7fd fb80 	bl	8000c48 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4b60      	ldr	r3, [pc, #384]	; (80036d0 <UART_SetConfig+0x4e4>)
 800354e:	fba3 2302 	umull	r2, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	011c      	lsls	r4, r3, #4
 8003556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003560:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003564:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003568:	4642      	mov	r2, r8
 800356a:	464b      	mov	r3, r9
 800356c:	1891      	adds	r1, r2, r2
 800356e:	61b9      	str	r1, [r7, #24]
 8003570:	415b      	adcs	r3, r3
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003578:	4641      	mov	r1, r8
 800357a:	1851      	adds	r1, r2, r1
 800357c:	6139      	str	r1, [r7, #16]
 800357e:	4649      	mov	r1, r9
 8003580:	414b      	adcs	r3, r1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003590:	4659      	mov	r1, fp
 8003592:	00cb      	lsls	r3, r1, #3
 8003594:	4651      	mov	r1, sl
 8003596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359a:	4651      	mov	r1, sl
 800359c:	00ca      	lsls	r2, r1, #3
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	4642      	mov	r2, r8
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035ac:	464b      	mov	r3, r9
 80035ae:	460a      	mov	r2, r1
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035d0:	4649      	mov	r1, r9
 80035d2:	008b      	lsls	r3, r1, #2
 80035d4:	4641      	mov	r1, r8
 80035d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035da:	4641      	mov	r1, r8
 80035dc:	008a      	lsls	r2, r1, #2
 80035de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035e2:	f7fd fb31 	bl	8000c48 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <UART_SetConfig+0x4e4>)
 80035ec:	fba3 1302 	umull	r1, r3, r3, r2
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	2164      	movs	r1, #100	; 0x64
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	3332      	adds	r3, #50	; 0x32
 80035fe:	4a34      	ldr	r2, [pc, #208]	; (80036d0 <UART_SetConfig+0x4e4>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360a:	441c      	add	r4, r3
 800360c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003610:	2200      	movs	r2, #0
 8003612:	673b      	str	r3, [r7, #112]	; 0x70
 8003614:	677a      	str	r2, [r7, #116]	; 0x74
 8003616:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800361a:	4642      	mov	r2, r8
 800361c:	464b      	mov	r3, r9
 800361e:	1891      	adds	r1, r2, r2
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	415b      	adcs	r3, r3
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800362a:	4641      	mov	r1, r8
 800362c:	1851      	adds	r1, r2, r1
 800362e:	6039      	str	r1, [r7, #0]
 8003630:	4649      	mov	r1, r9
 8003632:	414b      	adcs	r3, r1
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003642:	4659      	mov	r1, fp
 8003644:	00cb      	lsls	r3, r1, #3
 8003646:	4651      	mov	r1, sl
 8003648:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364c:	4651      	mov	r1, sl
 800364e:	00ca      	lsls	r2, r1, #3
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	4603      	mov	r3, r0
 8003656:	4642      	mov	r2, r8
 8003658:	189b      	adds	r3, r3, r2
 800365a:	66bb      	str	r3, [r7, #104]	; 0x68
 800365c:	464b      	mov	r3, r9
 800365e:	460a      	mov	r2, r1
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	663b      	str	r3, [r7, #96]	; 0x60
 8003670:	667a      	str	r2, [r7, #100]	; 0x64
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800367e:	4649      	mov	r1, r9
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	4641      	mov	r1, r8
 8003684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003688:	4641      	mov	r1, r8
 800368a:	008a      	lsls	r2, r1, #2
 800368c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003690:	f7fd fada 	bl	8000c48 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <UART_SetConfig+0x4e4>)
 800369a:	fba3 1302 	umull	r1, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2164      	movs	r1, #100	; 0x64
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	3332      	adds	r3, #50	; 0x32
 80036ac:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <UART_SetConfig+0x4e4>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4422      	add	r2, r4
 80036c0:	609a      	str	r2, [r3, #8]
}
 80036c2:	bf00      	nop
 80036c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036c8:	46bd      	mov	sp, r7
 80036ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ce:	bf00      	nop
 80036d0:	51eb851f 	.word	0x51eb851f
 80036d4:	00000000 	.word	0x00000000

080036d8 <STMpil_step>:
/* External outputs (root outports fed by signals with default storage) */
ExtY_STMpil_T STMpil_Y;

/* Model step function */
void STMpil_step(void)
{
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	b0c1      	sub	sp, #260	; 0x104
 80036de:	af00      	add	r7, sp, #0
  real_T rtb_Add4;
  int32_T rtb_DataTypeConversion2;

  /* Outputs for Atomic SubSystem: '<Root>/STMpil' */
  /* DiscreteTransferFcn: '<S113>/Current filter' */
  numAccum = STMpil_P.Currentfilter_NumCoef * STMpil_DW.Currentfilter_states;
 80036e0:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <STMpil_step+0x240>)
 80036e2:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	; 0x100
 80036e6:	4b8d      	ldr	r3, [pc, #564]	; (800391c <STMpil_step+0x244>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff84 	bl	80005f8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

  /* Gain: '<S113>/R3' incorporates:
   *  Memory: '<S113>/it init1'
   */
  rtb_Integrator = STMpil_P.R3_Gain * STMpil_DW.itinit1_PreviousInput;
 80036f8:	4b87      	ldr	r3, [pc, #540]	; (8003918 <STMpil_step+0x240>)
 80036fa:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 80036fe:	4b87      	ldr	r3, [pc, #540]	; (800391c <STMpil_step+0x244>)
 8003700:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003704:	f7fc ff78 	bl	80005f8 <__aeabi_dmul>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  /* DataTypeConversion: '<S113>/Data Type Conversion2' incorporates:
   *  Constant: '<S115>/Constant'
   *  DiscreteTransferFcn: '<S113>/Current filter'
   *  RelationalOperator: '<S115>/Compare'
   */
  rtb_DataTypeConversion2 = (numAccum > STMpil_P.Constant_Value);
 8003710:	4b81      	ldr	r3, [pc, #516]	; (8003918 <STMpil_step+0x240>)
 8003712:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8003716:	2101      	movs	r1, #1
 8003718:	460c      	mov	r4, r1
 800371a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800371e:	f7fd f9fb 	bl	8000b18 <__aeabi_dcmpgt>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <STMpil_step+0x54>
 8003728:	2300      	movs	r3, #0
 800372a:	461c      	mov	r4, r3
 800372c:	b2e3      	uxtb	r3, r4
 800372e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* DiscreteIntegrator: '<S113>/int(i)' incorporates:
   *  Memory: '<S113>/it init'
   */
  if (STMpil_DW.inti_IC_LOADING != 0) {
 8003732:	4b7a      	ldr	r3, [pc, #488]	; (800391c <STMpil_step+0x244>)
 8003734:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8003738:	2b00      	cmp	r3, #0
 800373a:	d028      	beq.n	800378e <STMpil_step+0xb6>
    STMpil_DW.inti_DSTATE = STMpil_DW.itinit_PreviousInput;
 800373c:	4b77      	ldr	r3, [pc, #476]	; (800391c <STMpil_step+0x244>)
 800373e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003742:	4976      	ldr	r1, [pc, #472]	; (800391c <STMpil_step+0x244>)
 8003744:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 8003748:	4b74      	ldr	r3, [pc, #464]	; (800391c <STMpil_step+0x244>)
 800374a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800374e:	4b72      	ldr	r3, [pc, #456]	; (8003918 <STMpil_step+0x240>)
 8003750:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8003754:	f7fd f9d6 	bl	8000b04 <__aeabi_dcmpge>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d006      	beq.n	800376c <STMpil_step+0x94>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 800375e:	4b6e      	ldr	r3, [pc, #440]	; (8003918 <STMpil_step+0x240>)
 8003760:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8003764:	496d      	ldr	r1, [pc, #436]	; (800391c <STMpil_step+0x244>)
 8003766:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800376a:	e010      	b.n	800378e <STMpil_step+0xb6>
    } else {
      if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 800376c:	4b6b      	ldr	r3, [pc, #428]	; (800391c <STMpil_step+0x244>)
 800376e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003772:	4b69      	ldr	r3, [pc, #420]	; (8003918 <STMpil_step+0x240>)
 8003774:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8003778:	f7fd f9ba 	bl	8000af0 <__aeabi_dcmple>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <STMpil_step+0xb6>
        STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 8003782:	4b65      	ldr	r3, [pc, #404]	; (8003918 <STMpil_step+0x240>)
 8003784:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8003788:	4964      	ldr	r1, [pc, #400]	; (800391c <STMpil_step+0x244>)
 800378a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      }
    }
  }

  if ((rtb_DataTypeConversion2 > 0) && (STMpil_DW.inti_PrevResetState <= 0)) {
 800378e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003792:	2b00      	cmp	r3, #0
 8003794:	dd2d      	ble.n	80037f2 <STMpil_step+0x11a>
 8003796:	4b61      	ldr	r3, [pc, #388]	; (800391c <STMpil_step+0x244>)
 8003798:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800379c:	2b00      	cmp	r3, #0
 800379e:	dc28      	bgt.n	80037f2 <STMpil_step+0x11a>
    STMpil_DW.inti_DSTATE = STMpil_DW.itinit_PreviousInput;
 80037a0:	4b5e      	ldr	r3, [pc, #376]	; (800391c <STMpil_step+0x244>)
 80037a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80037a6:	495d      	ldr	r1, [pc, #372]	; (800391c <STMpil_step+0x244>)
 80037a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 80037ac:	4b5b      	ldr	r3, [pc, #364]	; (800391c <STMpil_step+0x244>)
 80037ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80037b2:	4b59      	ldr	r3, [pc, #356]	; (8003918 <STMpil_step+0x240>)
 80037b4:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80037b8:	f7fd f9a4 	bl	8000b04 <__aeabi_dcmpge>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <STMpil_step+0xf8>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 80037c2:	4b55      	ldr	r3, [pc, #340]	; (8003918 <STMpil_step+0x240>)
 80037c4:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80037c8:	4954      	ldr	r1, [pc, #336]	; (800391c <STMpil_step+0x244>)
 80037ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80037ce:	e010      	b.n	80037f2 <STMpil_step+0x11a>
    } else {
      if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 80037d0:	4b52      	ldr	r3, [pc, #328]	; (800391c <STMpil_step+0x244>)
 80037d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <STMpil_step+0x240>)
 80037d8:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80037dc:	f7fd f988 	bl	8000af0 <__aeabi_dcmple>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <STMpil_step+0x11a>
        STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <STMpil_step+0x240>)
 80037e8:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80037ec:	494b      	ldr	r1, [pc, #300]	; (800391c <STMpil_step+0x244>)
 80037ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
      }
    }
  }

  if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <STMpil_step+0x244>)
 80037f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80037f8:	4b47      	ldr	r3, [pc, #284]	; (8003918 <STMpil_step+0x240>)
 80037fa:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80037fe:	f7fd f981 	bl	8000b04 <__aeabi_dcmpge>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d006      	beq.n	8003816 <STMpil_step+0x13e>
    STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 8003808:	4b43      	ldr	r3, [pc, #268]	; (8003918 <STMpil_step+0x240>)
 800380a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800380e:	4943      	ldr	r1, [pc, #268]	; (800391c <STMpil_step+0x244>)
 8003810:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003814:	e010      	b.n	8003838 <STMpil_step+0x160>
  } else {
    if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 8003816:	4b41      	ldr	r3, [pc, #260]	; (800391c <STMpil_step+0x244>)
 8003818:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <STMpil_step+0x240>)
 800381e:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8003822:	f7fd f965 	bl	8000af0 <__aeabi_dcmple>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <STMpil_step+0x160>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 800382c:	4b3a      	ldr	r3, [pc, #232]	; (8003918 <STMpil_step+0x240>)
 800382e:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8003832:	493a      	ldr	r1, [pc, #232]	; (800391c <STMpil_step+0x244>)
 8003834:	e9c1 2302 	strd	r2, r3, [r1, #8]
  }

  /* Gain: '<S113>/Gain' incorporates:
   *  DiscreteIntegrator: '<S113>/int(i)'
   */
  rtb_Gain = STMpil_P.Gain_Gain * STMpil_DW.inti_DSTATE;
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <STMpil_step+0x240>)
 800383a:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <STMpil_step+0x244>)
 8003840:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003844:	f7fc fed8 	bl	80005f8 <__aeabi_dmul>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

  /* Fcn: '<S113>/Fcn6' */
  rtb_Add3_ocsa = (((-rtb_Integrator) * 0.999) * 0.1) * 0.9999;
 8003850:	f8d7 50f0 	ldr.w	r5, [r7, #240]	; 0xf0
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800385c:	a328      	add	r3, pc, #160	; (adr r3, 8003900 <STMpil_step+0x228>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	4628      	mov	r0, r5
 8003864:	4631      	mov	r1, r6
 8003866:	f7fc fec7 	bl	80005f8 <__aeabi_dmul>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	a325      	add	r3, pc, #148	; (adr r3, 8003908 <STMpil_step+0x230>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f7fc febe 	bl	80005f8 <__aeabi_dmul>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	a322      	add	r3, pc, #136	; (adr r3, 8003910 <STMpil_step+0x238>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f7fc feb5 	bl	80005f8 <__aeabi_dmul>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  /* Switch: '<S121>/Switch2' incorporates:
   *  RelationalOperator: '<S121>/LowerRelop1'
   *  RelationalOperator: '<S121>/UpperRelop'
   *  Switch: '<S121>/Switch'
   */
  if (rtb_Gain > rtb_Integrator) {
 8003896:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800389a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800389e:	f7fd f93b 	bl	8000b18 <__aeabi_dcmpgt>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <STMpil_step+0x1f4>
  } else if (rtb_Gain < rtb_Add3_ocsa) {
 80038a8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80038ac:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80038b0:	f7fd f914 	bl	8000adc <__aeabi_dcmplt>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <STMpil_step+0x1ec>
    /* Switch: '<S121>/Switch' */
    rtb_Integrator = rtb_Add3_ocsa;
 80038ba:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80038be:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80038c2:	e003      	b.n	80038cc <STMpil_step+0x1f4>
  } else {
    rtb_Integrator = rtb_Gain;
 80038c4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80038c8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  /* End of Switch: '<S121>/Switch2' */

  /* Gain: '<S113>/R2' incorporates:
   *  Memory: '<S113>/it init1'
   */
  rtb_Add3_ocsa = STMpil_P.R2_Gain * STMpil_DW.itinit1_PreviousInput;
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <STMpil_step+0x240>)
 80038ce:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <STMpil_step+0x244>)
 80038d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80038d8:	f7fc fe8e 	bl	80005f8 <__aeabi_dmul>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
   *  Constant: '<S113>/Constant9'
   *  RelationalOperator: '<S120>/LowerRelop1'
   *  RelationalOperator: '<S120>/UpperRelop'
   *  Switch: '<S120>/Switch'
   */
  if (rtb_Gain > rtb_Add3_ocsa) {
 80038e4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80038e8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80038ec:	f7fd f914 	bl	8000b18 <__aeabi_dcmpgt>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d014      	beq.n	8003920 <STMpil_step+0x248>
    rtb_Gain = rtb_Add3_ocsa;
 80038f6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80038fa:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 80038fe:	e01e      	b.n	800393e <STMpil_step+0x266>
 8003900:	d916872b 	.word	0xd916872b
 8003904:	3feff7ce 	.word	0x3feff7ce
 8003908:	9999999a 	.word	0x9999999a
 800390c:	3fb99999 	.word	0x3fb99999
 8003910:	48e8a71e 	.word	0x48e8a71e
 8003914:	3fefff2e 	.word	0x3fefff2e
 8003918:	20000010 	.word	0x20000010
 800391c:	200005f8 	.word	0x200005f8
  } else {
    if (rtb_Gain < STMpil_P.Constant9_Value) {
 8003920:	4ba1      	ldr	r3, [pc, #644]	; (8003ba8 <STMpil_step+0x4d0>)
 8003922:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 8003926:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800392a:	f7fd f8d7 	bl	8000adc <__aeabi_dcmplt>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <STMpil_step+0x266>
      /* Switch: '<S120>/Switch' incorporates:
       *  Constant: '<S113>/Constant9'
       */
      rtb_Gain = STMpil_P.Constant9_Value;
 8003934:	4b9c      	ldr	r3, [pc, #624]	; (8003ba8 <STMpil_step+0x4d0>)
 8003936:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 800393a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

  /* Switch: '<S113>/Switch7' incorporates:
   *  Fcn: '<S113>/Fcn9'
   *  RelationalOperator: '<S113>/Relational Operator'
   */
  if ((((1.000001 * rtb_Add3_ocsa) * 0.942507068803021) / 0.9999) <= rtb_Gain) {
 800393e:	a38c      	add	r3, pc, #560	; (adr r3, 8003b70 <STMpil_step+0x498>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003948:	f7fc fe56 	bl	80005f8 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	a388      	add	r3, pc, #544	; (adr r3, 8003b78 <STMpil_step+0x4a0>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f7fc fe4d 	bl	80005f8 <__aeabi_dmul>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	a386      	add	r3, pc, #536	; (adr r3, 8003b80 <STMpil_step+0x4a8>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc ff6e 	bl	800084c <__aeabi_ddiv>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8003978:	f7fd f8c4 	bl	8000b04 <__aeabi_dcmpge>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <STMpil_step+0x2b2>
    rtb_Gain = rtb_Add3_ocsa;
 8003982:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003986:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
   *  Product: '<S117>/Product1'
   *  Product: '<S117>/Product2'
   *  Product: '<S117>/Product3'
   *  RelationalOperator: '<S116>/Compare'
   */
  switch ((int32_T)STMpil_P.Battery_BatType) {
 800398a:	4b87      	ldr	r3, [pc, #540]	; (8003ba8 <STMpil_step+0x4d0>)
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f7fd f8e0 	bl	8000b58 <__aeabi_d2iz>
 8003998:	4603      	mov	r3, r0
 800399a:	2b03      	cmp	r3, #3
 800399c:	f000 80d7 	beq.w	8003b4e <STMpil_step+0x476>
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	f300 815a 	bgt.w	8003c5a <STMpil_step+0x582>
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d002      	beq.n	80039b0 <STMpil_step+0x2d8>
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d05d      	beq.n	8003a6a <STMpil_step+0x392>
 80039ae:	e154      	b.n	8003c5a <STMpil_step+0x582>
   case 1:
    STMpil_Y.SOC = (((-(STMpil_P.Constant4_Value_mb1d * ((real_T)(numAccum <
 80039b0:	4b7d      	ldr	r3, [pc, #500]	; (8003ba8 <STMpil_step+0x4d0>)
 80039b2:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 80039b6:	4b7c      	ldr	r3, [pc, #496]	; (8003ba8 <STMpil_step+0x4d0>)
 80039b8:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = (((-(STMpil_P.Constant4_Value_mb1d * ((real_T)(numAccum <
 80039bc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80039c0:	f7fd f88c 	bl	8000adc <__aeabi_dcmplt>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <STMpil_step+0x2fa>
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	4977      	ldr	r1, [pc, #476]	; (8003bac <STMpil_step+0x4d4>)
 80039d0:	e003      	b.n	80039da <STMpil_step+0x302>
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f7fc fe0b 	bl	80005f8 <__aeabi_dmul>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4692      	mov	sl, r2
 80039e8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 80039ec:	a366      	add	r3, pc, #408	; (adr r3, 8003b88 <STMpil_step+0x4b0>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	4650      	mov	r0, sl
 80039f4:	4659      	mov	r1, fp
 80039f6:	f7fc fdff 	bl	80005f8 <__aeabi_dmul>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4614      	mov	r4, r2
 8003a00:	461d      	mov	r5, r3
                    (STMpil_P.Constant4_Value_mb1d * numAccum)) *
 8003a02:	4b69      	ldr	r3, [pc, #420]	; (8003ba8 <STMpil_step+0x4d0>)
 8003a04:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8003a08:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8003a0c:	f7fc fdf4 	bl	80005f8 <__aeabi_dmul>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003a14:	4620      	mov	r0, r4
 8003a16:	4629      	mov	r1, r5
 8003a18:	f7fc fdee 	bl	80005f8 <__aeabi_dmul>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4614      	mov	r4, r2
 8003a22:	461d      	mov	r5, r3
      (2.1750499999999882 / ((STMpil_P.Constant4_Value_mb1d * rtb_Integrator) +
 8003a24:	4b60      	ldr	r3, [pc, #384]	; (8003ba8 <STMpil_step+0x4d0>)
 8003a26:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8003a2a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003a2e:	f7fc fde3 	bl	80005f8 <__aeabi_dmul>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	a355      	add	r3, pc, #340	; (adr r3, 8003b90 <STMpil_step+0x4b8>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fc fc24 	bl	800028c <__adddf3>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	a153      	add	r1, pc, #332	; (adr r1, 8003b98 <STMpil_step+0x4c0>)
 8003a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a4e:	f7fc fefd 	bl	800084c <__aeabi_ddiv>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
                    (STMpil_P.Constant4_Value_mb1d * numAccum)) *
 8003a56:	4620      	mov	r0, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f7fc fdcd 	bl	80005f8 <__aeabi_dmul>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
    STMpil_Y.SOC = (((-(STMpil_P.Constant4_Value_mb1d * ((real_T)(numAccum <
 8003a62:	4953      	ldr	r1, [pc, #332]	; (8003bb0 <STMpil_step+0x4d8>)
 8003a64:	e9c1 2300 	strd	r2, r3, [r1]
        0.21750499999999884));
    break;
 8003a68:	e159      	b.n	8003d1e <STMpil_step+0x646>
   case 2:
    /* Product: '<S117>/Product' incorporates:
     *  Constant: '<S117>/Constant1'
     *  Memory: '<S113>/it init1'
     */
    rtb_Add3_ocsa = STMpil_P.Constant1_Value * STMpil_DW.itinit1_PreviousInput;
 8003a6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <STMpil_step+0x4d0>)
 8003a6c:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <STMpil_step+0x4dc>)
 8003a72:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003a76:	f7fc fdbf 	bl	80005f8 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
    STMpil_Y.SOC = ((((-(STMpil_P.Constant1_Value * ((real_T)(numAccum <
 8003a82:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <STMpil_step+0x4d0>)
 8003a84:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003a88:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <STMpil_step+0x4d0>)
 8003a8a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = ((((-(STMpil_P.Constant1_Value * ((real_T)(numAccum <
 8003a8e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003a92:	f7fd f823 	bl	8000adc <__aeabi_dcmplt>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <STMpil_step+0x3cc>
 8003a9c:	f04f 0000 	mov.w	r0, #0
 8003aa0:	4942      	ldr	r1, [pc, #264]	; (8003bac <STMpil_step+0x4d4>)
 8003aa2:	e003      	b.n	8003aac <STMpil_step+0x3d4>
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	4622      	mov	r2, r4
 8003aae:	462b      	mov	r3, r5
 8003ab0:	f7fc fda2 	bl	80005f8 <__aeabi_dmul>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4690      	mov	r8, r2
 8003aba:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003abe:	a332      	add	r3, pc, #200	; (adr r3, 8003b88 <STMpil_step+0x4b0>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	f7fc fd96 	bl	80005f8 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
                     (STMpil_P.Constant1_Value * numAccum)) * rtb_Add3_ocsa) /
 8003ad4:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <STMpil_step+0x4d0>)
 8003ad6:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003ada:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8003ade:	f7fc fd8b 	bl	80005f8 <__aeabi_dmul>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	4629      	mov	r1, r5
 8003aea:	f7fc fd85 	bl	80005f8 <__aeabi_dmul>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
                     (STMpil_P.Constant1_Value * numAccum)) * rtb_Add3_ocsa) /
 8003af6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003afa:	f7fc fd7d 	bl	80005f8 <__aeabi_dmul>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4614      	mov	r4, r2
 8003b04:	461d      	mov	r5, r3
      ((STMpil_P.Constant1_Value * rtb_Integrator) + (rtb_Add3_ocsa * 0.1));
 8003b06:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <STMpil_step+0x4d0>)
 8003b08:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8003b0c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003b10:	f7fc fd72 	bl	80005f8 <__aeabi_dmul>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4690      	mov	r8, r2
 8003b1a:	4699      	mov	r9, r3
 8003b1c:	a320      	add	r3, pc, #128	; (adr r3, 8003ba0 <STMpil_step+0x4c8>)
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b26:	f7fc fd67 	bl	80005f8 <__aeabi_dmul>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4640      	mov	r0, r8
 8003b30:	4649      	mov	r1, r9
 8003b32:	f7fc fbab 	bl	800028c <__adddf3>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
                     (STMpil_P.Constant1_Value * numAccum)) * rtb_Add3_ocsa) /
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	f7fc fe85 	bl	800084c <__aeabi_ddiv>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
    STMpil_Y.SOC = ((((-(STMpil_P.Constant1_Value * ((real_T)(numAccum <
 8003b46:	491a      	ldr	r1, [pc, #104]	; (8003bb0 <STMpil_step+0x4d8>)
 8003b48:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8003b4c:	e0e7      	b.n	8003d1e <STMpil_step+0x646>

   case 3:
    STMpil_Y.SOC = (((-(STMpil_P.Constant3_Value * ((real_T)(numAccum <
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <STMpil_step+0x4d0>)
 8003b50:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003b54:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <STMpil_step+0x4d0>)
 8003b56:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = (((-(STMpil_P.Constant3_Value * ((real_T)(numAccum <
 8003b5a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003b5e:	f7fc ffbd 	bl	8000adc <__aeabi_dcmplt>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d027      	beq.n	8003bb8 <STMpil_step+0x4e0>
 8003b68:	f04f 0000 	mov.w	r0, #0
 8003b6c:	490f      	ldr	r1, [pc, #60]	; (8003bac <STMpil_step+0x4d4>)
 8003b6e:	e027      	b.n	8003bc0 <STMpil_step+0x4e8>
 8003b70:	0c6f7a0b 	.word	0x0c6f7a0b
 8003b74:	3ff00001 	.word	0x3ff00001
 8003b78:	95983fe0 	.word	0x95983fe0
 8003b7c:	3fee2904 	.word	0x3fee2904
 8003b80:	48e8a71e 	.word	0x48e8a71e
 8003b84:	3fefff2e 	.word	0x3fefff2e
 8003b88:	4912dc46 	.word	0x4912dc46
 8003b8c:	3f9e628e 	.word	0x3f9e628e
 8003b90:	2edbb574 	.word	0x2edbb574
 8003b94:	3fcbd734 	.word	0x3fcbd734
 8003b98:	9d495168 	.word	0x9d495168
 8003b9c:	40016680 	.word	0x40016680
 8003ba0:	9999999a 	.word	0x9999999a
 8003ba4:	3fb99999 	.word	0x3fb99999
 8003ba8:	20000010 	.word	0x20000010
 8003bac:	3ff00000 	.word	0x3ff00000
 8003bb0:	200006e0 	.word	0x200006e0
 8003bb4:	200005f8 	.word	0x200005f8
 8003bb8:	f04f 0000 	mov.w	r0, #0
 8003bbc:	f04f 0100 	mov.w	r1, #0
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	462b      	mov	r3, r5
 8003bc4:	f7fc fd18 	bl	80005f8 <__aeabi_dmul>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003bd4:	a386      	add	r3, pc, #536	; (adr r3, 8003df0 <STMpil_step+0x718>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bde:	f7fc fd0b 	bl	80005f8 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4614      	mov	r4, r2
 8003be8:	461d      	mov	r5, r3
                    (STMpil_P.Constant3_Value * numAccum)) * (2.1750499999999882
 8003bea:	4b85      	ldr	r3, [pc, #532]	; (8003e00 <STMpil_step+0x728>)
 8003bec:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003bf0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8003bf4:	f7fc fd00 	bl	80005f8 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	4629      	mov	r1, r5
 8003c00:	f7fc fcfa 	bl	80005f8 <__aeabi_dmul>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	461d      	mov	r5, r3
      / (fabs(STMpil_P.Constant3_Value * rtb_Integrator) + 0.21750499999999884));
 8003c0c:	4b7c      	ldr	r3, [pc, #496]	; (8003e00 <STMpil_step+0x728>)
 8003c0e:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8003c12:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003c16:	f7fc fcef 	bl	80005f8 <__aeabi_dmul>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	623a      	str	r2, [r7, #32]
 8003c20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	a36e      	add	r3, pc, #440	; (adr r3, 8003de0 <STMpil_step+0x708>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c30:	f7fc fb2c 	bl	800028c <__adddf3>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	a16b      	add	r1, pc, #428	; (adr r1, 8003de8 <STMpil_step+0x710>)
 8003c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c3e:	f7fc fe05 	bl	800084c <__aeabi_ddiv>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
                    (STMpil_P.Constant3_Value * numAccum)) * (2.1750499999999882
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc fcd5 	bl	80005f8 <__aeabi_dmul>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
    STMpil_Y.SOC = (((-(STMpil_P.Constant3_Value * ((real_T)(numAccum <
 8003c52:	496c      	ldr	r1, [pc, #432]	; (8003e04 <STMpil_step+0x72c>)
 8003c54:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8003c58:	e061      	b.n	8003d1e <STMpil_step+0x646>

   default:
    STMpil_Y.SOC = (((-(STMpil_P.Constant2_Value * ((real_T)(numAccum <
 8003c5a:	4b69      	ldr	r3, [pc, #420]	; (8003e00 <STMpil_step+0x728>)
 8003c5c:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003c60:	4b67      	ldr	r3, [pc, #412]	; (8003e00 <STMpil_step+0x728>)
 8003c62:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = (((-(STMpil_P.Constant2_Value * ((real_T)(numAccum <
 8003c66:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003c6a:	f7fc ff37 	bl	8000adc <__aeabi_dcmplt>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <STMpil_step+0x5a4>
 8003c74:	f04f 0000 	mov.w	r0, #0
 8003c78:	4963      	ldr	r1, [pc, #396]	; (8003e08 <STMpil_step+0x730>)
 8003c7a:	e003      	b.n	8003c84 <STMpil_step+0x5ac>
 8003c7c:	f04f 0000 	mov.w	r0, #0
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	4622      	mov	r2, r4
 8003c86:	462b      	mov	r3, r5
 8003c88:	f7fc fcb6 	bl	80005f8 <__aeabi_dmul>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	61ba      	str	r2, [r7, #24]
 8003c92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	61fb      	str	r3, [r7, #28]
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003c98:	a355      	add	r3, pc, #340	; (adr r3, 8003df0 <STMpil_step+0x718>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ca2:	f7fc fca9 	bl	80005f8 <__aeabi_dmul>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4614      	mov	r4, r2
 8003cac:	461d      	mov	r5, r3
                    (STMpil_P.Constant2_Value * numAccum)) * (2.1750499999999882
 8003cae:	4b54      	ldr	r3, [pc, #336]	; (8003e00 <STMpil_step+0x728>)
 8003cb0:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8003cb4:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8003cb8:	f7fc fc9e 	bl	80005f8 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc fc98 	bl	80005f8 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
      / (fabs(STMpil_P.Constant2_Value * rtb_Integrator) + 0.21750499999999884));
 8003cd0:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <STMpil_step+0x728>)
 8003cd2:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8003cd6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003cda:	f7fc fc8d 	bl	80005f8 <__aeabi_dmul>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	613a      	str	r2, [r7, #16]
 8003ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	a33d      	add	r3, pc, #244	; (adr r3, 8003de0 <STMpil_step+0x708>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cf4:	f7fc faca 	bl	800028c <__adddf3>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	a13a      	add	r1, pc, #232	; (adr r1, 8003de8 <STMpil_step+0x710>)
 8003cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d02:	f7fc fda3 	bl	800084c <__aeabi_ddiv>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
                    (STMpil_P.Constant2_Value * numAccum)) * (2.1750499999999882
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f7fc fc73 	bl	80005f8 <__aeabi_dmul>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
    STMpil_Y.SOC = (((-(STMpil_P.Constant2_Value * ((real_T)(numAccum <
 8003d16:	493b      	ldr	r1, [pc, #236]	; (8003e04 <STMpil_step+0x72c>)
 8003d18:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8003d1c:	bf00      	nop
  /* MultiPortSwitch: '<S118>/Multiport Switch1' incorporates:
   *  Constant: '<S118>/Constant'
   *  DiscreteIntegrator: '<S118>/Discrete-Time Integrator'
   *  Fcn: '<S118>/Li-Ion'
   */
  switch ((int32_T)STMpil_P.Battery_BatType) {
 8003d1e:	4b38      	ldr	r3, [pc, #224]	; (8003e00 <STMpil_step+0x728>)
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7fc ff16 	bl	8000b58 <__aeabi_d2iz>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d04d      	beq.n	8003dce <STMpil_step+0x6f6>
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	dc6e      	bgt.n	8003e14 <STMpil_step+0x73c>
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d002      	beq.n	8003d40 <STMpil_step+0x668>
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d006      	beq.n	8003d4c <STMpil_step+0x674>
 8003d3e:	e069      	b.n	8003e14 <STMpil_step+0x73c>
   case 1:
    rtb_Integrator = STMpil_DW.DiscreteTimeIntegrator_DSTATE;
 8003d40:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <STMpil_step+0x734>)
 8003d42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d46:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8003d4a:	e069      	b.n	8003e20 <STMpil_step+0x748>

   case 2:
    /* Saturate: '<S118>/Saturation' */
    if (rtb_Gain > STMpil_P.Saturation_UpperSat) {
 8003d4c:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <STMpil_step+0x728>)
 8003d4e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8003d52:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8003d56:	f7fc fedf 	bl	8000b18 <__aeabi_dcmpgt>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <STMpil_step+0x694>
      rtb_Integrator = STMpil_P.Saturation_UpperSat;
 8003d60:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <STMpil_step+0x728>)
 8003d62:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8003d66:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8003d6a:	e013      	b.n	8003d94 <STMpil_step+0x6bc>
    } else if (rtb_Gain < STMpil_P.Saturation_LowerSat) {
 8003d6c:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <STMpil_step+0x728>)
 8003d6e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8003d72:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8003d76:	f7fc feb1 	bl	8000adc <__aeabi_dcmplt>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <STMpil_step+0x6b4>
      rtb_Integrator = STMpil_P.Saturation_LowerSat;
 8003d80:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <STMpil_step+0x728>)
 8003d82:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8003d86:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8003d8a:	e003      	b.n	8003d94 <STMpil_step+0x6bc>
    } else {
      rtb_Integrator = rtb_Gain;
 8003d8c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8003d90:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    }

    /* End of Saturate: '<S118>/Saturation' */
    rtb_Integrator = 0.21089319159632841 * exp(-15.0 * rtb_Integrator);
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <STMpil_step+0x738>)
 8003d9a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003d9e:	f7fc fc2b 	bl	80005f8 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	ec43 2b17 	vmov	d7, r2, r3
 8003daa:	eeb0 0a47 	vmov.f32	s0, s14
 8003dae:	eef0 0a67 	vmov.f32	s1, s15
 8003db2:	f004 fef1 	bl	8008b98 <exp>
 8003db6:	ec51 0b10 	vmov	r0, r1, d0
 8003dba:	a30f      	add	r3, pc, #60	; (adr r3, 8003df8 <STMpil_step+0x720>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f7fc fc1a 	bl	80005f8 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8003dcc:	e028      	b.n	8003e20 <STMpil_step+0x748>

   case 3:
    rtb_Integrator = STMpil_DW.DiscreteTimeIntegrator_DSTATE;
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <STMpil_step+0x734>)
 8003dd0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003dd4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8003dd8:	e022      	b.n	8003e20 <STMpil_step+0x748>
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w
 8003de0:	2edbb574 	.word	0x2edbb574
 8003de4:	3fcbd734 	.word	0x3fcbd734
 8003de8:	9d495168 	.word	0x9d495168
 8003dec:	40016680 	.word	0x40016680
 8003df0:	4912dc46 	.word	0x4912dc46
 8003df4:	3f9e628e 	.word	0x3f9e628e
 8003df8:	506d7a3a 	.word	0x506d7a3a
 8003dfc:	3fcafe8c 	.word	0x3fcafe8c
 8003e00:	20000010 	.word	0x20000010
 8003e04:	200006e0 	.word	0x200006e0
 8003e08:	3ff00000 	.word	0x3ff00000
 8003e0c:	200005f8 	.word	0x200005f8
 8003e10:	c02e0000 	.word	0xc02e0000

   default:
    rtb_Integrator = STMpil_DW.DiscreteTimeIntegrator_DSTATE;
 8003e14:	4ba2      	ldr	r3, [pc, #648]	; (80040a0 <STMpil_step+0x9c8>)
 8003e16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e1a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8003e1e:	bf00      	nop

  /* Fcn: '<S113>/E_NL' incorporates:
   *  Fcn: '<S113>/E_dyn Discharge'
   *  Memory: '<S113>/it init1'
   */
  rtb_Add3_ocsa = STMpil_DW.itinit1_PreviousInput - rtb_Gain;
 8003e20:	4b9f      	ldr	r3, [pc, #636]	; (80040a0 <STMpil_step+0x9c8>)
 8003e22:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003e26:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8003e2a:	f7fc fa2d 	bl	8000288 <__aeabi_dsub>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
   *  Fcn: '<S113>/E_dyn Discharge'
   *  Fcn: '<S113>/Fcn5'
   *  Memory: '<S113>/it init1'
   *  Sum: '<S113>/Add2'
   */
  rtb_Integrator = STMpil_P.Constant_Value_j1kh + (((((((-0.029672835550368391 *
 8003e36:	4b9b      	ldr	r3, [pc, #620]	; (80040a4 <STMpil_step+0x9cc>)
 8003e38:	e9d3 4558 	ldrd	r4, r5, [r3, #352]	; 0x160
    STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa) * rtb_Gain) +
 8003e3c:	4b98      	ldr	r3, [pc, #608]	; (80040a0 <STMpil_step+0x9c8>)
 8003e3e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
  rtb_Integrator = STMpil_P.Constant_Value_j1kh + (((((((-0.029672835550368391 *
 8003e42:	a393      	add	r3, pc, #588	; (adr r3, 8004090 <STMpil_step+0x9b8>)
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f7fc fbd6 	bl	80005f8 <__aeabi_dmul>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
    STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa) * rtb_Gain) +
 8003e54:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003e58:	f7fc fcf8 	bl	800084c <__aeabi_ddiv>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8003e68:	f7fc fbc6 	bl	80005f8 <__aeabi_dmul>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4690      	mov	r8, r2
 8003e72:	4699      	mov	r9, r3
    (((((-((real_T)rtb_DataTypeConversion2)) * 0.029672835550368391) * numAccum)
 8003e74:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003e78:	f7fc fb54 	bl	8000524 <__aeabi_i2d>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	60ba      	str	r2, [r7, #8]
 8003e82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	a383      	add	r3, pc, #524	; (adr r3, 8004098 <STMpil_step+0x9c0>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e92:	f7fc fbb1 	bl	80005f8 <__aeabi_dmul>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8003ea2:	f7fc fba9 	bl	80005f8 <__aeabi_dmul>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
      * STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa)) + STMpil_Y.SOC) +
 8003eae:	4b7c      	ldr	r3, [pc, #496]	; (80040a0 <STMpil_step+0x9c8>)
 8003eb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003eb4:	f7fc fba0 	bl	80005f8 <__aeabi_dmul>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003ec4:	f7fc fcc2 	bl	800084c <__aeabi_ddiv>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
    STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa) * rtb_Gain) +
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4649      	mov	r1, r9
 8003ed0:	f7fc f9dc 	bl	800028c <__adddf3>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
      * STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa)) + STMpil_Y.SOC) +
 8003edc:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <STMpil_step+0x9d0>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f7fc f9d3 	bl	800028c <__adddf3>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003ef2:	f7fc f9cb 	bl	800028c <__adddf3>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4690      	mov	r8, r2
 8003efc:	4699      	mov	r9, r3
    rtb_Integrator) + (-0.0 * rtb_Gain));
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f06:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8003f0a:	f7fc fb75 	bl	80005f8 <__aeabi_dmul>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4640      	mov	r0, r8
 8003f14:	4649      	mov	r1, r9
 8003f16:	f7fc f9b9 	bl	800028c <__adddf3>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
  rtb_Integrator = STMpil_P.Constant_Value_j1kh + (((((((-0.029672835550368391 *
 8003f1e:	4620      	mov	r0, r4
 8003f20:	4629      	mov	r1, r5
 8003f22:	f7fc f9b3 	bl	800028c <__adddf3>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
   *  Memory: '<S113>/Memory2'
   *  RelationalOperator: '<S119>/LowerRelop1'
   *  RelationalOperator: '<S119>/UpperRelop'
   *  Switch: '<S119>/Switch'
   */
  if (rtb_Integrator > STMpil_P.Constant1_Value_hyh3) {
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <STMpil_step+0x9cc>)
 8003f30:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8003f34:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003f38:	f7fc fdee 	bl	8000b18 <__aeabi_dcmpgt>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d006      	beq.n	8003f50 <STMpil_step+0x878>
    STMpil_B.Switch2 = STMpil_P.Constant1_Value_hyh3;
 8003f42:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <STMpil_step+0x9cc>)
 8003f44:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8003f48:	4958      	ldr	r1, [pc, #352]	; (80040ac <STMpil_step+0x9d4>)
 8003f4a:	e9c1 2300 	strd	r2, r3, [r1]
 8003f4e:	e015      	b.n	8003f7c <STMpil_step+0x8a4>
  } else if (rtb_Integrator < STMpil_DW.Memory2_PreviousInput) {
 8003f50:	4b53      	ldr	r3, [pc, #332]	; (80040a0 <STMpil_step+0x9c8>)
 8003f52:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003f56:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003f5a:	f7fc fdbf 	bl	8000adc <__aeabi_dcmplt>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d006      	beq.n	8003f72 <STMpil_step+0x89a>
    /* Switch: '<S119>/Switch' incorporates:
     *  Memory: '<S113>/Memory2'
     */
    STMpil_B.Switch2 = STMpil_DW.Memory2_PreviousInput;
 8003f64:	4b4e      	ldr	r3, [pc, #312]	; (80040a0 <STMpil_step+0x9c8>)
 8003f66:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003f6a:	4950      	ldr	r1, [pc, #320]	; (80040ac <STMpil_step+0x9d4>)
 8003f6c:	e9c1 2300 	strd	r2, r3, [r1]
 8003f70:	e004      	b.n	8003f7c <STMpil_step+0x8a4>
  } else {
    STMpil_B.Switch2 = rtb_Integrator;
 8003f72:	494e      	ldr	r1, [pc, #312]	; (80040ac <STMpil_step+0x9d4>)
 8003f74:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003f78:	e9c1 2300 	strd	r2, r3, [r1]
  /* S-Function block: <S127>/State-Space */
  {
    real_T accum;

    /* Circuit has switches */
    int_T *switch_status = (int_T*) STMpil_DW.StateSpace_PWORK.SWITCH_STATUS;
 8003f7c:	4b48      	ldr	r3, [pc, #288]	; (80040a0 <STMpil_step+0x9c8>)
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int_T *switch_status_init = (int_T*)
 8003f84:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <STMpil_step+0x9c8>)
 8003f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      STMpil_DW.StateSpace_PWORK.SWITCH_STATUS_INIT;
    int_T *SwitchChange = (int_T*) STMpil_DW.StateSpace_PWORK.SW_CHG;
 8003f8c:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <STMpil_step+0x9c8>)
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int_T *gState = (int_T*) STMpil_DW.StateSpace_PWORK.G_STATE;
 8003f94:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <STMpil_step+0x9c8>)
 8003f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    real_T *yswitch = (real_T*)STMpil_DW.StateSpace_PWORK.Y_SWITCH;
 8003f9e:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <STMpil_step+0x9c8>)
 8003fa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int_T *switchTypes = (int_T*) STMpil_DW.StateSpace_PWORK.SWITCH_TYPES;
 8003fa8:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <STMpil_step+0x9c8>)
 8003faa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    int_T *idxOutSw = (int_T*) STMpil_DW.StateSpace_PWORK.IDX_OUT_SW;
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <STMpil_step+0x9c8>)
 8003fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    real_T *DxCol = (real_T*)STMpil_DW.StateSpace_PWORK.DX_COL;
 8003fbc:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <STMpil_step+0x9c8>)
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    real_T *tmp2 = (real_T*)STMpil_DW.StateSpace_PWORK.TMP2;
 8003fc4:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <STMpil_step+0x9c8>)
 8003fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    real_T *BDcol = (real_T*)STMpil_DW.StateSpace_PWORK.BD_COL;
 8003fcc:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <STMpil_step+0x9c8>)
 8003fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    real_T *tmp1 = (real_T*)STMpil_DW.StateSpace_PWORK.TMP1;
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <STMpil_step+0x9c8>)
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    real_T *uswlast = (real_T*)STMpil_DW.StateSpace_PWORK.USWLAST;
 8003fdc:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <STMpil_step+0x9c8>)
 8003fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int_T newState;
    int_T swChanged = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    int loopsToDo = 20;
 8003fec:	2314      	movs	r3, #20
 8003fee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    real_T temp;

    /* keep an initial copy of switch_status*/
    memcpy(switch_status_init, switch_status, 2 * sizeof(int_T));
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003ff8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003ffc:	f002 f8ae 	bl	800615c <memcpy>
    memcpy(uswlast, &STMpil_B.StateSpace_o1[0], 2*sizeof(real_T));
 8004000:	2210      	movs	r2, #16
 8004002:	492b      	ldr	r1, [pc, #172]	; (80040b0 <STMpil_step+0x9d8>)
 8004004:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004008:	f002 f8a8 	bl	800615c <memcpy>
    do {
      if (loopsToDo == 1) {            /* Need to reset some variables: */
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	2b01      	cmp	r3, #1
 8004012:	d14f      	bne.n	80040b4 <STMpil_step+0x9dc>
        swChanged = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

        /* return to the original switch status*/
        {
          int_T i1;
          for (i1=0; i1 < 2; i1++) {
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004020:	e031      	b.n	8004086 <STMpil_step+0x9ae>
            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -
 8004022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800402c:	4413      	add	r3, r2
 800402e:	6819      	ldr	r1, [r3, #0]
                          switch_status[i1]) != 0) ? 1 : swChanged;
 8004030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800403a:	4413      	add	r3, r2
 800403c:	681a      	ldr	r2, [r3, #0]
            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -
 800403e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8004048:	4403      	add	r3, r0
 800404a:	1a8a      	subs	r2, r1, r2
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
                          switch_status[i1]) != 0) ? 1 : swChanged;
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <STMpil_step+0x982>
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004058:	e000      	b.n	800405c <STMpil_step+0x984>
 800405a:	2301      	movs	r3, #1
            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -
 800405c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            switch_status[i1] = switch_status_init[i1];
 8004060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800406a:	441a      	add	r2, r3
 800406c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004076:	440b      	add	r3, r1
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	601a      	str	r2, [r3, #0]
          for (i1=0; i1 < 2; i1++) {
 800407c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004080:	3301      	adds	r3, #1
 8004082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408a:	2b01      	cmp	r3, #1
 800408c:	ddc9      	ble.n	8004022 <STMpil_step+0x94a>
 800408e:	e27a      	b.n	8004586 <STMpil_step+0xeae>
 8004090:	4912dc46 	.word	0x4912dc46
 8004094:	bf9e628e 	.word	0xbf9e628e
 8004098:	4912dc46 	.word	0x4912dc46
 800409c:	3f9e628e 	.word	0x3f9e628e
 80040a0:	200005f8 	.word	0x200005f8
 80040a4:	20000010 	.word	0x20000010
 80040a8:	200006e0 	.word	0x200006e0
 80040ac:	200005b8 	.word	0x200005b8
 80040b0:	200005c0 	.word	0x200005c0
      } else {
        /*
         * Compute outputs:
         * ---------------
         */
        real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 80040b4:	4bb4      	ldr	r3, [pc, #720]	; (8004388 <STMpil_step+0xcb0>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 80040bc:	4bb2      	ldr	r3, [pc, #712]	; (8004388 <STMpil_step+0xcb0>)
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        accum = 0.0;
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 80040d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040d4:	f103 0208 	add.w	r2, r3, #8
 80040d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040e0:	4ba9      	ldr	r3, [pc, #676]	; (8004388 <STMpil_step+0xcb0>)
 80040e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80040e6:	f7fc fa87 	bl	80005f8 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80040f2:	f7fc f8cb 	bl	800028c <__adddf3>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 80040fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004102:	f103 0208 	add.w	r2, r3, #8
 8004106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800410a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800410e:	4b9e      	ldr	r3, [pc, #632]	; (8004388 <STMpil_step+0xcb0>)
 8004110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004114:	f7fc fa70 	bl	80005f8 <__aeabi_dmul>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004120:	f7fc f8b4 	bl	800028c <__adddf3>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 800412c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004130:	f103 0208 	add.w	r2, r3, #8
 8004134:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800413c:	4b93      	ldr	r3, [pc, #588]	; (800438c <STMpil_step+0xcb4>)
 800413e:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8004142:	f7fc fa59 	bl	80005f8 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800414e:	f7fc f89d 	bl	800028c <__adddf3>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 800415a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800415e:	f103 0208 	add.w	r2, r3, #8
 8004162:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800416a:	4b88      	ldr	r3, [pc, #544]	; (800438c <STMpil_step+0xcb4>)
 800416c:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8004170:	f7fc fa42 	bl	80005f8 <__aeabi_dmul>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800417c:	f7fc f886 	bl	800028c <__adddf3>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_B.Switch2;
 8004188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800418c:	f103 0208 	add.w	r2, r3, #8
 8004190:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004198:	4b7d      	ldr	r3, [pc, #500]	; (8004390 <STMpil_step+0xcb8>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f7fc fa2b 	bl	80005f8 <__aeabi_dmul>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80041aa:	f7fc f86f 	bl	800028c <__adddf3>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_U.In1;
 80041b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041ba:	f103 0208 	add.w	r2, r3, #8
 80041be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80041c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041c6:	4b73      	ldr	r3, [pc, #460]	; (8004394 <STMpil_step+0xcbc>)
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f7fc fa14 	bl	80005f8 <__aeabi_dmul>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80041d8:	f7fc f858 	bl	800028c <__adddf3>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        STMpil_B.StateSpace_o1[0] = accum;
 80041e4:	496a      	ldr	r1, [pc, #424]	; (8004390 <STMpil_step+0xcb8>)
 80041e6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80041ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        accum = 0.0;
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 80041fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041fe:	f103 0208 	add.w	r2, r3, #8
 8004202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <STMpil_step+0xcb0>)
 800420c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004210:	f7fc f9f2 	bl	80005f8 <__aeabi_dmul>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800421c:	f7fc f836 	bl	800028c <__adddf3>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8004228:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800422c:	f103 0208 	add.w	r2, r3, #8
 8004230:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <STMpil_step+0xcb0>)
 800423a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800423e:	f7fc f9db 	bl	80005f8 <__aeabi_dmul>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800424a:	f7fc f81f 	bl	800028c <__adddf3>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 8004256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800425a:	f103 0208 	add.w	r2, r3, #8
 800425e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004266:	4b49      	ldr	r3, [pc, #292]	; (800438c <STMpil_step+0xcb4>)
 8004268:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800426c:	f7fc f9c4 	bl	80005f8 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004278:	f7fc f808 	bl	800028c <__adddf3>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 8004284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004288:	f103 0208 	add.w	r2, r3, #8
 800428c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004294:	4b3d      	ldr	r3, [pc, #244]	; (800438c <STMpil_step+0xcb4>)
 8004296:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800429a:	f7fc f9ad 	bl	80005f8 <__aeabi_dmul>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80042a6:	f7fb fff1 	bl	800028c <__adddf3>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_B.Switch2;
 80042b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b6:	f103 0208 	add.w	r2, r3, #8
 80042ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80042be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042c2:	4b33      	ldr	r3, [pc, #204]	; (8004390 <STMpil_step+0xcb8>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fc f996 	bl	80005f8 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80042d4:	f7fb ffda 	bl	800028c <__adddf3>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_U.In1;
 80042e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042e4:	f103 0208 	add.w	r2, r3, #8
 80042e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80042ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042f0:	4b28      	ldr	r3, [pc, #160]	; (8004394 <STMpil_step+0xcbc>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fc f97f 	bl	80005f8 <__aeabi_dmul>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004302:	f7fb ffc3 	bl	800028c <__adddf3>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        STMpil_B.StateSpace_o1[1] = accum;
 800430e:	4920      	ldr	r1, [pc, #128]	; (8004390 <STMpil_step+0xcb8>)
 8004310:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004314:	e9c1 2304 	strd	r2, r3, [r1, #16]
        accum = 0.0;
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8004324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004328:	f103 0208 	add.w	r2, r3, #8
 800432c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <STMpil_step+0xcb0>)
 8004336:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800433a:	f7fc f95d 	bl	80005f8 <__aeabi_dmul>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004346:	f7fb ffa1 	bl	800028c <__adddf3>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8004352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004356:	f103 0208 	add.w	r2, r3, #8
 800435a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800435e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <STMpil_step+0xcb0>)
 8004364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004368:	f7fc f946 	bl	80005f8 <__aeabi_dmul>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004374:	f7fb ff8a 	bl	800028c <__adddf3>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 8004380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004384:	e008      	b.n	8004398 <STMpil_step+0xcc0>
 8004386:	bf00      	nop
 8004388:	200005f8 	.word	0x200005f8
 800438c:	20000010 	.word	0x20000010
 8004390:	200005b8 	.word	0x200005b8
 8004394:	200006d8 	.word	0x200006d8
 8004398:	f103 0208 	add.w	r2, r3, #8
 800439c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80043a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043a4:	4b83      	ldr	r3, [pc, #524]	; (80045b4 <STMpil_step+0xedc>)
 80043a6:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80043aa:	f7fc f925 	bl	80005f8 <__aeabi_dmul>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80043b6:	f7fb ff69 	bl	800028c <__adddf3>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 80043c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c6:	f103 0208 	add.w	r2, r3, #8
 80043ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80043ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043d2:	4b78      	ldr	r3, [pc, #480]	; (80045b4 <STMpil_step+0xedc>)
 80043d4:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80043d8:	f7fc f90e 	bl	80005f8 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80043e4:	f7fb ff52 	bl	800028c <__adddf3>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_B.Switch2;
 80043f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043f4:	f103 0208 	add.w	r2, r3, #8
 80043f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80043fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004400:	4b6d      	ldr	r3, [pc, #436]	; (80045b8 <STMpil_step+0xee0>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fc f8f7 	bl	80005f8 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004412:	f7fb ff3b 	bl	800028c <__adddf3>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_U.In1;
 800441e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004422:	f103 0208 	add.w	r2, r3, #8
 8004426:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800442a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800442e:	4b63      	ldr	r3, [pc, #396]	; (80045bc <STMpil_step+0xee4>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f7fc f8e0 	bl	80005f8 <__aeabi_dmul>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004440:	f7fb ff24 	bl	800028c <__adddf3>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        STMpil_B.StateSpace_o1[2] = accum;
 800444c:	495a      	ldr	r1, [pc, #360]	; (80045b8 <STMpil_step+0xee0>)
 800444e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004452:	e9c1 2306 	strd	r2, r3, [r1, #24]
        swChanged = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

        /* Ideal switch */
        newState = gState[0] > 0 ? 1 : 0;
 800445c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfcc      	ite	gt
 8004466:	2301      	movgt	r3, #1
 8004468:	2300      	movle	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        swChanged = ((SwitchChange[0] = newState - switch_status[0]) != 0) ? 1 :
 8004470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <STMpil_step+0xdba>
 800448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004490:	e000      	b.n	8004494 <STMpil_step+0xdbc>
 8004492:	2301      	movs	r3, #1
 8004494:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          swChanged;
        switch_status[0] = newState;   /* Keep new state */
 8004498:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800449c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80044a0:	601a      	str	r2, [r3, #0]

        /* MOSFETs or IGBT/Diode pairs */
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 80044a2:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <STMpil_step+0xee0>)
 80044a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80044a8:	2301      	movs	r3, #1
 80044aa:	461c      	mov	r4, r3
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	f7fc fb30 	bl	8000b18 <__aeabi_dcmpgt>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <STMpil_step+0xdea>
 80044be:	2300      	movs	r3, #0
 80044c0:	461c      	mov	r4, r3
 80044c2:	b2e3      	uxtb	r3, r4
 80044c4:	f083 0301 	eor.w	r3, r3, #1
 80044c8:	b2db      	uxtb	r3, r3
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <STMpil_step+0xe02>
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 80044ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044d2:	3304      	adds	r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	dc38      	bgt.n	800454c <STMpil_step+0xe74>
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <STMpil_step+0xee0>)
 80044dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80044e0:	2301      	movs	r3, #1
 80044e2:	461c      	mov	r4, r3
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	f7fc faf6 	bl	8000adc <__aeabi_dcmplt>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <STMpil_step+0xe22>
 80044f6:	2300      	movs	r3, #0
 80044f8:	461c      	mov	r4, r3
 80044fa:	b2e3      	uxtb	r3, r4
 80044fc:	f083 0301 	eor.w	r3, r3, #1
 8004500:	b2db      	uxtb	r3, r3
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 8004502:	2b00      	cmp	r3, #0
 8004504:	d022      	beq.n	800454c <STMpil_step+0xe74>
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 8004506:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <STMpil_step+0xee0>)
 8004508:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800450c:	2301      	movs	r3, #1
 800450e:	461c      	mov	r4, r3
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	f7fc fafe 	bl	8000b18 <__aeabi_dcmpgt>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <STMpil_step+0xe4e>
 8004522:	2300      	movs	r3, #0
 8004524:	461c      	mov	r4, r3
 8004526:	b2e3      	uxtb	r3, r4
 8004528:	f083 0301 	eor.w	r3, r3, #1
 800452c:	b2db      	uxtb	r3, r3
          0.0) && gState[1] == 0) ? 0 : switch_status[1]);
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <STMpil_step+0xe66>
 8004532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004536:	3304      	adds	r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <STMpil_step+0xe70>
 800453e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004542:	3304      	adds	r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 8004546:	e002      	b.n	800454e <STMpil_step+0xe76>
          0.0) && gState[1] == 0) ? 0 : switch_status[1]);
 8004548:	2300      	movs	r3, #0
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 800454a:	e000      	b.n	800454e <STMpil_step+0xe76>
 800454c:	2301      	movs	r3, #1
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 800454e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        swChanged = ((SwitchChange[1] = newState - switch_status[1]) != 0) ? 1 :
 8004552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004556:	3304      	adds	r3, #4
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800455e:	3304      	adds	r3, #4
 8004560:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004564:	1a8a      	subs	r2, r1, r2
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <STMpil_step+0xe9c>
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	e000      	b.n	8004576 <STMpil_step+0xe9e>
 8004574:	2301      	movs	r3, #1
 8004576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          swChanged;
        switch_status[1] = newState;   /* Keep new state */
 800457a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800457e:	3304      	adds	r3, #4
 8004580:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004584:	601a      	str	r2, [r3, #0]

      /*
       * Compute new As, Bs, Cs and Ds matrixes:
       * --------------------------------------
       */
      if (swChanged) {
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 84ba 	beq.w	8004f04 <STMpil_step+0x182c>
        real_T *As = (real_T*)STMpil_DW.StateSpace_PWORK.AS;
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <STMpil_step+0xee8>)
 8004592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <STMpil_step+0xee8>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	67fb      	str	r3, [r7, #124]	; 0x7c
        real_T *Bs = (real_T*)STMpil_DW.StateSpace_PWORK.BS;
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <STMpil_step+0xee8>)
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	67bb      	str	r3, [r7, #120]	; 0x78
        real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <STMpil_step+0xee8>)
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	677b      	str	r3, [r7, #116]	; 0x74
        real_T a1;

        {
          int_T i1;
          for (i1=0; i1 < 2; i1++) {
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045b0:	f000 bca3 	b.w	8004efa <STMpil_step+0x1822>
 80045b4:	20000010 	.word	0x20000010
 80045b8:	200005b8 	.word	0x200005b8
 80045bc:	200006d8 	.word	0x200006d8
 80045c0:	200005f8 	.word	0x200005f8
            if (SwitchChange[i1] != 0) {
 80045c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045ce:	4413      	add	r3, r2
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 848c 	beq.w	8004ef0 <STMpil_step+0x1818>
              a1 = 1000.0*SwitchChange[i1];
 80045d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045e2:	4413      	add	r3, r2
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fb ff9c 	bl	8000524 <__aeabi_i2d>
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	4bbe      	ldr	r3, [pc, #760]	; (80048ec <STMpil_step+0x1214>)
 80045f2:	f7fc f801 	bl	80005f8 <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              temp = 1/(1-Ds[i1*5]*a1);
 80045fe:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	461a      	mov	r2, r3
 800460c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460e:	4413      	add	r3, r2
 8004610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004614:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004618:	f7fb ffee 	bl	80005f8 <__aeabi_dmul>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	f04f 0000 	mov.w	r0, #0
 8004624:	49b2      	ldr	r1, [pc, #712]	; (80048f0 <STMpil_step+0x1218>)
 8004626:	f7fb fe2f 	bl	8000288 <__aeabi_dsub>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	f04f 0000 	mov.w	r0, #0
 8004632:	49af      	ldr	r1, [pc, #700]	; (80048f0 <STMpil_step+0x1218>)
 8004634:	f7fc f90a 	bl	800084c <__aeabi_ddiv>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
              DxCol[0]= Ds[0 + i1]*temp*a1;
 8004640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004648:	4413      	add	r3, r2
 800464a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800464e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004652:	f7fb ffd1 	bl	80005f8 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004662:	f7fb ffc9 	bl	80005f8 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800466e:	e9c1 2300 	strd	r2, r3, [r1]
              DxCol[1]= Ds[4 + i1]*temp*a1;
 8004672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004676:	3304      	adds	r3, #4
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800467c:	4413      	add	r3, r2
 800467e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004682:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004686:	f7fb ffb7 	bl	80005f8 <__aeabi_dmul>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4610      	mov	r0, r2
 8004690:	4619      	mov	r1, r3
 8004692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004696:	f103 0408 	add.w	r4, r3, #8
 800469a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800469e:	f7fb ffab 	bl	80005f8 <__aeabi_dmul>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	e9c4 2300 	strd	r2, r3, [r4]
              DxCol[2]= Ds[8 + i1]*temp*a1;
 80046aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ae:	3308      	adds	r3, #8
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046b4:	4413      	add	r3, r2
 80046b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80046be:	f7fb ff9b 	bl	80005f8 <__aeabi_dmul>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ce:	f103 0410 	add.w	r4, r3, #16
 80046d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80046d6:	f7fb ff8f 	bl	80005f8 <__aeabi_dmul>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	e9c4 2300 	strd	r2, r3, [r4]
              DxCol[i1] = temp;
 80046e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ec:	18d1      	adds	r1, r2, r3
 80046ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80046f2:	e9c1 2300 	strd	r2, r3, [r1]
              BDcol[0]= Bs[0 + i1]*a1;
 80046f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046fe:	4413      	add	r3, r2
 8004700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004704:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004708:	f7fb ff76 	bl	80005f8 <__aeabi_dmul>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004714:	e9c1 2300 	strd	r2, r3, [r1]
              BDcol[1]= Bs[4 + i1]*a1;
 8004718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800471c:	3304      	adds	r3, #4
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004722:	4413      	add	r3, r2
 8004724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004728:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800472c:	f103 0408 	add.w	r4, r3, #8
 8004730:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004734:	f7fb ff60 	bl	80005f8 <__aeabi_dmul>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	e9c4 2300 	strd	r2, r3, [r4]

              /* Copy row nSw of Cs into tmp1 and zero it out in Cs */
              memcpy(tmp1, &Cs[i1 * 2], 2 * sizeof(real_T));
 8004740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004748:	4413      	add	r3, r2
 800474a:	2210      	movs	r2, #16
 800474c:	4619      	mov	r1, r3
 800474e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004752:	f001 fd03 	bl	800615c <memcpy>
              memset(&Cs[i1 * 2], '\0', 2 * sizeof(real_T));
 8004756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800475e:	4413      	add	r3, r2
 8004760:	2210      	movs	r2, #16
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f001 fd07 	bl	8006178 <memset>

              /* Copy row nSw of Ds into tmp2 and zero it out in Ds */
              memcpy(tmp2, &Ds[i1 * 4], 4 * sizeof(real_T));
 800476a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800476e:	015b      	lsls	r3, r3, #5
 8004770:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004772:	4413      	add	r3, r2
 8004774:	2220      	movs	r2, #32
 8004776:	4619      	mov	r1, r3
 8004778:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800477c:	f001 fcee 	bl	800615c <memcpy>
              memset(&Ds[i1 * 4], '\0', 4 * sizeof(real_T));
 8004780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004784:	015b      	lsls	r3, r3, #5
 8004786:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004788:	4413      	add	r3, r2
 800478a:	2220      	movs	r2, #32
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fcf2 	bl	8006178 <memset>

              /* Cs = Cs + DxCol * tmp1, Ds = Ds + DxCol * tmp2 *******************/
              a1 = DxCol[0];
 8004794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              Cs[0 + 0] += a1 * tmp1[0];
 80047a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80047b2:	f7fb ff21 	bl	80005f8 <__aeabi_dmul>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4620      	mov	r0, r4
 80047bc:	4629      	mov	r1, r5
 80047be:	f7fb fd65 	bl	800028c <__adddf3>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047c8:	e9c1 2300 	strd	r2, r3, [r1]
              Cs[0 + 1] += a1 * tmp1[1];
 80047cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047ce:	3308      	adds	r3, #8
 80047d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d8:	3308      	adds	r3, #8
 80047da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80047e2:	f7fb ff09 	bl	80005f8 <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047f0:	f103 0608 	add.w	r6, r3, #8
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4620      	mov	r0, r4
 80047fa:	4629      	mov	r1, r5
 80047fc:	f7fb fd46 	bl	800028c <__adddf3>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[0 + 0] += a1 * tmp2[0];
 8004808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800480e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004816:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800481a:	f7fb feed 	bl	80005f8 <__aeabi_dmul>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4620      	mov	r0, r4
 8004824:	4629      	mov	r1, r5
 8004826:	f7fb fd31 	bl	800028c <__adddf3>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004830:	e9c1 2300 	strd	r2, r3, [r1]
              Ds[0 + 1] += a1 * tmp2[1];
 8004834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004836:	3308      	adds	r3, #8
 8004838:	e9d3 4500 	ldrd	r4, r5, [r3]
 800483c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004840:	3308      	adds	r3, #8
 8004842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004846:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800484a:	f7fb fed5 	bl	80005f8 <__aeabi_dmul>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004858:	f103 0608 	add.w	r6, r3, #8
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4620      	mov	r0, r4
 8004862:	4629      	mov	r1, r5
 8004864:	f7fb fd12 	bl	800028c <__adddf3>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[0 + 2] += a1 * tmp2[2];
 8004870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004872:	3310      	adds	r3, #16
 8004874:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004878:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800487c:	3310      	adds	r3, #16
 800487e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004882:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004886:	f7fb feb7 	bl	80005f8 <__aeabi_dmul>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004894:	f103 0610 	add.w	r6, r3, #16
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb fcf4 	bl	800028c <__adddf3>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[0 + 3] += a1 * tmp2[3];
 80048ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ae:	3318      	adds	r3, #24
 80048b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80048b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048b8:	3318      	adds	r3, #24
 80048ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80048c2:	f7fb fe99 	bl	80005f8 <__aeabi_dmul>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d0:	f103 0618 	add.w	r6, r3, #24
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fb fcd6 	bl	800028c <__adddf3>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	e9c6 2300 	strd	r2, r3, [r6]
 80048e8:	e004      	b.n	80048f4 <STMpil_step+0x121c>
 80048ea:	bf00      	nop
 80048ec:	408f4000 	.word	0x408f4000
 80048f0:	3ff00000 	.word	0x3ff00000
              a1 = DxCol[1];
 80048f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80048fc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              Cs[2 + 0] += a1 * tmp1[0];
 8004900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004902:	3310      	adds	r3, #16
 8004904:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004910:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004914:	f7fb fe70 	bl	80005f8 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004922:	f103 0610 	add.w	r6, r3, #16
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4620      	mov	r0, r4
 800492c:	4629      	mov	r1, r5
 800492e:	f7fb fcad 	bl	800028c <__adddf3>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	e9c6 2300 	strd	r2, r3, [r6]
              Cs[2 + 1] += a1 * tmp1[1];
 800493a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800493c:	3318      	adds	r3, #24
 800493e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004946:	3308      	adds	r3, #8
 8004948:	e9d3 0100 	ldrd	r0, r1, [r3]
 800494c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004950:	f7fb fe52 	bl	80005f8 <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800495e:	f103 0618 	add.w	r6, r3, #24
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4620      	mov	r0, r4
 8004968:	4629      	mov	r1, r5
 800496a:	f7fb fc8f 	bl	800028c <__adddf3>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 0] += a1 * tmp2[0];
 8004976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004978:	3320      	adds	r3, #32
 800497a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800497e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004986:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800498a:	f7fb fe35 	bl	80005f8 <__aeabi_dmul>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004998:	f103 0620 	add.w	r6, r3, #32
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fb fc72 	bl	800028c <__adddf3>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 1] += a1 * tmp2[1];
 80049b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b2:	3328      	adds	r3, #40	; 0x28
 80049b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80049b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049bc:	3308      	adds	r3, #8
 80049be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80049c6:	f7fb fe17 	bl	80005f8 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4610      	mov	r0, r2
 80049d0:	4619      	mov	r1, r3
 80049d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d4:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4620      	mov	r0, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	f7fb fc54 	bl	800028c <__adddf3>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 2] += a1 * tmp2[2];
 80049ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ee:	3330      	adds	r3, #48	; 0x30
 80049f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80049f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049f8:	3310      	adds	r3, #16
 80049fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004a02:	f7fb fdf9 	bl	80005f8 <__aeabi_dmul>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a10:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f7fb fc36 	bl	800028c <__adddf3>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 3] += a1 * tmp2[3];
 8004a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2a:	3338      	adds	r3, #56	; 0x38
 8004a2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004a30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a34:	3318      	adds	r3, #24
 8004a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004a3e:	f7fb fddb 	bl	80005f8 <__aeabi_dmul>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4c:	f103 0638 	add.w	r6, r3, #56	; 0x38
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4620      	mov	r0, r4
 8004a56:	4629      	mov	r1, r5
 8004a58:	f7fb fc18 	bl	800028c <__adddf3>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	e9c6 2300 	strd	r2, r3, [r6]
              a1 = DxCol[2];
 8004a64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a6c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              Cs[4 + 0] += a1 * tmp1[0];
 8004a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a72:	3320      	adds	r3, #32
 8004a74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004a84:	f7fb fdb8 	bl	80005f8 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a92:	f103 0620 	add.w	r6, r3, #32
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	f7fb fbf5 	bl	800028c <__adddf3>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	e9c6 2300 	strd	r2, r3, [r6]
              Cs[4 + 1] += a1 * tmp1[1];
 8004aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aac:	3328      	adds	r3, #40	; 0x28
 8004aae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004abc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ac0:	f7fb fd9a 	bl	80005f8 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ace:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fb fbd7 	bl	800028c <__adddf3>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 0] += a1 * tmp2[0];
 8004ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae8:	3340      	adds	r3, #64	; 0x40
 8004aea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004af6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004afa:	f7fb fd7d 	bl	80005f8 <__aeabi_dmul>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b08:	f103 0640 	add.w	r6, r3, #64	; 0x40
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4620      	mov	r0, r4
 8004b12:	4629      	mov	r1, r5
 8004b14:	f7fb fbba 	bl	800028c <__adddf3>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 1] += a1 * tmp2[1];
 8004b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b22:	3348      	adds	r3, #72	; 0x48
 8004b24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b32:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004b36:	f7fb fd5f 	bl	80005f8 <__aeabi_dmul>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b44:	f103 0648 	add.w	r6, r3, #72	; 0x48
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7fb fb9c 	bl	800028c <__adddf3>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 2] += a1 * tmp2[2];
 8004b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5e:	3350      	adds	r3, #80	; 0x50
 8004b60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b68:	3310      	adds	r3, #16
 8004b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004b72:	f7fb fd41 	bl	80005f8 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b80:	f103 0650 	add.w	r6, r3, #80	; 0x50
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7fb fb7e 	bl	800028c <__adddf3>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 3] += a1 * tmp2[3];
 8004b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9a:	3358      	adds	r3, #88	; 0x58
 8004b9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004baa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004bae:	f7fb fd23 	bl	80005f8 <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbc:	f103 0658 	add.w	r6, r3, #88	; 0x58
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f7fb fb60 	bl	800028c <__adddf3>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	e9c6 2300 	strd	r2, r3, [r6]

              /* As = As + BdCol*Cs(nSw,:), Bs = Bs + BdCol*Ds(nSw,:) *************/
              a1 = BDcol[0];
 8004bd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              As[0 + 0] += a1 * Cs[i1 * 2 + 0];
 8004be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004be4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004bf0:	4413      	add	r3, r2
 8004bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bf6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004bfa:	f7fb fcfd 	bl	80005f8 <__aeabi_dmul>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4620      	mov	r0, r4
 8004c04:	4629      	mov	r1, r5
 8004c06:	f7fb fb41 	bl	800028c <__adddf3>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004c12:	e9c1 2300 	strd	r2, r3, [r1]
              As[0 + 1] += a1 * Cs[i1 * 2 + 1];
 8004c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	3308      	adds	r3, #8
 8004c28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c2a:	4413      	add	r3, r2
 8004c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c34:	f7fb fce0 	bl	80005f8 <__aeabi_dmul>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c44:	f103 0608 	add.w	r6, r3, #8
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f7fb fb1c 	bl	800028c <__adddf3>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[0 + 0] += a1 * Ds[i1 * 4 + 0];
 8004c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c66:	015b      	lsls	r3, r3, #5
 8004c68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c6a:	4413      	add	r3, r2
 8004c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c70:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c74:	f7fb fcc0 	bl	80005f8 <__aeabi_dmul>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb fb04 	bl	800028c <__adddf3>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004c8a:	e9c1 2300 	strd	r2, r3, [r1]
              Bs[0 + 1] += a1 * Ds[i1 * 4 + 1];
 8004c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c90:	3308      	adds	r3, #8
 8004c92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c9a:	015b      	lsls	r3, r3, #5
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ca0:	4413      	add	r3, r2
 8004ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ca6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004caa:	f7fb fca5 	bl	80005f8 <__aeabi_dmul>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb8:	f103 0608 	add.w	r6, r3, #8
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f7fb fae2 	bl	800028c <__adddf3>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[0 + 2] += a1 * Ds[i1 * 4 + 2];
 8004cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd2:	3310      	adds	r3, #16
 8004cd4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cdc:	015b      	lsls	r3, r3, #5
 8004cde:	3310      	adds	r3, #16
 8004ce0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ce2:	4413      	add	r3, r2
 8004ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ce8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004cec:	f7fb fc84 	bl	80005f8 <__aeabi_dmul>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cfa:	f103 0610 	add.w	r6, r3, #16
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4620      	mov	r0, r4
 8004d04:	4629      	mov	r1, r5
 8004d06:	f7fb fac1 	bl	800028c <__adddf3>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[0 + 3] += a1 * Ds[i1 * 4 + 3];
 8004d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d14:	3318      	adds	r3, #24
 8004d16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d1e:	015b      	lsls	r3, r3, #5
 8004d20:	3318      	adds	r3, #24
 8004d22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d24:	4413      	add	r3, r2
 8004d26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004d2e:	f7fb fc63 	bl	80005f8 <__aeabi_dmul>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d3c:	f103 0618 	add.w	r6, r3, #24
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4620      	mov	r0, r4
 8004d46:	4629      	mov	r1, r5
 8004d48:	f7fb faa0 	bl	800028c <__adddf3>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	e9c6 2300 	strd	r2, r3, [r6]
              a1 = BDcol[1];
 8004d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d5c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              As[2 + 0] += a1 * Cs[i1 * 2 + 0];
 8004d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d64:	3310      	adds	r3, #16
 8004d66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d72:	4413      	add	r3, r2
 8004d74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004d7c:	f7fb fc3c 	bl	80005f8 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d8c:	f103 0610 	add.w	r6, r3, #16
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	f7fb fa78 	bl	800028c <__adddf3>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	e9c6 2300 	strd	r2, r3, [r6]
              As[2 + 1] += a1 * Cs[i1 * 2 + 1];
 8004da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004da8:	3318      	adds	r3, #24
 8004daa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	3308      	adds	r3, #8
 8004db6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004db8:	4413      	add	r3, r2
 8004dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dbe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004dc2:	f7fb fc19 	bl	80005f8 <__aeabi_dmul>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dd2:	f103 0618 	add.w	r6, r3, #24
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4620      	mov	r0, r4
 8004ddc:	4629      	mov	r1, r5
 8004dde:	f7fb fa55 	bl	800028c <__adddf3>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 0] += a1 * Ds[i1 * 4 + 0];
 8004dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dec:	3320      	adds	r3, #32
 8004dee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df6:	015b      	lsls	r3, r3, #5
 8004df8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004dfa:	4413      	add	r3, r2
 8004dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004e04:	f7fb fbf8 	bl	80005f8 <__aeabi_dmul>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e12:	f103 0620 	add.w	r6, r3, #32
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f7fb fa35 	bl	800028c <__adddf3>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 1] += a1 * Ds[i1 * 4 + 1];
 8004e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2c:	3328      	adds	r3, #40	; 0x28
 8004e2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e36:	015b      	lsls	r3, r3, #5
 8004e38:	3308      	adds	r3, #8
 8004e3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e3c:	4413      	add	r3, r2
 8004e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004e46:	f7fb fbd7 	bl	80005f8 <__aeabi_dmul>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e54:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	4629      	mov	r1, r5
 8004e60:	f7fb fa14 	bl	800028c <__adddf3>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 2] += a1 * Ds[i1 * 4 + 2];
 8004e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6e:	3330      	adds	r3, #48	; 0x30
 8004e70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e78:	015b      	lsls	r3, r3, #5
 8004e7a:	3310      	adds	r3, #16
 8004e7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e7e:	4413      	add	r3, r2
 8004e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e84:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004e88:	f7fb fbb6 	bl	80005f8 <__aeabi_dmul>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e96:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb f9f3 	bl	800028c <__adddf3>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 3] += a1 * Ds[i1 * 4 + 3];
 8004eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb0:	3338      	adds	r3, #56	; 0x38
 8004eb2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eba:	015b      	lsls	r3, r3, #5
 8004ebc:	3318      	adds	r3, #24
 8004ebe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ec0:	4413      	add	r3, r2
 8004ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ec6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004eca:	f7fb fb95 	bl	80005f8 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed8:	f103 0638 	add.w	r6, r3, #56	; 0x38
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	f7fb f9d2 	bl	800028c <__adddf3>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	e9c6 2300 	strd	r2, r3, [r6]
          for (i1=0; i1 < 2; i1++) {
 8004ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	f77f ab60 	ble.w	80045c4 <STMpil_step+0xeec>
            }
          }
        }
      }                                /* if (swChanged) */
    } while (swChanged > 0 && --loopsToDo > 0);
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	dd09      	ble.n	8004f20 <STMpil_step+0x1848>
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f73f a876 	bgt.w	800400c <STMpil_step+0x934>

    if (loopsToDo == 0) {
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 81ab 	bne.w	8005280 <STMpil_step+0x1ba8>
      real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 8004f2a:	4ba5      	ldr	r3, [pc, #660]	; (80051c0 <STMpil_step+0x1ae8>)
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
      real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 8004f30:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <STMpil_step+0x1ae8>)
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	65bb      	str	r3, [r7, #88]	; 0x58
      accum = 0.0;
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8004f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f44:	f103 0208 	add.w	r2, r3, #8
 8004f48:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f4e:	4b9c      	ldr	r3, [pc, #624]	; (80051c0 <STMpil_step+0x1ae8>)
 8004f50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004f54:	f7fb fb50 	bl	80005f8 <__aeabi_dmul>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004f60:	f7fb f994 	bl	800028c <__adddf3>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8004f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f6e:	f103 0208 	add.w	r2, r3, #8
 8004f72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f78:	4b91      	ldr	r3, [pc, #580]	; (80051c0 <STMpil_step+0x1ae8>)
 8004f7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f7e:	f7fb fb3b 	bl	80005f8 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004f8a:	f7fb f97f 	bl	800028c <__adddf3>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 8004f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f98:	f103 0208 	add.w	r2, r3, #8
 8004f9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fa2:	4b88      	ldr	r3, [pc, #544]	; (80051c4 <STMpil_step+0x1aec>)
 8004fa4:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8004fa8:	f7fb fb26 	bl	80005f8 <__aeabi_dmul>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004fb4:	f7fb f96a 	bl	800028c <__adddf3>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 8004fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc2:	f103 0208 	add.w	r2, r3, #8
 8004fc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fcc:	4b7d      	ldr	r3, [pc, #500]	; (80051c4 <STMpil_step+0x1aec>)
 8004fce:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8004fd2:	f7fb fb11 	bl	80005f8 <__aeabi_dmul>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004fde:	f7fb f955 	bl	800028c <__adddf3>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_B.Switch2;
 8004fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fec:	f103 0208 	add.w	r2, r3, #8
 8004ff0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ff6:	4b74      	ldr	r3, [pc, #464]	; (80051c8 <STMpil_step+0x1af0>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f7fb fafc 	bl	80005f8 <__aeabi_dmul>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005008:	f7fb f940 	bl	800028c <__adddf3>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_U.In1;
 8005014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005016:	f103 0208 	add.w	r2, r3, #8
 800501a:	65ba      	str	r2, [r7, #88]	; 0x58
 800501c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005020:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <STMpil_step+0x1af4>)
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb fae7 	bl	80005f8 <__aeabi_dmul>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005032:	f7fb f92b 	bl	800028c <__adddf3>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      STMpil_B.StateSpace_o1[0] = accum;
 800503e:	4962      	ldr	r1, [pc, #392]	; (80051c8 <STMpil_step+0x1af0>)
 8005040:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005044:	e9c1 2302 	strd	r2, r3, [r1, #8]
      accum = 0.0;
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8005054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005056:	f103 0208 	add.w	r2, r3, #8
 800505a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800505c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005060:	4b57      	ldr	r3, [pc, #348]	; (80051c0 <STMpil_step+0x1ae8>)
 8005062:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005066:	f7fb fac7 	bl	80005f8 <__aeabi_dmul>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005072:	f7fb f90b 	bl	800028c <__adddf3>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 800507e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005080:	f103 0208 	add.w	r2, r3, #8
 8005084:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800508a:	4b4d      	ldr	r3, [pc, #308]	; (80051c0 <STMpil_step+0x1ae8>)
 800508c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005090:	f7fb fab2 	bl	80005f8 <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800509c:	f7fb f8f6 	bl	800028c <__adddf3>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 80050a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050aa:	f103 0208 	add.w	r2, r3, #8
 80050ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80050b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050b4:	4b43      	ldr	r3, [pc, #268]	; (80051c4 <STMpil_step+0x1aec>)
 80050b6:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80050ba:	f7fb fa9d 	bl	80005f8 <__aeabi_dmul>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80050c6:	f7fb f8e1 	bl	800028c <__adddf3>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 80050d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d4:	f103 0208 	add.w	r2, r3, #8
 80050d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050de:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <STMpil_step+0x1aec>)
 80050e0:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80050e4:	f7fb fa88 	bl	80005f8 <__aeabi_dmul>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80050f0:	f7fb f8cc 	bl	800028c <__adddf3>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_B.Switch2;
 80050fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050fe:	f103 0208 	add.w	r2, r3, #8
 8005102:	65ba      	str	r2, [r7, #88]	; 0x58
 8005104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005108:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <STMpil_step+0x1af0>)
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f7fb fa73 	bl	80005f8 <__aeabi_dmul>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800511a:	f7fb f8b7 	bl	800028c <__adddf3>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_U.In1;
 8005126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005128:	f103 0208 	add.w	r2, r3, #8
 800512c:	65ba      	str	r2, [r7, #88]	; 0x58
 800512e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005132:	4b26      	ldr	r3, [pc, #152]	; (80051cc <STMpil_step+0x1af4>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	f7fb fa5e 	bl	80005f8 <__aeabi_dmul>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005144:	f7fb f8a2 	bl	800028c <__adddf3>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      STMpil_B.StateSpace_o1[1] = accum;
 8005150:	491d      	ldr	r1, [pc, #116]	; (80051c8 <STMpil_step+0x1af0>)
 8005152:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005156:	e9c1 2304 	strd	r2, r3, [r1, #16]
      accum = 0.0;
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8005166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005168:	f103 0208 	add.w	r2, r3, #8
 800516c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800516e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <STMpil_step+0x1ae8>)
 8005174:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005178:	f7fb fa3e 	bl	80005f8 <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005184:	f7fb f882 	bl	800028c <__adddf3>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8005190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005192:	f103 0208 	add.w	r2, r3, #8
 8005196:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800519c:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <STMpil_step+0x1ae8>)
 800519e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051a2:	f7fb fa29 	bl	80005f8 <__aeabi_dmul>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051ae:	f7fb f86d 	bl	800028c <__adddf3>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 80051ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051bc:	e008      	b.n	80051d0 <STMpil_step+0x1af8>
 80051be:	bf00      	nop
 80051c0:	200005f8 	.word	0x200005f8
 80051c4:	20000010 	.word	0x20000010
 80051c8:	200005b8 	.word	0x200005b8
 80051cc:	200006d8 	.word	0x200006d8
 80051d0:	f103 0208 	add.w	r2, r3, #8
 80051d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80051d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051da:	4b64      	ldr	r3, [pc, #400]	; (800536c <STMpil_step+0x1c94>)
 80051dc:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80051e0:	f7fb fa0a 	bl	80005f8 <__aeabi_dmul>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051ec:	f7fb f84e 	bl	800028c <__adddf3>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 80051f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051fa:	f103 0208 	add.w	r2, r3, #8
 80051fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005204:	4b59      	ldr	r3, [pc, #356]	; (800536c <STMpil_step+0x1c94>)
 8005206:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800520a:	f7fb f9f5 	bl	80005f8 <__aeabi_dmul>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005216:	f7fb f839 	bl	800028c <__adddf3>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_B.Switch2;
 8005222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005224:	f103 0208 	add.w	r2, r3, #8
 8005228:	65ba      	str	r2, [r7, #88]	; 0x58
 800522a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800522e:	4b50      	ldr	r3, [pc, #320]	; (8005370 <STMpil_step+0x1c98>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f7fb f9e0 	bl	80005f8 <__aeabi_dmul>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005240:	f7fb f824 	bl	800028c <__adddf3>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_U.In1;
 800524c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800524e:	f103 0208 	add.w	r2, r3, #8
 8005252:	65ba      	str	r2, [r7, #88]	; 0x58
 8005254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005258:	4b46      	ldr	r3, [pc, #280]	; (8005374 <STMpil_step+0x1c9c>)
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f7fb f9cb 	bl	80005f8 <__aeabi_dmul>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800526a:	f7fb f80f 	bl	800028c <__adddf3>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      STMpil_B.StateSpace_o1[2] = accum;
 8005276:	493e      	ldr	r1, [pc, #248]	; (8005370 <STMpil_step+0x1c98>)
 8005278:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800527c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }

    /* Output new switches states */
    STMpil_B.StateSpace_o2[0] = (real_T)switch_status[0];
 8005280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fb f94c 	bl	8000524 <__aeabi_i2d>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4937      	ldr	r1, [pc, #220]	; (8005370 <STMpil_step+0x1c98>)
 8005292:	e9c1 2308 	strd	r2, r3, [r1, #32]
    STMpil_B.StateSpace_o2[1] = (real_T)switch_status[1];
 8005296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800529a:	3304      	adds	r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fb f940 	bl	8000524 <__aeabi_i2d>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4931      	ldr	r1, [pc, #196]	; (8005370 <STMpil_step+0x1c98>)
 80052aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }

  /* Outport: '<Root>/<Current (A)>' incorporates:
   *  Gain: '<S112>/do not delete this gain'
   */
  STMpil_Y.CurrentA = STMpil_P.donotdeletethisgain_Gain *
 80052ae:	4b2f      	ldr	r3, [pc, #188]	; (800536c <STMpil_step+0x1c94>)
 80052b0:	e9d3 01a2 	ldrd	r0, r1, [r3, #648]	; 0x288
    STMpil_B.StateSpace_o1[2];
 80052b4:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <STMpil_step+0x1c98>)
 80052b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
  STMpil_Y.CurrentA = STMpil_P.donotdeletethisgain_Gain *
 80052ba:	f7fb f99d 	bl	80005f8 <__aeabi_dmul>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	492d      	ldr	r1, [pc, #180]	; (8005378 <STMpil_step+0x1ca0>)
 80052c4:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Sum: '<S113>/Add' incorporates:
   *  Gain: '<S113>/R'
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_Y.VoltageV = STMpil_B.Switch2 - (STMpil_P.R_Gain * STMpil_Y.CurrentA);
 80052c8:	4b29      	ldr	r3, [pc, #164]	; (8005370 <STMpil_step+0x1c98>)
 80052ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80052ce:	4b27      	ldr	r3, [pc, #156]	; (800536c <STMpil_step+0x1c94>)
 80052d0:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	; 0x290
 80052d4:	4b28      	ldr	r3, [pc, #160]	; (8005378 <STMpil_step+0x1ca0>)
 80052d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80052da:	f7fb f98d 	bl	80005f8 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ffcf 	bl	8000288 <__aeabi_dsub>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4922      	ldr	r1, [pc, #136]	; (8005378 <STMpil_step+0x1ca0>)
 80052f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /* MultiPortSwitch: '<S7>/Output' incorporates:
   *  Constant: '<S7>/Vector'
   *  UnitDelay: '<S104>/Output'
   */
  rtb_Integrator =
    STMpil_P.RepeatingSequenceStair_OutValue[STMpil_DW.Output_DSTATE];
 80052f4:	4b21      	ldr	r3, [pc, #132]	; (800537c <STMpil_step+0x1ca4>)
 80052f6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
  rtb_Integrator =
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <STMpil_step+0x1c94>)
 80052fc:	3307      	adds	r3, #7
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

  /* Sum: '<S2>/Add3' incorporates:
   *  Constant: '<S2>/Constant4'
   */
  rtb_Add3_ocsa = STMpil_P.Constant4_Value - STMpil_Y.VoltageV;
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <STMpil_step+0x1c94>)
 800530c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <STMpil_step+0x1ca0>)
 8005312:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005316:	f7fa ffb7 	bl	8000288 <__aeabi_dsub>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

  /* Sum: '<S48>/Sum' incorporates:
   *  DiscreteIntegrator: '<S39>/Integrator'
   *  Gain: '<S44>/Proportional Gain'
   */
  numAccum = (STMpil_P.PIDController3_P * rtb_Add3_ocsa) +
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <STMpil_step+0x1c94>)
 8005324:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005328:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800532c:	f7fb f964 	bl	80005f8 <__aeabi_dmul>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
    STMpil_DW.Integrator_DSTATE_hwv3;
 8005338:	4b10      	ldr	r3, [pc, #64]	; (800537c <STMpil_step+0x1ca4>)
 800533a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
  numAccum = (STMpil_P.PIDController3_P * rtb_Add3_ocsa) +
 800533e:	f7fa ffa5 	bl	800028c <__adddf3>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

  /* Saturate: '<S46>/Saturation' */
  if (numAccum > STMpil_P.PIDController3_UpperSaturationL) {
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <STMpil_step+0x1c94>)
 800534c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005350:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005354:	f7fb fbe0 	bl	8000b18 <__aeabi_dcmpgt>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <STMpil_step+0x1ca8>
    numAccum = STMpil_P.PIDController3_UpperSaturationL;
 800535e:	4b03      	ldr	r3, [pc, #12]	; (800536c <STMpil_step+0x1c94>)
 8005360:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005364:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
 8005368:	e019      	b.n	800539e <STMpil_step+0x1cc6>
 800536a:	bf00      	nop
 800536c:	20000010 	.word	0x20000010
 8005370:	200005b8 	.word	0x200005b8
 8005374:	200006d8 	.word	0x200006d8
 8005378:	200006e0 	.word	0x200006e0
 800537c:	200005f8 	.word	0x200005f8
  } else {
    if (numAccum < STMpil_P.PIDController3_LowerSaturationL) {
 8005380:	4b9d      	ldr	r3, [pc, #628]	; (80055f8 <STMpil_step+0x1f20>)
 8005382:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005386:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800538a:	f7fb fba7 	bl	8000adc <__aeabi_dcmplt>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <STMpil_step+0x1cc6>
      numAccum = STMpil_P.PIDController3_LowerSaturationL;
 8005394:	4b98      	ldr	r3, [pc, #608]	; (80055f8 <STMpil_step+0x1f20>)
 8005396:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800539a:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  /* End of Saturate: '<S46>/Saturation' */

  /* Sum: '<S2>/Add4' incorporates:
   *  Outport: '<Root>/<Current (A)>'
   */
  rtb_Add4 = numAccum - STMpil_Y.CurrentA;
 800539e:	4b97      	ldr	r3, [pc, #604]	; (80055fc <STMpil_step+0x1f24>)
 80053a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80053a4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80053a8:	f7fa ff6e 	bl	8000288 <__aeabi_dsub>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  /* Sum: '<S96>/Sum' incorporates:
   *  DiscreteIntegrator: '<S87>/Integrator'
   *  Gain: '<S92>/Proportional Gain'
   */
  numAccum = (STMpil_P.PIDController4_P * rtb_Add4) +
 80053b4:	4b90      	ldr	r3, [pc, #576]	; (80055f8 <STMpil_step+0x1f20>)
 80053b6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80053ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053be:	f7fb f91b 	bl	80005f8 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
    STMpil_DW.Integrator_DSTATE;
 80053ca:	4b8d      	ldr	r3, [pc, #564]	; (8005600 <STMpil_step+0x1f28>)
 80053cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
  numAccum = (STMpil_P.PIDController4_P * rtb_Add4) +
 80053d0:	f7fa ff5c 	bl	800028c <__adddf3>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

  /* Sum: '<S105>/FixPt Sum1' incorporates:
   *  Constant: '<S105>/FixPt Constant'
   *  UnitDelay: '<S104>/Output'
   */
  STMpil_DW.Output_DSTATE = (uint8_T)(((uint32_T)STMpil_DW.Output_DSTATE) +
 80053dc:	4b88      	ldr	r3, [pc, #544]	; (8005600 <STMpil_step+0x1f28>)
 80053de:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
    STMpil_P.FixPtConstant_Value);
 80053e2:	4b85      	ldr	r3, [pc, #532]	; (80055f8 <STMpil_step+0x1f20>)
 80053e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
  STMpil_DW.Output_DSTATE = (uint8_T)(((uint32_T)STMpil_DW.Output_DSTATE) +
 80053e8:	4413      	add	r3, r2
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	4b84      	ldr	r3, [pc, #528]	; (8005600 <STMpil_step+0x1f28>)
 80053ee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Switch: '<S106>/FixPt Switch' incorporates:
   *  Constant: '<S106>/Constant'
   *  UnitDelay: '<S104>/Output'
   */
  if (STMpil_DW.Output_DSTATE > STMpil_P.LimitedCounter_uplimit) {
 80053f2:	4b83      	ldr	r3, [pc, #524]	; (8005600 <STMpil_step+0x1f28>)
 80053f4:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80053f8:	4b7f      	ldr	r3, [pc, #508]	; (80055f8 <STMpil_step+0x1f20>)
 80053fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80053fe:	429a      	cmp	r2, r3
 8005400:	d905      	bls.n	800540e <STMpil_step+0x1d36>
    STMpil_DW.Output_DSTATE = STMpil_P.Constant_Value_ip42;
 8005402:	4b7d      	ldr	r3, [pc, #500]	; (80055f8 <STMpil_step+0x1f20>)
 8005404:	f893 22fa 	ldrb.w	r2, [r3, #762]	; 0x2fa
 8005408:	4b7d      	ldr	r3, [pc, #500]	; (8005600 <STMpil_step+0x1f28>)
 800540a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  /* End of Switch: '<S106>/FixPt Switch' */

  /* Update for DiscreteIntegrator: '<S87>/Integrator' incorporates:
   *  Gain: '<S84>/Integral Gain'
   */
  STMpil_DW.Integrator_DSTATE += STMpil_P.Integrator_gainval *
 800540e:	4b7c      	ldr	r3, [pc, #496]	; (8005600 <STMpil_step+0x1f28>)
 8005410:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005414:	4b78      	ldr	r3, [pc, #480]	; (80055f8 <STMpil_step+0x1f20>)
 8005416:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	; 0x78
    (STMpil_P.PIDController4_I * rtb_Add4);
 800541a:	4b77      	ldr	r3, [pc, #476]	; (80055f8 <STMpil_step+0x1f20>)
 800541c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005424:	f7fb f8e8 	bl	80005f8 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
  STMpil_DW.Integrator_DSTATE += STMpil_P.Integrator_gainval *
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fb f8e2 	bl	80005f8 <__aeabi_dmul>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4620      	mov	r0, r4
 800543a:	4629      	mov	r1, r5
 800543c:	f7fa ff26 	bl	800028c <__adddf3>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	496e      	ldr	r1, [pc, #440]	; (8005600 <STMpil_step+0x1f28>)
 8005446:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  /* Update for DiscreteIntegrator: '<S39>/Integrator' incorporates:
   *  Gain: '<S36>/Integral Gain'
   */
  STMpil_DW.Integrator_DSTATE_hwv3 += STMpil_P.Integrator_gainval_fnnq *
 800544a:	4b6d      	ldr	r3, [pc, #436]	; (8005600 <STMpil_step+0x1f28>)
 800544c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005450:	4b69      	ldr	r3, [pc, #420]	; (80055f8 <STMpil_step+0x1f20>)
 8005452:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	; 0x88
    (STMpil_P.PIDController3_I * rtb_Add3_ocsa);
 8005456:	4b68      	ldr	r3, [pc, #416]	; (80055f8 <STMpil_step+0x1f20>)
 8005458:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800545c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8005460:	f7fb f8ca 	bl	80005f8 <__aeabi_dmul>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
  STMpil_DW.Integrator_DSTATE_hwv3 += STMpil_P.Integrator_gainval_fnnq *
 8005468:	4640      	mov	r0, r8
 800546a:	4649      	mov	r1, r9
 800546c:	f7fb f8c4 	bl	80005f8 <__aeabi_dmul>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	f7fa ff08 	bl	800028c <__adddf3>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	495f      	ldr	r1, [pc, #380]	; (8005600 <STMpil_step+0x1f28>)
 8005482:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

  /* Saturate: '<S94>/Saturation' */
  if (numAccum > STMpil_P.PIDController4_UpperSaturationL) {
 8005486:	4b5c      	ldr	r3, [pc, #368]	; (80055f8 <STMpil_step+0x1f20>)
 8005488:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800548c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005490:	f7fb fb42 	bl	8000b18 <__aeabi_dcmpgt>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <STMpil_step+0x1dce>
    numAccum = STMpil_P.PIDController4_UpperSaturationL;
 800549a:	4b57      	ldr	r3, [pc, #348]	; (80055f8 <STMpil_step+0x1f20>)
 800549c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80054a0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
 80054a4:	e00e      	b.n	80054c4 <STMpil_step+0x1dec>
  } else {
    if (numAccum < STMpil_P.PIDController4_LowerSaturationL) {
 80054a6:	4b54      	ldr	r3, [pc, #336]	; (80055f8 <STMpil_step+0x1f20>)
 80054a8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80054ac:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80054b0:	f7fb fb14 	bl	8000adc <__aeabi_dcmplt>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <STMpil_step+0x1dec>
      numAccum = STMpil_P.PIDController4_LowerSaturationL;
 80054ba:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <STMpil_step+0x1f20>)
 80054bc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80054c0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  /* End of Saturate: '<S94>/Saturation' */

  /* DataTypeConversion: '<S123>/Data Type Conversion' incorporates:
   *  RelationalOperator: '<S2>/Relational Operator1'
   */
  STMpil_B.DataTypeConversion = (rtb_Integrator <= numAccum);
 80054c4:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80054c8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80054cc:	f7fb fb10 	bl	8000af0 <__aeabi_dcmple>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <STMpil_step+0x1e06>
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	4b4a      	ldr	r3, [pc, #296]	; (8005604 <STMpil_step+0x1f2c>)
 80054dc:	e003      	b.n	80054e6 <STMpil_step+0x1e0e>
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	4948      	ldr	r1, [pc, #288]	; (8005608 <STMpil_step+0x1f30>)
 80054e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

  /* Fcn: '<S113>/Fcn1' incorporates:
   *  Gain: '<S113>/R4'
   *  Memory: '<S113>/it init1'
   */
  STMpil_Y.SOC = 100.0 * (1.0 - (rtb_Gain / (STMpil_P.R4_Gain *
 80054ec:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <STMpil_step+0x1f20>)
 80054ee:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
    STMpil_DW.itinit1_PreviousInput)));
 80054f2:	4b43      	ldr	r3, [pc, #268]	; (8005600 <STMpil_step+0x1f28>)
 80054f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
  STMpil_Y.SOC = 100.0 * (1.0 - (rtb_Gain / (STMpil_P.R4_Gain *
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8005504:	f7fb f9a2 	bl	800084c <__aeabi_ddiv>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	f04f 0000 	mov.w	r0, #0
 8005510:	493c      	ldr	r1, [pc, #240]	; (8005604 <STMpil_step+0x1f2c>)
 8005512:	f7fa feb9 	bl	8000288 <__aeabi_dsub>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	4b3a      	ldr	r3, [pc, #232]	; (800560c <STMpil_step+0x1f34>)
 8005524:	f7fb f868 	bl	80005f8 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4933      	ldr	r1, [pc, #204]	; (80055fc <STMpil_step+0x1f24>)
 800552e:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataTypeConversion: '<S125>/Data Type Conversion' incorporates:
   *  Constant: '<S3>/Constant'
   */
  STMpil_B.DataTypeConversion_ni55 = STMpil_P.Constant_Value_fyee;
 8005532:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <STMpil_step+0x1f20>)
 8005534:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 8005538:	4933      	ldr	r1, [pc, #204]	; (8005608 <STMpil_step+0x1f30>)
 800553a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  /* Update for Memory: '<S113>/it init1' incorporates:
   *  Constant: '<S113>/Constant12'
   */
  STMpil_DW.itinit1_PreviousInput = STMpil_P.Constant12_Value;
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <STMpil_step+0x1f20>)
 8005540:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	; 0x2e0
 8005544:	492e      	ldr	r1, [pc, #184]	; (8005600 <STMpil_step+0x1f28>)
 8005546:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  /* Update for DiscreteTransferFcn: '<S113>/Current filter' incorporates:
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_DW.Currentfilter_states = (STMpil_Y.CurrentA -
 800554a:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <STMpil_step+0x1f24>)
 800554c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    (STMpil_P.Currentfilter_DenCoef[1] * STMpil_DW.Currentfilter_states)) /
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <STMpil_step+0x1f20>)
 8005552:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	; 0x110
 8005556:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <STMpil_step+0x1f28>)
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f7fb f84c 	bl	80005f8 <__aeabi_dmul>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
  STMpil_DW.Currentfilter_states = (STMpil_Y.CurrentA -
 8005564:	4620      	mov	r0, r4
 8005566:	4629      	mov	r1, r5
 8005568:	f7fa fe8e 	bl	8000288 <__aeabi_dsub>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
    STMpil_P.Currentfilter_DenCoef[0];
 8005574:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <STMpil_step+0x1f20>)
 8005576:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
    (STMpil_P.Currentfilter_DenCoef[1] * STMpil_DW.Currentfilter_states)) /
 800557a:	f7fb f967 	bl	800084c <__aeabi_ddiv>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
  STMpil_DW.Currentfilter_states = (STMpil_Y.CurrentA -
 8005582:	491f      	ldr	r1, [pc, #124]	; (8005600 <STMpil_step+0x1f28>)
 8005584:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for Memory: '<S113>/it init' incorporates:
   *  Gain: '<S113>/Gain2'
   */
  STMpil_DW.itinit_PreviousInput = STMpil_P.Gain2_Gain * rtb_Gain;
 8005588:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <STMpil_step+0x1f20>)
 800558a:	e9d3 01b6 	ldrd	r0, r1, [r3, #728]	; 0x2d8
 800558e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8005592:	f7fb f831 	bl	80005f8 <__aeabi_dmul>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4919      	ldr	r1, [pc, #100]	; (8005600 <STMpil_step+0x1f28>)
 800559c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

  /* Update for DiscreteIntegrator: '<S113>/int(i)' incorporates:
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_DW.inti_IC_LOADING = 0U;
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <STMpil_step+0x1f28>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
  STMpil_DW.inti_DSTATE += STMpil_P.inti_gainval * STMpil_Y.CurrentA;
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <STMpil_step+0x1f28>)
 80055aa:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <STMpil_step+0x1f20>)
 80055b0:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <STMpil_step+0x1f24>)
 80055b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80055ba:	f7fb f81d 	bl	80005f8 <__aeabi_dmul>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4620      	mov	r0, r4
 80055c4:	4629      	mov	r1, r5
 80055c6:	f7fa fe61 	bl	800028c <__adddf3>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	490c      	ldr	r1, [pc, #48]	; (8005600 <STMpil_step+0x1f28>)
 80055d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <STMpil_step+0x1f28>)
 80055d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <STMpil_step+0x1f20>)
 80055dc:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80055e0:	f7fb fa90 	bl	8000b04 <__aeabi_dcmpge>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d012      	beq.n	8005610 <STMpil_step+0x1f38>
    STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 80055ea:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <STMpil_step+0x1f20>)
 80055ec:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80055f0:	4903      	ldr	r1, [pc, #12]	; (8005600 <STMpil_step+0x1f28>)
 80055f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80055f6:	e01c      	b.n	8005632 <STMpil_step+0x1f5a>
 80055f8:	20000010 	.word	0x20000010
 80055fc:	200006e0 	.word	0x200006e0
 8005600:	200005f8 	.word	0x200005f8
 8005604:	3ff00000 	.word	0x3ff00000
 8005608:	200005b8 	.word	0x200005b8
 800560c:	40590000 	.word	0x40590000
  } else {
    if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 8005610:	4b20      	ldr	r3, [pc, #128]	; (8005694 <STMpil_step+0x1fbc>)
 8005612:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <STMpil_step+0x1fc0>)
 8005618:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 800561c:	f7fb fa68 	bl	8000af0 <__aeabi_dcmple>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <STMpil_step+0x1f5a>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <STMpil_step+0x1fc0>)
 8005628:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 800562c:	4919      	ldr	r1, [pc, #100]	; (8005694 <STMpil_step+0x1fbc>)
 800562e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }
  }

  if (rtb_DataTypeConversion2 > 0) {
 8005632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005636:	2b00      	cmp	r3, #0
 8005638:	dd04      	ble.n	8005644 <STMpil_step+0x1f6c>
    STMpil_DW.inti_PrevResetState = 1;
 800563a:	4b16      	ldr	r3, [pc, #88]	; (8005694 <STMpil_step+0x1fbc>)
 800563c:	2201      	movs	r2, #1
 800563e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8005642:	e003      	b.n	800564c <STMpil_step+0x1f74>
  } else {
    STMpil_DW.inti_PrevResetState = 0;
 8005644:	4b13      	ldr	r3, [pc, #76]	; (8005694 <STMpil_step+0x1fbc>)
 8005646:	2200      	movs	r2, #0
 8005648:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
   *  Outport: '<Root>/<Current (A)>'
   *  Product: '<S118>/Divide'
   *  RelationalOperator: '<S122>/Compare'
   *  Sum: '<S118>/Add3'
   */
  STMpil_DW.DiscreteTimeIntegrator_DSTATE +=
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <STMpil_step+0x1fbc>)
 800564e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    STMpil_P.DiscreteTimeIntegrator_gainval * (STMpil_P.Gain1_Gain * (fabs
 8005652:	4b11      	ldr	r3, [pc, #68]	; (8005698 <STMpil_step+0x1fc0>)
 8005654:	e9d3 ab5e 	ldrd	sl, fp, [r3, #376]	; 0x178
 8005658:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <STMpil_step+0x1fc0>)
 800565a:	ed93 7ba8 	vldr	d7, [r3, #672]	; 0x2a0
 800565e:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 8005662:	4b0e      	ldr	r3, [pc, #56]	; (800569c <STMpil_step+0x1fc4>)
 8005664:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    STMpil_P.DiscreteTimeIntegrator_gainval * (STMpil_P.Gain1_Gain * (fabs
 8005668:	603a      	str	r2, [r7, #0]
 800566a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800566e:	607b      	str	r3, [r7, #4]
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 8005670:	4b09      	ldr	r3, [pc, #36]	; (8005698 <STMpil_step+0x1fc0>)
 8005672:	e9d3 45a6 	ldrd	r4, r5, [r3, #664]	; 0x298
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <STMpil_step+0x1fc4>)
 8005678:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    STMpil_P.Constant_Value_axhw))) - STMpil_DW.DiscreteTimeIntegrator_DSTATE)));
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <STMpil_step+0x1fc0>)
 800567e:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 8005682:	f7fb fa2b 	bl	8000adc <__aeabi_dcmplt>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <STMpil_step+0x1fcc>
 800568c:	f04f 0000 	mov.w	r0, #0
 8005690:	4903      	ldr	r1, [pc, #12]	; (80056a0 <STMpil_step+0x1fc8>)
 8005692:	e00b      	b.n	80056ac <STMpil_step+0x1fd4>
 8005694:	200005f8 	.word	0x200005f8
 8005698:	20000010 	.word	0x20000010
 800569c:	200006e0 	.word	0x200006e0
 80056a0:	3ff00000 	.word	0x3ff00000
 80056a4:	f04f 0000 	mov.w	r0, #0
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	4622      	mov	r2, r4
 80056ae:	462b      	mov	r3, r5
 80056b0:	f7fa ffa2 	bl	80005f8 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
    STMpil_P.Constant_Value_axhw))) - STMpil_DW.DiscreteTimeIntegrator_DSTATE)));
 80056bc:	4ba6      	ldr	r3, [pc, #664]	; (8005958 <STMpil_step+0x2280>)
 80056be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80056c2:	f7fa fde1 	bl	8000288 <__aeabi_dsub>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 80056ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056ce:	f7fa ff93 	bl	80005f8 <__aeabi_dmul>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
    STMpil_P.DiscreteTimeIntegrator_gainval * (STMpil_P.Gain1_Gain * (fabs
 80056d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056da:	f7fa ff8d 	bl	80005f8 <__aeabi_dmul>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4650      	mov	r0, sl
 80056e4:	4659      	mov	r1, fp
 80056e6:	f7fa ff87 	bl	80005f8 <__aeabi_dmul>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
  STMpil_DW.DiscreteTimeIntegrator_DSTATE +=
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f7fa fdcb 	bl	800028c <__adddf3>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4997      	ldr	r1, [pc, #604]	; (8005958 <STMpil_step+0x2280>)
 80056fc:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Update for Memory: '<S113>/Memory2' incorporates:
   *  Gain: '<S113>/R1'
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_DW.Memory2_PreviousInput = STMpil_P.R1_Gain * STMpil_Y.CurrentA;
 8005700:	4b96      	ldr	r3, [pc, #600]	; (800595c <STMpil_step+0x2284>)
 8005702:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 8005706:	4b96      	ldr	r3, [pc, #600]	; (8005960 <STMpil_step+0x2288>)
 8005708:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800570c:	f7fa ff74 	bl	80005f8 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4990      	ldr	r1, [pc, #576]	; (8005958 <STMpil_step+0x2280>)
 8005716:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   *  Inport: '<Root>/In1'
   */

  /* S-Function block: <S127>/State-Space */
  {
    const real_T *As = (real_T*)STMpil_DW.StateSpace_PWORK.AS;
 800571a:	4b8f      	ldr	r3, [pc, #572]	; (8005958 <STMpil_step+0x2280>)
 800571c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
    const real_T *Bs = (real_T*)STMpil_DW.StateSpace_PWORK.BS;
 8005720:	4b8d      	ldr	r3, [pc, #564]	; (8005958 <STMpil_step+0x2280>)
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	64bb      	str	r3, [r7, #72]	; 0x48
    real_T *xtmp = (real_T*)STMpil_DW.StateSpace_PWORK.XTMP;
 8005726:	4b8c      	ldr	r3, [pc, #560]	; (8005958 <STMpil_step+0x2280>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	647b      	str	r3, [r7, #68]	; 0x44
    real_T accum;

    /* Calculate new states... */
    accum = 0.0;
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[0];
 8005738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573a:	f103 0208 	add.w	r2, r3, #8
 800573e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005744:	4b84      	ldr	r3, [pc, #528]	; (8005958 <STMpil_step+0x2280>)
 8005746:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800574a:	f7fa ff55 	bl	80005f8 <__aeabi_dmul>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005756:	f7fa fd99 	bl	800028c <__adddf3>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[1];
 8005762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005764:	f103 0208 	add.w	r2, r3, #8
 8005768:	64fa      	str	r2, [r7, #76]	; 0x4c
 800576a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800576e:	4b7a      	ldr	r3, [pc, #488]	; (8005958 <STMpil_step+0x2280>)
 8005770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005780:	f7fa fd84 	bl	800028c <__adddf3>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[0]);
 800578c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578e:	f103 0208 	add.w	r2, r3, #8
 8005792:	64ba      	str	r2, [r7, #72]	; 0x48
 8005794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005798:	4b70      	ldr	r3, [pc, #448]	; (800595c <STMpil_step+0x2284>)
 800579a:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800579e:	f7fa ff2b 	bl	80005f8 <__aeabi_dmul>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80057aa:	f7fa fd6f 	bl	800028c <__adddf3>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[1]);
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	f103 0208 	add.w	r2, r3, #8
 80057bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80057be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057c2:	4b66      	ldr	r3, [pc, #408]	; (800595c <STMpil_step+0x2284>)
 80057c4:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80057c8:	f7fa ff16 	bl	80005f8 <__aeabi_dmul>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80057d4:	f7fa fd5a 	bl	800028c <__adddf3>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_B.Switch2;
 80057e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e2:	f103 0208 	add.w	r2, r3, #8
 80057e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80057e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057ec:	4b5d      	ldr	r3, [pc, #372]	; (8005964 <STMpil_step+0x228c>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f7fa ff01 	bl	80005f8 <__aeabi_dmul>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80057fe:	f7fa fd45 	bl	800028c <__adddf3>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_U.In1;
 800580a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800580c:	f103 0208 	add.w	r2, r3, #8
 8005810:	64ba      	str	r2, [r7, #72]	; 0x48
 8005812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005816:	4b54      	ldr	r3, [pc, #336]	; (8005968 <STMpil_step+0x2290>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f7fa feec 	bl	80005f8 <__aeabi_dmul>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005828:	f7fa fd30 	bl	800028c <__adddf3>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xtmp[0] = accum;
 8005834:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005836:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800583a:	e9c1 2300 	strd	r2, r3, [r1]
    accum = 0.0;
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[0];
 800584a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584c:	f103 0208 	add.w	r2, r3, #8
 8005850:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005856:	4b40      	ldr	r3, [pc, #256]	; (8005958 <STMpil_step+0x2280>)
 8005858:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800585c:	f7fa fecc 	bl	80005f8 <__aeabi_dmul>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005868:	f7fa fd10 	bl	800028c <__adddf3>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[1];
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	f103 0208 	add.w	r2, r3, #8
 800587a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800587c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005880:	4b35      	ldr	r3, [pc, #212]	; (8005958 <STMpil_step+0x2280>)
 8005882:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005886:	f7fa feb7 	bl	80005f8 <__aeabi_dmul>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005892:	f7fa fcfb 	bl	800028c <__adddf3>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[0]);
 800589e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a0:	f103 0208 	add.w	r2, r3, #8
 80058a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80058a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058aa:	4b2c      	ldr	r3, [pc, #176]	; (800595c <STMpil_step+0x2284>)
 80058ac:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80058b0:	f7fa fea2 	bl	80005f8 <__aeabi_dmul>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058bc:	f7fa fce6 	bl	800028c <__adddf3>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[1]);
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	f103 0208 	add.w	r2, r3, #8
 80058ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80058d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <STMpil_step+0x2284>)
 80058d6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80058da:	f7fa fe8d 	bl	80005f8 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058e6:	f7fa fcd1 	bl	800028c <__adddf3>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_B.Switch2;
 80058f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f4:	f103 0208 	add.w	r2, r3, #8
 80058f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80058fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058fe:	4b19      	ldr	r3, [pc, #100]	; (8005964 <STMpil_step+0x228c>)
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f7fa fe78 	bl	80005f8 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005910:	f7fa fcbc 	bl	800028c <__adddf3>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_U.In1;
 800591c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591e:	f103 0208 	add.w	r2, r3, #8
 8005922:	64ba      	str	r2, [r7, #72]	; 0x48
 8005924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005928:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <STMpil_step+0x2290>)
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f7fa fe63 	bl	80005f8 <__aeabi_dmul>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800593a:	f7fa fca7 	bl	800028c <__adddf3>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xtmp[1] = accum;
 8005946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005948:	f103 0108 	add.w	r1, r3, #8
 800594c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005950:	e9c1 2300 	strd	r2, r3, [r1]
 8005954:	e00a      	b.n	800596c <STMpil_step+0x2294>
 8005956:	bf00      	nop
 8005958:	200005f8 	.word	0x200005f8
 800595c:	20000010 	.word	0x20000010
 8005960:	200006e0 	.word	0x200006e0
 8005964:	200005b8 	.word	0x200005b8
 8005968:	200006d8 	.word	0x200006d8
    STMpil_DW.StateSpace_DSTATE[0] = xtmp[0];
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	4927      	ldr	r1, [pc, #156]	; (8005a10 <STMpil_step+0x2338>)
 8005974:	e9c1 2306 	strd	r2, r3, [r1, #24]
    STMpil_DW.StateSpace_DSTATE[1] = xtmp[1];
 8005978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800597a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800597e:	4924      	ldr	r1, [pc, #144]	; (8005a10 <STMpil_step+0x2338>)
 8005980:	e9c1 2308 	strd	r2, r3, [r1, #32]

    {
      int_T *gState = (int_T*)STMpil_DW.StateSpace_PWORK.G_STATE;
 8005984:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <STMpil_step+0x2338>)
 8005986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800598a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Store switch gates values for next step */
      *(gState++) = (int_T) STMpil_B.DataTypeConversion_ni55;
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <STMpil_step+0x233c>)
 800598e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005992:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8005994:	1d21      	adds	r1, r4, #4
 8005996:	6379      	str	r1, [r7, #52]	; 0x34
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	f7fb f8dc 	bl	8000b58 <__aeabi_d2iz>
 80059a0:	4603      	mov	r3, r0
 80059a2:	6023      	str	r3, [r4, #0]
      *(gState++) = (int_T) STMpil_B.DataTypeConversion;
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <STMpil_step+0x233c>)
 80059a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80059aa:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80059ac:	1d21      	adds	r1, r4, #4
 80059ae:	6379      	str	r1, [r7, #52]	; 0x34
 80059b0:	4610      	mov	r0, r2
 80059b2:	4619      	mov	r1, r3
 80059b4:	f7fb f8d0 	bl	8000b58 <__aeabi_d2iz>
 80059b8:	4603      	mov	r3, r0
 80059ba:	6023      	str	r3, [r4, #0]
    }
  }

  /* Saturate: '<S113>/Saturation' */
  if (STMpil_Y.SOC > STMpil_P.Saturation_UpperSat_egqb) {
 80059bc:	4b16      	ldr	r3, [pc, #88]	; (8005a18 <STMpil_step+0x2340>)
 80059be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059c2:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <STMpil_step+0x2344>)
 80059c4:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80059c8:	f7fb f8a6 	bl	8000b18 <__aeabi_dcmpgt>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <STMpil_step+0x2308>
    /* Outport: '<Root>/<SOC (%)>' */
    STMpil_Y.SOC = STMpil_P.Saturation_UpperSat_egqb;
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <STMpil_step+0x2344>)
 80059d4:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80059d8:	490f      	ldr	r1, [pc, #60]	; (8005a18 <STMpil_step+0x2340>)
 80059da:	e9c1 2300 	strd	r2, r3, [r1]
    }
  }

  /* End of Saturate: '<S113>/Saturation' */
  /* End of Outputs for SubSystem: '<Root>/STMpil' */
}
 80059de:	e011      	b.n	8005a04 <STMpil_step+0x232c>
    if (STMpil_Y.SOC < STMpil_P.Saturation_LowerSat_dzqb) {
 80059e0:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <STMpil_step+0x2340>)
 80059e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059e6:	4b0d      	ldr	r3, [pc, #52]	; (8005a1c <STMpil_step+0x2344>)
 80059e8:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 80059ec:	f7fb f876 	bl	8000adc <__aeabi_dcmplt>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d100      	bne.n	80059f8 <STMpil_step+0x2320>
}
 80059f6:	e005      	b.n	8005a04 <STMpil_step+0x232c>
      STMpil_Y.SOC = STMpil_P.Saturation_LowerSat_dzqb;
 80059f8:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <STMpil_step+0x2344>)
 80059fa:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 80059fe:	4906      	ldr	r1, [pc, #24]	; (8005a18 <STMpil_step+0x2340>)
 8005a00:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005a04:	bf00      	nop
 8005a06:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a10:	200005f8 	.word	0x200005f8
 8005a14:	200005b8 	.word	0x200005b8
 8005a18:	200006e0 	.word	0x200006e0
 8005a1c:	20000010 	.word	0x20000010

08005a20 <STMpil_initialize>:

/* Model initialize function */
void STMpil_initialize(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b090      	sub	sp, #64	; 0x40
 8005a24:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8005a26:	2008      	movs	r0, #8
 8005a28:	f000 fb22 	bl	8006070 <rt_InitInfAndNaN>

  /* non-finite (run-time) assignments */
  STMpil_P.Saturation_LowerSat = rtMinusInf;
 8005a2c:	4bac      	ldr	r3, [pc, #688]	; (8005ce0 <STMpil_initialize+0x2c0>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	49ac      	ldr	r1, [pc, #688]	; (8005ce4 <STMpil_initialize+0x2c4>)
 8005a34:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
  STMpil_P.inti_LowerSat = rtMinusInf;
 8005a38:	4ba9      	ldr	r3, [pc, #676]	; (8005ce0 <STMpil_initialize+0x2c0>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	49a9      	ldr	r1, [pc, #676]	; (8005ce4 <STMpil_initialize+0x2c4>)
 8005a40:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138

  /* block I/O */
  (void) memset(((void *) &STMpil_B), 0,
 8005a44:	2240      	movs	r2, #64	; 0x40
 8005a46:	2100      	movs	r1, #0
 8005a48:	48a7      	ldr	r0, [pc, #668]	; (8005ce8 <STMpil_initialize+0x2c8>)
 8005a4a:	f000 fb95 	bl	8006178 <memset>
                sizeof(B_STMpil_T));

  /* states (dwork) */
  (void) memset((void *)&STMpil_DW, 0,
 8005a4e:	22e0      	movs	r2, #224	; 0xe0
 8005a50:	2100      	movs	r1, #0
 8005a52:	48a6      	ldr	r0, [pc, #664]	; (8005cec <STMpil_initialize+0x2cc>)
 8005a54:	f000 fb90 	bl	8006178 <memset>
                sizeof(DW_STMpil_T));

  /* external inputs */
  STMpil_U.In1 = 0.0;
 8005a58:	49a5      	ldr	r1, [pc, #660]	; (8005cf0 <STMpil_initialize+0x2d0>)
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	e9c1 2300 	strd	r2, r3, [r1]

  /* external outputs */
  (void) memset((void *)&STMpil_Y, 0,
 8005a66:	2218      	movs	r2, #24
 8005a68:	2100      	movs	r1, #0
 8005a6a:	48a2      	ldr	r0, [pc, #648]	; (8005cf4 <STMpil_initialize+0x2d4>)
 8005a6c:	f000 fb84 	bl	8006178 <memset>
     *  Inport: '<Root>/In1'
     */

    /* S-Function block: <S127>/State-Space */
    {
      STMpil_DW.StateSpace_PWORK.AS = (real_T*)calloc(2 * 2, sizeof(real_T));
 8005a70:	2108      	movs	r1, #8
 8005a72:	2004      	movs	r0, #4
 8005a74:	f000 fb40 	bl	80060f8 <calloc>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4b9b      	ldr	r3, [pc, #620]	; (8005cec <STMpil_initialize+0x2cc>)
 8005a7e:	651a      	str	r2, [r3, #80]	; 0x50
      STMpil_DW.StateSpace_PWORK.BS = (real_T*)calloc(2 * 4, sizeof(real_T));
 8005a80:	2108      	movs	r1, #8
 8005a82:	2008      	movs	r0, #8
 8005a84:	f000 fb38 	bl	80060f8 <calloc>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	4b97      	ldr	r3, [pc, #604]	; (8005cec <STMpil_initialize+0x2cc>)
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54
      STMpil_DW.StateSpace_PWORK.CS = (real_T*)calloc(3 * 2, sizeof(real_T));
 8005a90:	2108      	movs	r1, #8
 8005a92:	2006      	movs	r0, #6
 8005a94:	f000 fb30 	bl	80060f8 <calloc>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4b93      	ldr	r3, [pc, #588]	; (8005cec <STMpil_initialize+0x2cc>)
 8005a9e:	659a      	str	r2, [r3, #88]	; 0x58
      STMpil_DW.StateSpace_PWORK.DS = (real_T*)calloc(3 * 4, sizeof(real_T));
 8005aa0:	2108      	movs	r1, #8
 8005aa2:	200c      	movs	r0, #12
 8005aa4:	f000 fb28 	bl	80060f8 <calloc>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4b8f      	ldr	r3, [pc, #572]	; (8005cec <STMpil_initialize+0x2cc>)
 8005aae:	65da      	str	r2, [r3, #92]	; 0x5c
      STMpil_DW.StateSpace_PWORK.DX_COL = (real_T*)calloc(3, sizeof(real_T));
 8005ab0:	2108      	movs	r1, #8
 8005ab2:	2003      	movs	r0, #3
 8005ab4:	f000 fb20 	bl	80060f8 <calloc>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	4b8b      	ldr	r3, [pc, #556]	; (8005cec <STMpil_initialize+0x2cc>)
 8005abe:	661a      	str	r2, [r3, #96]	; 0x60
      STMpil_DW.StateSpace_PWORK.TMP2 = (real_T*)calloc(4, sizeof(real_T));
 8005ac0:	2108      	movs	r1, #8
 8005ac2:	2004      	movs	r0, #4
 8005ac4:	f000 fb18 	bl	80060f8 <calloc>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	4b87      	ldr	r3, [pc, #540]	; (8005cec <STMpil_initialize+0x2cc>)
 8005ace:	66da      	str	r2, [r3, #108]	; 0x6c
      STMpil_DW.StateSpace_PWORK.BD_COL = (real_T*)calloc(2, sizeof(real_T));
 8005ad0:	2108      	movs	r1, #8
 8005ad2:	2002      	movs	r0, #2
 8005ad4:	f000 fb10 	bl	80060f8 <calloc>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	4b83      	ldr	r3, [pc, #524]	; (8005cec <STMpil_initialize+0x2cc>)
 8005ade:	665a      	str	r2, [r3, #100]	; 0x64
      STMpil_DW.StateSpace_PWORK.TMP1 = (real_T*)calloc(2, sizeof(real_T));
 8005ae0:	2108      	movs	r1, #8
 8005ae2:	2002      	movs	r0, #2
 8005ae4:	f000 fb08 	bl	80060f8 <calloc>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	4b7f      	ldr	r3, [pc, #508]	; (8005cec <STMpil_initialize+0x2cc>)
 8005aee:	669a      	str	r2, [r3, #104]	; 0x68
      STMpil_DW.StateSpace_PWORK.XTMP = (real_T*)calloc(2, sizeof(real_T));
 8005af0:	2108      	movs	r1, #8
 8005af2:	2002      	movs	r0, #2
 8005af4:	f000 fb00 	bl	80060f8 <calloc>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461a      	mov	r2, r3
 8005afc:	4b7b      	ldr	r3, [pc, #492]	; (8005cec <STMpil_initialize+0x2cc>)
 8005afe:	671a      	str	r2, [r3, #112]	; 0x70
      STMpil_DW.StateSpace_PWORK.SWITCH_STATUS = (int_T*)calloc(2, sizeof(int_T));
 8005b00:	2104      	movs	r1, #4
 8005b02:	2002      	movs	r0, #2
 8005b04:	f000 faf8 	bl	80060f8 <calloc>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4b77      	ldr	r3, [pc, #476]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b0e:	675a      	str	r2, [r3, #116]	; 0x74
      STMpil_DW.StateSpace_PWORK.SW_CHG = (int_T*)calloc(2, sizeof(int_T));
 8005b10:	2104      	movs	r1, #4
 8005b12:	2002      	movs	r0, #2
 8005b14:	f000 faf0 	bl	80060f8 <calloc>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4b73      	ldr	r3, [pc, #460]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b1e:	67da      	str	r2, [r3, #124]	; 0x7c
      STMpil_DW.StateSpace_PWORK.G_STATE = (int_T*)calloc(2, sizeof(int_T));
 8005b20:	2104      	movs	r1, #4
 8005b22:	2002      	movs	r0, #2
 8005b24:	f000 fae8 	bl	80060f8 <calloc>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4b6f      	ldr	r3, [pc, #444]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      STMpil_DW.StateSpace_PWORK.Y_SWITCH = (real_T*)calloc(2, sizeof(real_T));
 8005b32:	2108      	movs	r1, #8
 8005b34:	2002      	movs	r0, #2
 8005b36:	f000 fadf 	bl	80060f8 <calloc>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b6b      	ldr	r3, [pc, #428]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      STMpil_DW.StateSpace_PWORK.SWITCH_TYPES = (int_T*)calloc(2, sizeof(int_T));
 8005b44:	2104      	movs	r1, #4
 8005b46:	2002      	movs	r0, #2
 8005b48:	f000 fad6 	bl	80060f8 <calloc>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4b66      	ldr	r3, [pc, #408]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      STMpil_DW.StateSpace_PWORK.IDX_OUT_SW = (int_T*)calloc(2, sizeof(int_T));
 8005b56:	2104      	movs	r1, #4
 8005b58:	2002      	movs	r0, #2
 8005b5a:	f000 facd 	bl	80060f8 <calloc>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b62      	ldr	r3, [pc, #392]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      STMpil_DW.StateSpace_PWORK.SWITCH_STATUS_INIT = (int_T*)calloc(2, sizeof
 8005b68:	2104      	movs	r1, #4
 8005b6a:	2002      	movs	r0, #2
 8005b6c:	f000 fac4 	bl	80060f8 <calloc>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	4b5d      	ldr	r3, [pc, #372]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b76:	679a      	str	r2, [r3, #120]	; 0x78
        (int_T));
      STMpil_DW.StateSpace_PWORK.USWLAST = (real_T*)calloc(2, sizeof(real_T));
 8005b78:	2108      	movs	r1, #8
 8005b7a:	2002      	movs	r0, #2
 8005b7c:	f000 fabc 	bl	80060f8 <calloc>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* InitializeConditions for Memory: '<S113>/it init1' */
    STMpil_DW.itinit1_PreviousInput = STMpil_P.itinit1_InitialCondition;
 8005b8a:	4b56      	ldr	r3, [pc, #344]	; (8005ce4 <STMpil_initialize+0x2c4>)
 8005b8c:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8005b90:	4956      	ldr	r1, [pc, #344]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b92:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    /* InitializeConditions for DiscreteTransferFcn: '<S113>/Current filter' */
    STMpil_DW.Currentfilter_states = STMpil_P.Currentfilter_InitialStates;
 8005b96:	4b53      	ldr	r3, [pc, #332]	; (8005ce4 <STMpil_initialize+0x2c4>)
 8005b98:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8005b9c:	4953      	ldr	r1, [pc, #332]	; (8005cec <STMpil_initialize+0x2cc>)
 8005b9e:	e9c1 2300 	strd	r2, r3, [r1]

    /* InitializeConditions for Memory: '<S113>/it init' incorporates:
     *  DiscreteIntegrator: '<S118>/Discrete-Time Integrator'
     */
    itinit_PreviousInput_tmp = 1.0 - (STMpil_P.Battery_SOC / 100.0);
 8005ba2:	4b50      	ldr	r3, [pc, #320]	; (8005ce4 <STMpil_initialize+0x2c4>)
 8005ba4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	4b52      	ldr	r3, [pc, #328]	; (8005cf8 <STMpil_initialize+0x2d8>)
 8005bae:	f7fa fe4d 	bl	800084c <__aeabi_ddiv>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	f04f 0000 	mov.w	r0, #0
 8005bba:	4950      	ldr	r1, [pc, #320]	; (8005cfc <STMpil_initialize+0x2dc>)
 8005bbc:	f7fa fb64 	bl	8000288 <__aeabi_dsub>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    STMpil_DW.itinit_PreviousInput = ((itinit_PreviousInput_tmp *
 8005bc8:	a33d      	add	r3, pc, #244	; (adr r3, 8005cc0 <STMpil_initialize+0x2a0>)
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005bd2:	f7fa fd11 	bl	80005f8 <__aeabi_dmul>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
      2.1750499999999882) * 0.942507068803021) * 3600.0;
 8005bde:	a33a      	add	r3, pc, #232	; (adr r3, 8005cc8 <STMpil_initialize+0x2a8>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fd08 	bl	80005f8 <__aeabi_dmul>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	a337      	add	r3, pc, #220	; (adr r3, 8005cd0 <STMpil_initialize+0x2b0>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fcff 	bl	80005f8 <__aeabi_dmul>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
    STMpil_DW.itinit_PreviousInput = ((itinit_PreviousInput_tmp *
 8005bfe:	493b      	ldr	r1, [pc, #236]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    /* InitializeConditions for DiscreteIntegrator: '<S113>/int(i)' */
    STMpil_DW.inti_PrevResetState = 2;
 8005c04:	4b39      	ldr	r3, [pc, #228]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    STMpil_DW.inti_IC_LOADING = 1U;
 8005c0c:	4b37      	ldr	r3, [pc, #220]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde

    /* InitializeConditions for DiscreteIntegrator: '<S118>/Discrete-Time Integrator' */
    STMpil_DW.DiscreteTimeIntegrator_DSTATE = 0.21089319159632841 * exp((-15.0 *
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <STMpil_initialize+0x2e0>)
 8005c1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005c1e:	f7fa fceb 	bl	80005f8 <__aeabi_dmul>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	a325      	add	r3, pc, #148	; (adr r3, 8005cc0 <STMpil_initialize+0x2a0>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa fce2 	bl	80005f8 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	ec43 2b17 	vmov	d7, r2, r3
 8005c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8005c40:	eef0 0a67 	vmov.f32	s1, s15
 8005c44:	f002 ffa8 	bl	8008b98 <exp>
 8005c48:	ec51 0b10 	vmov	r0, r1, d0
 8005c4c:	a322      	add	r3, pc, #136	; (adr r3, 8005cd8 <STMpil_initialize+0x2b8>)
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f7fa fcd1 	bl	80005f8 <__aeabi_dmul>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4924      	ldr	r1, [pc, #144]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      itinit_PreviousInput_tmp) * 2.1750499999999882);

    /* InitializeConditions for Memory: '<S113>/Memory2' */
    STMpil_DW.Memory2_PreviousInput = STMpil_P.Memory2_InitialCondition;
 8005c60:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <STMpil_initialize+0x2c4>)
 8005c62:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8005c66:	4921      	ldr	r1, [pc, #132]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c68:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
     *  Constant: '<S129>/SwitchCurrents'
     *  Inport: '<Root>/In1'
     */
    {
      int32_T i, j;
      real_T *As = (real_T*)STMpil_DW.StateSpace_PWORK.AS;
 8005c6c:	4b1f      	ldr	r3, [pc, #124]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      real_T *Bs = (real_T*)STMpil_DW.StateSpace_PWORK.BS;
 8005c72:	4b1e      	ldr	r3, [pc, #120]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
      real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 8005c78:	4b1c      	ldr	r3, [pc, #112]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
      real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 8005c7e:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <STMpil_initialize+0x2cc>)
 8005c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c82:	623b      	str	r3, [r7, #32]
      real_T *X0 = (real_T*)&STMpil_DW.StateSpace_DSTATE[0];
 8005c84:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <STMpil_initialize+0x2e4>)
 8005c86:	61fb      	str	r3, [r7, #28]
      for (i = 0; i < 2; i++) {
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8c:	e00f      	b.n	8005cae <STMpil_initialize+0x28e>
        X0[i] = (STMpil_P.StateSpace_X0_param[i]);
 8005c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	18d1      	adds	r1, r2, r3
 8005c96:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <STMpil_initialize+0x2c4>)
 8005c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9a:	334f      	adds	r3, #79	; 0x4f
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 2; i++) {
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005caa:	3301      	adds	r3, #1
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	ddec      	ble.n	8005c8e <STMpil_initialize+0x26e>
      }

      /* Copy and transpose A and B */
      for (i=0; i<2; i++) {
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb8:	e05e      	b.n	8005d78 <STMpil_initialize+0x358>
        for (j=0; j<2; j++)
 8005cba:	2300      	movs	r3, #0
 8005cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cbe:	e039      	b.n	8005d34 <STMpil_initialize+0x314>
 8005cc0:	9d495168 	.word	0x9d495168
 8005cc4:	40016680 	.word	0x40016680
 8005cc8:	95983fe0 	.word	0x95983fe0
 8005ccc:	3fee2904 	.word	0x3fee2904
 8005cd0:	00000000 	.word	0x00000000
 8005cd4:	40ac2000 	.word	0x40ac2000
 8005cd8:	506d7a3a 	.word	0x506d7a3a
 8005cdc:	3fcafe8c 	.word	0x3fcafe8c
 8005ce0:	20000700 	.word	0x20000700
 8005ce4:	20000010 	.word	0x20000010
 8005ce8:	200005b8 	.word	0x200005b8
 8005cec:	200005f8 	.word	0x200005f8
 8005cf0:	200006d8 	.word	0x200006d8
 8005cf4:	200006e0 	.word	0x200006e0
 8005cf8:	40590000 	.word	0x40590000
 8005cfc:	3ff00000 	.word	0x3ff00000
 8005d00:	c02e0000 	.word	0xc02e0000
 8005d04:	20000610 	.word	0x20000610
          As[i*2 + j] = (STMpil_P.StateSpace_AS_param[i + j*2]);
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	005a      	lsls	r2, r3, #1
 8005d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0e:	4413      	add	r3, r2
 8005d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d12:	0051      	lsls	r1, r2, #1
 8005d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d16:	440a      	add	r2, r1
 8005d18:	00d2      	lsls	r2, r2, #3
 8005d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1c:	4411      	add	r1, r2
 8005d1e:	4a6e      	ldr	r2, [pc, #440]	; (8005ed8 <STMpil_initialize+0x4b8>)
 8005d20:	3331      	adds	r3, #49	; 0x31
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<2; j++)
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	3301      	adds	r3, #1
 8005d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	dde6      	ble.n	8005d08 <STMpil_initialize+0x2e8>
        for (j=0; j<4; j++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d3e:	e015      	b.n	8005d6c <STMpil_initialize+0x34c>
          Bs[i*4 + j] = (STMpil_P.StateSpace_BS_param[i + j*2]);
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	005a      	lsls	r2, r3, #1
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	4413      	add	r3, r2
 8005d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d4a:	0091      	lsls	r1, r2, #2
 8005d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4e:	440a      	add	r2, r1
 8005d50:	00d2      	lsls	r2, r2, #3
 8005d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d54:	4411      	add	r1, r2
 8005d56:	4a60      	ldr	r2, [pc, #384]	; (8005ed8 <STMpil_initialize+0x4b8>)
 8005d58:	3335      	adds	r3, #53	; 0x35
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<4; j++)
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	3301      	adds	r3, #1
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	dde6      	ble.n	8005d40 <STMpil_initialize+0x320>
      for (i=0; i<2; i++) {
 8005d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d74:	3301      	adds	r3, #1
 8005d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	dd9d      	ble.n	8005cba <STMpil_initialize+0x29a>
      }

      /* Copy and transpose C */
      for (i=0; i<3; i++) {
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d82:	e020      	b.n	8005dc6 <STMpil_initialize+0x3a6>
        for (j=0; j<2; j++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d88:	e017      	b.n	8005dba <STMpil_initialize+0x39a>
          Cs[i*2 + j] = (STMpil_P.StateSpace_CS_param[i + j*3]);
 8005d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	441a      	add	r2, r3
 8005d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d94:	4413      	add	r3, r2
 8005d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d98:	0051      	lsls	r1, r2, #1
 8005d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d9c:	440a      	add	r2, r1
 8005d9e:	00d2      	lsls	r2, r2, #3
 8005da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005da2:	4411      	add	r1, r2
 8005da4:	4a4c      	ldr	r2, [pc, #304]	; (8005ed8 <STMpil_initialize+0x4b8>)
 8005da6:	333d      	adds	r3, #61	; 0x3d
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	4413      	add	r3, r2
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<2; j++)
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	3301      	adds	r3, #1
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	dde4      	ble.n	8005d8a <STMpil_initialize+0x36a>
      for (i=0; i<3; i++) {
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	dddb      	ble.n	8005d84 <STMpil_initialize+0x364>
      }

      /* Copy and transpose D */
      for (i=0; i<3; i++) {
 8005dcc:	2300      	movs	r3, #0
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd0:	e020      	b.n	8005e14 <STMpil_initialize+0x3f4>
        for (j=0; j<4; j++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dd6:	e017      	b.n	8005e08 <STMpil_initialize+0x3e8>
          Ds[i*4 + j] = (STMpil_P.StateSpace_DS_param[i + j*3]);
 8005dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dda:	4613      	mov	r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	441a      	add	r2, r3
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	4413      	add	r3, r2
 8005de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005de6:	0091      	lsls	r1, r2, #2
 8005de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dea:	440a      	add	r2, r1
 8005dec:	00d2      	lsls	r2, r2, #3
 8005dee:	6a39      	ldr	r1, [r7, #32]
 8005df0:	4411      	add	r1, r2
 8005df2:	4a39      	ldr	r2, [pc, #228]	; (8005ed8 <STMpil_initialize+0x4b8>)
 8005df4:	3343      	adds	r3, #67	; 0x43
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<4; j++)
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	3301      	adds	r3, #1
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	dde4      	ble.n	8005dd8 <STMpil_initialize+0x3b8>
      for (i=0; i<3; i++) {
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e10:	3301      	adds	r3, #1
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	dddb      	ble.n	8005dd2 <STMpil_initialize+0x3b2>
      }

      {
        /* Switches work vectors */
        int_T *switch_status = (int_T*) STMpil_DW.StateSpace_PWORK.SWITCH_STATUS;
 8005e1a:	4b30      	ldr	r3, [pc, #192]	; (8005edc <STMpil_initialize+0x4bc>)
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1e:	61bb      	str	r3, [r7, #24]
        int_T *gState = (int_T*)STMpil_DW.StateSpace_PWORK.G_STATE;
 8005e20:	4b2e      	ldr	r3, [pc, #184]	; (8005edc <STMpil_initialize+0x4bc>)
 8005e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e26:	617b      	str	r3, [r7, #20]
        real_T *yswitch = (real_T*)STMpil_DW.StateSpace_PWORK.Y_SWITCH;
 8005e28:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <STMpil_initialize+0x4bc>)
 8005e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e2e:	613b      	str	r3, [r7, #16]
        int_T *switchTypes = (int_T*)STMpil_DW.StateSpace_PWORK.SWITCH_TYPES;
 8005e30:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <STMpil_initialize+0x4bc>)
 8005e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e36:	60fb      	str	r3, [r7, #12]
        int_T *idxOutSw = (int_T*)STMpil_DW.StateSpace_PWORK.IDX_OUT_SW;
 8005e38:	4b28      	ldr	r3, [pc, #160]	; (8005edc <STMpil_initialize+0x4bc>)
 8005e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e3e:	60bb      	str	r3, [r7, #8]
        int_T *switch_status_init = (int_T*)
 8005e40:	4b26      	ldr	r3, [pc, #152]	; (8005edc <STMpil_initialize+0x4bc>)
 8005e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e44:	607b      	str	r3, [r7, #4]
          STMpil_DW.StateSpace_PWORK.SWITCH_STATUS_INIT;

        /* Initialize work vectors */
        switch_status[0] = 0;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
        switch_status_init[0] = 0;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
        gState[0] = (int_T) 0.0;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
        yswitch[0] = 1/0.001;
 8005e58:	6939      	ldr	r1, [r7, #16]
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <STMpil_initialize+0x4c0>)
 8005e60:	e9c1 2300 	strd	r2, r3, [r1]
        switchTypes[0] = (int_T)1.0;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
        idxOutSw[0] = ((int_T)0.0) - 1;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e70:	601a      	str	r2, [r3, #0]
        switch_status[1] = 0;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	3304      	adds	r3, #4
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
        switch_status_init[1] = 0;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
        gState[1] = (int_T) 0.0;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	3304      	adds	r3, #4
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
        yswitch[1] = 1/0.001;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f103 0108 	add.w	r1, r3, #8
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <STMpil_initialize+0x4c0>)
 8005e96:	e9c1 2300 	strd	r2, r3, [r1]
        switchTypes[1] = (int_T)7.0;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	601a      	str	r2, [r3, #0]
        idxOutSw[1] = ((int_T)0.0) - 1;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	601a      	str	r2, [r3, #0]
      }
    }

    /* SystemInitialize for Atomic SubSystem: '<S1>/MyPIL' */
    /* InitializeConditions for UnitDelay: '<S104>/Output' */
    STMpil_DW.Output_DSTATE = STMpil_P.Output_InitialCondition;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <STMpil_initialize+0x4b8>)
 8005eae:	f893 22f8 	ldrb.w	r2, [r3, #760]	; 0x2f8
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <STMpil_initialize+0x4bc>)
 8005eb4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    /* InitializeConditions for DiscreteIntegrator: '<S87>/Integrator' */
    STMpil_DW.Integrator_DSTATE = STMpil_P.PIDController4_InitialCondition;
 8005eb8:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <STMpil_initialize+0x4b8>)
 8005eba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005ebe:	4907      	ldr	r1, [pc, #28]	; (8005edc <STMpil_initialize+0x4bc>)
 8005ec0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    /* InitializeConditions for DiscreteIntegrator: '<S39>/Integrator' */
    STMpil_DW.Integrator_DSTATE_hwv3 = STMpil_P.PIDController3_InitialCondition;
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <STMpil_initialize+0x4b8>)
 8005ec6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eca:	4904      	ldr	r1, [pc, #16]	; (8005edc <STMpil_initialize+0x4bc>)
 8005ecc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

    /* End of SystemInitialize for SubSystem: '<S1>/MyPIL' */
    /* End of SystemInitialize for SubSystem: '<Root>/STMpil' */
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3740      	adds	r7, #64	; 0x40
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000010 	.word	0x20000010
 8005edc:	200005f8 	.word	0x200005f8
 8005ee0:	408f4000 	.word	0x408f4000

08005ee4 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005eea:	2340      	movs	r3, #64	; 0x40
 8005eec:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d10b      	bne.n	8005f18 <rtGetInf+0x34>
    inf = rtGetInfF();
 8005f00:	f000 f820 	bl	8005f44 <rtGetInfF>
 8005f04:	ee10 3a10 	vmov	r3, s0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fa fb1d 	bl	8000548 <__aeabi_f2d>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005f16:	e007      	b.n	8005f28 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8005f18:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <rtGetInf+0x5c>)
 8005f1a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8005f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f24:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8005f28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005f30:	eeb0 0a47 	vmov.f32	s0, s14
 8005f34:	eef0 0a67 	vmov.f32	s1, s15
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	7ff00000 	.word	0x7ff00000

08005f44 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8005f4a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8005f4e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	ee07 3a90 	vmov	s15, r3
}
 8005f56:	eeb0 0a67 	vmov.f32	s0, s15
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d10b      	bne.n	8005f98 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8005f80:	f000 f820 	bl	8005fc4 <rtGetMinusInfF>
 8005f84:	ee10 3a10 	vmov	r3, s0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa fadd 	bl	8000548 <__aeabi_f2d>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005f96:	e007      	b.n	8005fa8 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8005f98:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <rtGetMinusInf+0x5c>)
 8005f9a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8005fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 8005fa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fac:	ec43 2b17 	vmov	d7, r2, r3
}
 8005fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8005fb4:	eef0 0a67 	vmov.f32	s1, s15
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	fff00000 	.word	0xfff00000

08005fc4 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <rtGetMinusInfF+0x20>)
 8005fcc:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	ee07 3a90 	vmov	s15, r3
}
 8005fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	ff800000 	.word	0xff800000

08005fe8 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005fee:	2340      	movs	r3, #64	; 0x40
 8005ff0:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b20      	cmp	r3, #32
 8006002:	d10b      	bne.n	800601c <rtGetNaN+0x34>
    nan = rtGetNaNF();
 8006004:	f000 f820 	bl	8006048 <rtGetNaNF>
 8006008:	ee10 3a10 	vmov	r3, s0
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa fa9b 	bl	8000548 <__aeabi_f2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800601a:	e007      	b.n	800602c <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <rtGetNaN+0x5c>)
 800601e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006020:	2300      	movs	r3, #0
 8006022:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 8006024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006028:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800602c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006030:	ec43 2b17 	vmov	d7, r2, r3
}
 8006034:	eeb0 0a47 	vmov.f32	s0, s14
 8006038:	eef0 0a67 	vmov.f32	s1, s15
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	fff80000 	.word	0xfff80000

08006048 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <rtGetNaNF+0x24>)
 8006056:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	ee07 3a90 	vmov	s15, r3
}
 800605e:	eeb0 0a67 	vmov.f32	s0, s15
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	ffc00000 	.word	0xffc00000

08006070 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8006078:	f7ff ffb6 	bl	8005fe8 <rtGetNaN>
 800607c:	eeb0 7a40 	vmov.f32	s14, s0
 8006080:	eef0 7a60 	vmov.f32	s15, s1
 8006084:	4b16      	ldr	r3, [pc, #88]	; (80060e0 <rt_InitInfAndNaN+0x70>)
 8006086:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800608a:	f7ff ffdd 	bl	8006048 <rtGetNaNF>
 800608e:	eef0 7a40 	vmov.f32	s15, s0
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <rt_InitInfAndNaN+0x74>)
 8006094:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8006098:	f7ff ff24 	bl	8005ee4 <rtGetInf>
 800609c:	eeb0 7a40 	vmov.f32	s14, s0
 80060a0:	eef0 7a60 	vmov.f32	s15, s1
 80060a4:	4b10      	ldr	r3, [pc, #64]	; (80060e8 <rt_InitInfAndNaN+0x78>)
 80060a6:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 80060aa:	f7ff ff4b 	bl	8005f44 <rtGetInfF>
 80060ae:	eef0 7a40 	vmov.f32	s15, s0
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <rt_InitInfAndNaN+0x7c>)
 80060b4:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 80060b8:	f7ff ff54 	bl	8005f64 <rtGetMinusInf>
 80060bc:	eeb0 7a40 	vmov.f32	s14, s0
 80060c0:	eef0 7a60 	vmov.f32	s15, s1
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <rt_InitInfAndNaN+0x80>)
 80060c6:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 80060ca:	f7ff ff7b 	bl	8005fc4 <rtGetMinusInfF>
 80060ce:	eef0 7a40 	vmov.f32	s15, s0
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <rt_InitInfAndNaN+0x84>)
 80060d4:	edc3 7a00 	vstr	s15, [r3]
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000708 	.word	0x20000708
 80060e4:	20000718 	.word	0x20000718
 80060e8:	200006f8 	.word	0x200006f8
 80060ec:	20000710 	.word	0x20000710
 80060f0:	20000700 	.word	0x20000700
 80060f4:	20000714 	.word	0x20000714

080060f8 <calloc>:
 80060f8:	4b02      	ldr	r3, [pc, #8]	; (8006104 <calloc+0xc>)
 80060fa:	460a      	mov	r2, r1
 80060fc:	4601      	mov	r1, r0
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	f000 b842 	b.w	8006188 <_calloc_r>
 8006104:	20000310 	.word	0x20000310

08006108 <__errno>:
 8006108:	4b01      	ldr	r3, [pc, #4]	; (8006110 <__errno+0x8>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20000310 	.word	0x20000310

08006114 <__libc_init_array>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4d0d      	ldr	r5, [pc, #52]	; (800614c <__libc_init_array+0x38>)
 8006118:	4c0d      	ldr	r4, [pc, #52]	; (8006150 <__libc_init_array+0x3c>)
 800611a:	1b64      	subs	r4, r4, r5
 800611c:	10a4      	asrs	r4, r4, #2
 800611e:	2600      	movs	r6, #0
 8006120:	42a6      	cmp	r6, r4
 8006122:	d109      	bne.n	8006138 <__libc_init_array+0x24>
 8006124:	4d0b      	ldr	r5, [pc, #44]	; (8006154 <__libc_init_array+0x40>)
 8006126:	4c0c      	ldr	r4, [pc, #48]	; (8006158 <__libc_init_array+0x44>)
 8006128:	f002 ff3c 	bl	8008fa4 <_init>
 800612c:	1b64      	subs	r4, r4, r5
 800612e:	10a4      	asrs	r4, r4, #2
 8006130:	2600      	movs	r6, #0
 8006132:	42a6      	cmp	r6, r4
 8006134:	d105      	bne.n	8006142 <__libc_init_array+0x2e>
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f855 3b04 	ldr.w	r3, [r5], #4
 800613c:	4798      	blx	r3
 800613e:	3601      	adds	r6, #1
 8006140:	e7ee      	b.n	8006120 <__libc_init_array+0xc>
 8006142:	f855 3b04 	ldr.w	r3, [r5], #4
 8006146:	4798      	blx	r3
 8006148:	3601      	adds	r6, #1
 800614a:	e7f2      	b.n	8006132 <__libc_init_array+0x1e>
 800614c:	080093f0 	.word	0x080093f0
 8006150:	080093f0 	.word	0x080093f0
 8006154:	080093f0 	.word	0x080093f0
 8006158:	080093f4 	.word	0x080093f4

0800615c <memcpy>:
 800615c:	440a      	add	r2, r1
 800615e:	4291      	cmp	r1, r2
 8006160:	f100 33ff 	add.w	r3, r0, #4294967295
 8006164:	d100      	bne.n	8006168 <memcpy+0xc>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006172:	4291      	cmp	r1, r2
 8006174:	d1f9      	bne.n	800616a <memcpy+0xe>
 8006176:	bd10      	pop	{r4, pc}

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <_calloc_r>:
 8006188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800618a:	fba1 2402 	umull	r2, r4, r1, r2
 800618e:	b94c      	cbnz	r4, 80061a4 <_calloc_r+0x1c>
 8006190:	4611      	mov	r1, r2
 8006192:	9201      	str	r2, [sp, #4]
 8006194:	f000 f82e 	bl	80061f4 <_malloc_r>
 8006198:	9a01      	ldr	r2, [sp, #4]
 800619a:	4605      	mov	r5, r0
 800619c:	b930      	cbnz	r0, 80061ac <_calloc_r+0x24>
 800619e:	4628      	mov	r0, r5
 80061a0:	b003      	add	sp, #12
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	220c      	movs	r2, #12
 80061a6:	6002      	str	r2, [r0, #0]
 80061a8:	2500      	movs	r5, #0
 80061aa:	e7f8      	b.n	800619e <_calloc_r+0x16>
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7ff ffe3 	bl	8006178 <memset>
 80061b2:	e7f4      	b.n	800619e <_calloc_r+0x16>

080061b4 <sbrk_aligned>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4e0e      	ldr	r6, [pc, #56]	; (80061f0 <sbrk_aligned+0x3c>)
 80061b8:	460c      	mov	r4, r1
 80061ba:	6831      	ldr	r1, [r6, #0]
 80061bc:	4605      	mov	r5, r0
 80061be:	b911      	cbnz	r1, 80061c6 <sbrk_aligned+0x12>
 80061c0:	f000 fcf6 	bl	8006bb0 <_sbrk_r>
 80061c4:	6030      	str	r0, [r6, #0]
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 fcf1 	bl	8006bb0 <_sbrk_r>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d00a      	beq.n	80061e8 <sbrk_aligned+0x34>
 80061d2:	1cc4      	adds	r4, r0, #3
 80061d4:	f024 0403 	bic.w	r4, r4, #3
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d007      	beq.n	80061ec <sbrk_aligned+0x38>
 80061dc:	1a21      	subs	r1, r4, r0
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fce6 	bl	8006bb0 <_sbrk_r>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d101      	bne.n	80061ec <sbrk_aligned+0x38>
 80061e8:	f04f 34ff 	mov.w	r4, #4294967295
 80061ec:	4620      	mov	r0, r4
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	20000720 	.word	0x20000720

080061f4 <_malloc_r>:
 80061f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f8:	1ccd      	adds	r5, r1, #3
 80061fa:	f025 0503 	bic.w	r5, r5, #3
 80061fe:	3508      	adds	r5, #8
 8006200:	2d0c      	cmp	r5, #12
 8006202:	bf38      	it	cc
 8006204:	250c      	movcc	r5, #12
 8006206:	2d00      	cmp	r5, #0
 8006208:	4607      	mov	r7, r0
 800620a:	db01      	blt.n	8006210 <_malloc_r+0x1c>
 800620c:	42a9      	cmp	r1, r5
 800620e:	d905      	bls.n	800621c <_malloc_r+0x28>
 8006210:	230c      	movs	r3, #12
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	2600      	movs	r6, #0
 8006216:	4630      	mov	r0, r6
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	4e2e      	ldr	r6, [pc, #184]	; (80062d8 <_malloc_r+0xe4>)
 800621e:	f001 fb5d 	bl	80078dc <__malloc_lock>
 8006222:	6833      	ldr	r3, [r6, #0]
 8006224:	461c      	mov	r4, r3
 8006226:	bb34      	cbnz	r4, 8006276 <_malloc_r+0x82>
 8006228:	4629      	mov	r1, r5
 800622a:	4638      	mov	r0, r7
 800622c:	f7ff ffc2 	bl	80061b4 <sbrk_aligned>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	4604      	mov	r4, r0
 8006234:	d14d      	bne.n	80062d2 <_malloc_r+0xde>
 8006236:	6834      	ldr	r4, [r6, #0]
 8006238:	4626      	mov	r6, r4
 800623a:	2e00      	cmp	r6, #0
 800623c:	d140      	bne.n	80062c0 <_malloc_r+0xcc>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	4631      	mov	r1, r6
 8006242:	4638      	mov	r0, r7
 8006244:	eb04 0803 	add.w	r8, r4, r3
 8006248:	f000 fcb2 	bl	8006bb0 <_sbrk_r>
 800624c:	4580      	cmp	r8, r0
 800624e:	d13a      	bne.n	80062c6 <_malloc_r+0xd2>
 8006250:	6821      	ldr	r1, [r4, #0]
 8006252:	3503      	adds	r5, #3
 8006254:	1a6d      	subs	r5, r5, r1
 8006256:	f025 0503 	bic.w	r5, r5, #3
 800625a:	3508      	adds	r5, #8
 800625c:	2d0c      	cmp	r5, #12
 800625e:	bf38      	it	cc
 8006260:	250c      	movcc	r5, #12
 8006262:	4629      	mov	r1, r5
 8006264:	4638      	mov	r0, r7
 8006266:	f7ff ffa5 	bl	80061b4 <sbrk_aligned>
 800626a:	3001      	adds	r0, #1
 800626c:	d02b      	beq.n	80062c6 <_malloc_r+0xd2>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	442b      	add	r3, r5
 8006272:	6023      	str	r3, [r4, #0]
 8006274:	e00e      	b.n	8006294 <_malloc_r+0xa0>
 8006276:	6822      	ldr	r2, [r4, #0]
 8006278:	1b52      	subs	r2, r2, r5
 800627a:	d41e      	bmi.n	80062ba <_malloc_r+0xc6>
 800627c:	2a0b      	cmp	r2, #11
 800627e:	d916      	bls.n	80062ae <_malloc_r+0xba>
 8006280:	1961      	adds	r1, r4, r5
 8006282:	42a3      	cmp	r3, r4
 8006284:	6025      	str	r5, [r4, #0]
 8006286:	bf18      	it	ne
 8006288:	6059      	strne	r1, [r3, #4]
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	bf08      	it	eq
 800628e:	6031      	streq	r1, [r6, #0]
 8006290:	5162      	str	r2, [r4, r5]
 8006292:	604b      	str	r3, [r1, #4]
 8006294:	4638      	mov	r0, r7
 8006296:	f104 060b 	add.w	r6, r4, #11
 800629a:	f001 fb25 	bl	80078e8 <__malloc_unlock>
 800629e:	f026 0607 	bic.w	r6, r6, #7
 80062a2:	1d23      	adds	r3, r4, #4
 80062a4:	1af2      	subs	r2, r6, r3
 80062a6:	d0b6      	beq.n	8006216 <_malloc_r+0x22>
 80062a8:	1b9b      	subs	r3, r3, r6
 80062aa:	50a3      	str	r3, [r4, r2]
 80062ac:	e7b3      	b.n	8006216 <_malloc_r+0x22>
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	bf0c      	ite	eq
 80062b4:	6032      	streq	r2, [r6, #0]
 80062b6:	605a      	strne	r2, [r3, #4]
 80062b8:	e7ec      	b.n	8006294 <_malloc_r+0xa0>
 80062ba:	4623      	mov	r3, r4
 80062bc:	6864      	ldr	r4, [r4, #4]
 80062be:	e7b2      	b.n	8006226 <_malloc_r+0x32>
 80062c0:	4634      	mov	r4, r6
 80062c2:	6876      	ldr	r6, [r6, #4]
 80062c4:	e7b9      	b.n	800623a <_malloc_r+0x46>
 80062c6:	230c      	movs	r3, #12
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	4638      	mov	r0, r7
 80062cc:	f001 fb0c 	bl	80078e8 <__malloc_unlock>
 80062d0:	e7a1      	b.n	8006216 <_malloc_r+0x22>
 80062d2:	6025      	str	r5, [r4, #0]
 80062d4:	e7de      	b.n	8006294 <_malloc_r+0xa0>
 80062d6:	bf00      	nop
 80062d8:	2000071c 	.word	0x2000071c

080062dc <__cvt>:
 80062dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	ec55 4b10 	vmov	r4, r5, d0
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	460e      	mov	r6, r1
 80062e8:	4619      	mov	r1, r3
 80062ea:	462b      	mov	r3, r5
 80062ec:	bfbb      	ittet	lt
 80062ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062f2:	461d      	movlt	r5, r3
 80062f4:	2300      	movge	r3, #0
 80062f6:	232d      	movlt	r3, #45	; 0x2d
 80062f8:	700b      	strb	r3, [r1, #0]
 80062fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006300:	4691      	mov	r9, r2
 8006302:	f023 0820 	bic.w	r8, r3, #32
 8006306:	bfbc      	itt	lt
 8006308:	4622      	movlt	r2, r4
 800630a:	4614      	movlt	r4, r2
 800630c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006310:	d005      	beq.n	800631e <__cvt+0x42>
 8006312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006316:	d100      	bne.n	800631a <__cvt+0x3e>
 8006318:	3601      	adds	r6, #1
 800631a:	2102      	movs	r1, #2
 800631c:	e000      	b.n	8006320 <__cvt+0x44>
 800631e:	2103      	movs	r1, #3
 8006320:	ab03      	add	r3, sp, #12
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	ab02      	add	r3, sp, #8
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	ec45 4b10 	vmov	d0, r4, r5
 800632c:	4653      	mov	r3, sl
 800632e:	4632      	mov	r2, r6
 8006330:	f000 fcda 	bl	8006ce8 <_dtoa_r>
 8006334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006338:	4607      	mov	r7, r0
 800633a:	d102      	bne.n	8006342 <__cvt+0x66>
 800633c:	f019 0f01 	tst.w	r9, #1
 8006340:	d022      	beq.n	8006388 <__cvt+0xac>
 8006342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006346:	eb07 0906 	add.w	r9, r7, r6
 800634a:	d110      	bne.n	800636e <__cvt+0x92>
 800634c:	783b      	ldrb	r3, [r7, #0]
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	d10a      	bne.n	8006368 <__cvt+0x8c>
 8006352:	2200      	movs	r2, #0
 8006354:	2300      	movs	r3, #0
 8006356:	4620      	mov	r0, r4
 8006358:	4629      	mov	r1, r5
 800635a:	f7fa fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800635e:	b918      	cbnz	r0, 8006368 <__cvt+0x8c>
 8006360:	f1c6 0601 	rsb	r6, r6, #1
 8006364:	f8ca 6000 	str.w	r6, [sl]
 8006368:	f8da 3000 	ldr.w	r3, [sl]
 800636c:	4499      	add	r9, r3
 800636e:	2200      	movs	r2, #0
 8006370:	2300      	movs	r3, #0
 8006372:	4620      	mov	r0, r4
 8006374:	4629      	mov	r1, r5
 8006376:	f7fa fba7 	bl	8000ac8 <__aeabi_dcmpeq>
 800637a:	b108      	cbz	r0, 8006380 <__cvt+0xa4>
 800637c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006380:	2230      	movs	r2, #48	; 0x30
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	454b      	cmp	r3, r9
 8006386:	d307      	bcc.n	8006398 <__cvt+0xbc>
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800638c:	1bdb      	subs	r3, r3, r7
 800638e:	4638      	mov	r0, r7
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	b004      	add	sp, #16
 8006394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	9103      	str	r1, [sp, #12]
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	e7f0      	b.n	8006382 <__cvt+0xa6>

080063a0 <__exponent>:
 80063a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a2:	4603      	mov	r3, r0
 80063a4:	2900      	cmp	r1, #0
 80063a6:	bfb8      	it	lt
 80063a8:	4249      	neglt	r1, r1
 80063aa:	f803 2b02 	strb.w	r2, [r3], #2
 80063ae:	bfb4      	ite	lt
 80063b0:	222d      	movlt	r2, #45	; 0x2d
 80063b2:	222b      	movge	r2, #43	; 0x2b
 80063b4:	2909      	cmp	r1, #9
 80063b6:	7042      	strb	r2, [r0, #1]
 80063b8:	dd2a      	ble.n	8006410 <__exponent+0x70>
 80063ba:	f10d 0407 	add.w	r4, sp, #7
 80063be:	46a4      	mov	ip, r4
 80063c0:	270a      	movs	r7, #10
 80063c2:	46a6      	mov	lr, r4
 80063c4:	460a      	mov	r2, r1
 80063c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063ca:	fb07 1516 	mls	r5, r7, r6, r1
 80063ce:	3530      	adds	r5, #48	; 0x30
 80063d0:	2a63      	cmp	r2, #99	; 0x63
 80063d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80063d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063da:	4631      	mov	r1, r6
 80063dc:	dcf1      	bgt.n	80063c2 <__exponent+0x22>
 80063de:	3130      	adds	r1, #48	; 0x30
 80063e0:	f1ae 0502 	sub.w	r5, lr, #2
 80063e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80063e8:	1c44      	adds	r4, r0, #1
 80063ea:	4629      	mov	r1, r5
 80063ec:	4561      	cmp	r1, ip
 80063ee:	d30a      	bcc.n	8006406 <__exponent+0x66>
 80063f0:	f10d 0209 	add.w	r2, sp, #9
 80063f4:	eba2 020e 	sub.w	r2, r2, lr
 80063f8:	4565      	cmp	r5, ip
 80063fa:	bf88      	it	hi
 80063fc:	2200      	movhi	r2, #0
 80063fe:	4413      	add	r3, r2
 8006400:	1a18      	subs	r0, r3, r0
 8006402:	b003      	add	sp, #12
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800640a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800640e:	e7ed      	b.n	80063ec <__exponent+0x4c>
 8006410:	2330      	movs	r3, #48	; 0x30
 8006412:	3130      	adds	r1, #48	; 0x30
 8006414:	7083      	strb	r3, [r0, #2]
 8006416:	70c1      	strb	r1, [r0, #3]
 8006418:	1d03      	adds	r3, r0, #4
 800641a:	e7f1      	b.n	8006400 <__exponent+0x60>

0800641c <_printf_float>:
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	ed2d 8b02 	vpush	{d8}
 8006424:	b08d      	sub	sp, #52	; 0x34
 8006426:	460c      	mov	r4, r1
 8006428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800642c:	4616      	mov	r6, r2
 800642e:	461f      	mov	r7, r3
 8006430:	4605      	mov	r5, r0
 8006432:	f001 fa47 	bl	80078c4 <_localeconv_r>
 8006436:	f8d0 a000 	ldr.w	sl, [r0]
 800643a:	4650      	mov	r0, sl
 800643c:	f7f9 fec8 	bl	80001d0 <strlen>
 8006440:	2300      	movs	r3, #0
 8006442:	930a      	str	r3, [sp, #40]	; 0x28
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	9305      	str	r3, [sp, #20]
 8006448:	f8d8 3000 	ldr.w	r3, [r8]
 800644c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006450:	3307      	adds	r3, #7
 8006452:	f023 0307 	bic.w	r3, r3, #7
 8006456:	f103 0208 	add.w	r2, r3, #8
 800645a:	f8c8 2000 	str.w	r2, [r8]
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800646a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800646e:	9307      	str	r3, [sp, #28]
 8006470:	f8cd 8018 	str.w	r8, [sp, #24]
 8006474:	ee08 0a10 	vmov	s16, r0
 8006478:	4b9f      	ldr	r3, [pc, #636]	; (80066f8 <_printf_float+0x2dc>)
 800647a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	f7fa fb53 	bl	8000b2c <__aeabi_dcmpun>
 8006486:	bb88      	cbnz	r0, 80064ec <_printf_float+0xd0>
 8006488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800648c:	4b9a      	ldr	r3, [pc, #616]	; (80066f8 <_printf_float+0x2dc>)
 800648e:	f04f 32ff 	mov.w	r2, #4294967295
 8006492:	f7fa fb2d 	bl	8000af0 <__aeabi_dcmple>
 8006496:	bb48      	cbnz	r0, 80064ec <_printf_float+0xd0>
 8006498:	2200      	movs	r2, #0
 800649a:	2300      	movs	r3, #0
 800649c:	4640      	mov	r0, r8
 800649e:	4649      	mov	r1, r9
 80064a0:	f7fa fb1c 	bl	8000adc <__aeabi_dcmplt>
 80064a4:	b110      	cbz	r0, 80064ac <_printf_float+0x90>
 80064a6:	232d      	movs	r3, #45	; 0x2d
 80064a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ac:	4b93      	ldr	r3, [pc, #588]	; (80066fc <_printf_float+0x2e0>)
 80064ae:	4894      	ldr	r0, [pc, #592]	; (8006700 <_printf_float+0x2e4>)
 80064b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064b4:	bf94      	ite	ls
 80064b6:	4698      	movls	r8, r3
 80064b8:	4680      	movhi	r8, r0
 80064ba:	2303      	movs	r3, #3
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	f023 0204 	bic.w	r2, r3, #4
 80064c4:	6022      	str	r2, [r4, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	9700      	str	r7, [sp, #0]
 80064cc:	4633      	mov	r3, r6
 80064ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80064d0:	4621      	mov	r1, r4
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f9d8 	bl	8006888 <_printf_common>
 80064d8:	3001      	adds	r0, #1
 80064da:	f040 8090 	bne.w	80065fe <_printf_float+0x1e2>
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	b00d      	add	sp, #52	; 0x34
 80064e4:	ecbd 8b02 	vpop	{d8}
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7fa fb1a 	bl	8000b2c <__aeabi_dcmpun>
 80064f8:	b140      	cbz	r0, 800650c <_printf_float+0xf0>
 80064fa:	464b      	mov	r3, r9
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bfbc      	itt	lt
 8006500:	232d      	movlt	r3, #45	; 0x2d
 8006502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006506:	487f      	ldr	r0, [pc, #508]	; (8006704 <_printf_float+0x2e8>)
 8006508:	4b7f      	ldr	r3, [pc, #508]	; (8006708 <_printf_float+0x2ec>)
 800650a:	e7d1      	b.n	80064b0 <_printf_float+0x94>
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006512:	9206      	str	r2, [sp, #24]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	d13f      	bne.n	8006598 <_printf_float+0x17c>
 8006518:	2306      	movs	r3, #6
 800651a:	6063      	str	r3, [r4, #4]
 800651c:	9b05      	ldr	r3, [sp, #20]
 800651e:	6861      	ldr	r1, [r4, #4]
 8006520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006524:	2300      	movs	r3, #0
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	ab0a      	add	r3, sp, #40	; 0x28
 800652a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800652e:	ab09      	add	r3, sp, #36	; 0x24
 8006530:	ec49 8b10 	vmov	d0, r8, r9
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	6022      	str	r2, [r4, #0]
 8006538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800653c:	4628      	mov	r0, r5
 800653e:	f7ff fecd 	bl	80062dc <__cvt>
 8006542:	9b06      	ldr	r3, [sp, #24]
 8006544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006546:	2b47      	cmp	r3, #71	; 0x47
 8006548:	4680      	mov	r8, r0
 800654a:	d108      	bne.n	800655e <_printf_float+0x142>
 800654c:	1cc8      	adds	r0, r1, #3
 800654e:	db02      	blt.n	8006556 <_printf_float+0x13a>
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	4299      	cmp	r1, r3
 8006554:	dd41      	ble.n	80065da <_printf_float+0x1be>
 8006556:	f1ab 0b02 	sub.w	fp, fp, #2
 800655a:	fa5f fb8b 	uxtb.w	fp, fp
 800655e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006562:	d820      	bhi.n	80065a6 <_printf_float+0x18a>
 8006564:	3901      	subs	r1, #1
 8006566:	465a      	mov	r2, fp
 8006568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800656c:	9109      	str	r1, [sp, #36]	; 0x24
 800656e:	f7ff ff17 	bl	80063a0 <__exponent>
 8006572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006574:	1813      	adds	r3, r2, r0
 8006576:	2a01      	cmp	r2, #1
 8006578:	4681      	mov	r9, r0
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	dc02      	bgt.n	8006584 <_printf_float+0x168>
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	07d2      	lsls	r2, r2, #31
 8006582:	d501      	bpl.n	8006588 <_printf_float+0x16c>
 8006584:	3301      	adds	r3, #1
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800658c:	2b00      	cmp	r3, #0
 800658e:	d09c      	beq.n	80064ca <_printf_float+0xae>
 8006590:	232d      	movs	r3, #45	; 0x2d
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006596:	e798      	b.n	80064ca <_printf_float+0xae>
 8006598:	9a06      	ldr	r2, [sp, #24]
 800659a:	2a47      	cmp	r2, #71	; 0x47
 800659c:	d1be      	bne.n	800651c <_printf_float+0x100>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1bc      	bne.n	800651c <_printf_float+0x100>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e7b9      	b.n	800651a <_printf_float+0xfe>
 80065a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80065aa:	d118      	bne.n	80065de <_printf_float+0x1c2>
 80065ac:	2900      	cmp	r1, #0
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	dd0b      	ble.n	80065ca <_printf_float+0x1ae>
 80065b2:	6121      	str	r1, [r4, #16]
 80065b4:	b913      	cbnz	r3, 80065bc <_printf_float+0x1a0>
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	07d0      	lsls	r0, r2, #31
 80065ba:	d502      	bpl.n	80065c2 <_printf_float+0x1a6>
 80065bc:	3301      	adds	r3, #1
 80065be:	440b      	add	r3, r1
 80065c0:	6123      	str	r3, [r4, #16]
 80065c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065c4:	f04f 0900 	mov.w	r9, #0
 80065c8:	e7de      	b.n	8006588 <_printf_float+0x16c>
 80065ca:	b913      	cbnz	r3, 80065d2 <_printf_float+0x1b6>
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	07d2      	lsls	r2, r2, #31
 80065d0:	d501      	bpl.n	80065d6 <_printf_float+0x1ba>
 80065d2:	3302      	adds	r3, #2
 80065d4:	e7f4      	b.n	80065c0 <_printf_float+0x1a4>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e7f2      	b.n	80065c0 <_printf_float+0x1a4>
 80065da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e0:	4299      	cmp	r1, r3
 80065e2:	db05      	blt.n	80065f0 <_printf_float+0x1d4>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	6121      	str	r1, [r4, #16]
 80065e8:	07d8      	lsls	r0, r3, #31
 80065ea:	d5ea      	bpl.n	80065c2 <_printf_float+0x1a6>
 80065ec:	1c4b      	adds	r3, r1, #1
 80065ee:	e7e7      	b.n	80065c0 <_printf_float+0x1a4>
 80065f0:	2900      	cmp	r1, #0
 80065f2:	bfd4      	ite	le
 80065f4:	f1c1 0202 	rsble	r2, r1, #2
 80065f8:	2201      	movgt	r2, #1
 80065fa:	4413      	add	r3, r2
 80065fc:	e7e0      	b.n	80065c0 <_printf_float+0x1a4>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	055a      	lsls	r2, r3, #21
 8006602:	d407      	bmi.n	8006614 <_printf_float+0x1f8>
 8006604:	6923      	ldr	r3, [r4, #16]
 8006606:	4642      	mov	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	d12c      	bne.n	800666c <_printf_float+0x250>
 8006612:	e764      	b.n	80064de <_printf_float+0xc2>
 8006614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006618:	f240 80e0 	bls.w	80067dc <_printf_float+0x3c0>
 800661c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	f7fa fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8006628:	2800      	cmp	r0, #0
 800662a:	d034      	beq.n	8006696 <_printf_float+0x27a>
 800662c:	4a37      	ldr	r2, [pc, #220]	; (800670c <_printf_float+0x2f0>)
 800662e:	2301      	movs	r3, #1
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f af51 	beq.w	80064de <_printf_float+0xc2>
 800663c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006640:	429a      	cmp	r2, r3
 8006642:	db02      	blt.n	800664a <_printf_float+0x22e>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07d8      	lsls	r0, r3, #31
 8006648:	d510      	bpl.n	800666c <_printf_float+0x250>
 800664a:	ee18 3a10 	vmov	r3, s16
 800664e:	4652      	mov	r2, sl
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af41 	beq.w	80064de <_printf_float+0xc2>
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	f104 091a 	add.w	r9, r4, #26
 8006664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006666:	3b01      	subs	r3, #1
 8006668:	4543      	cmp	r3, r8
 800666a:	dc09      	bgt.n	8006680 <_printf_float+0x264>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	079b      	lsls	r3, r3, #30
 8006670:	f100 8105 	bmi.w	800687e <_printf_float+0x462>
 8006674:	68e0      	ldr	r0, [r4, #12]
 8006676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006678:	4298      	cmp	r0, r3
 800667a:	bfb8      	it	lt
 800667c:	4618      	movlt	r0, r3
 800667e:	e730      	b.n	80064e2 <_printf_float+0xc6>
 8006680:	2301      	movs	r3, #1
 8006682:	464a      	mov	r2, r9
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af27 	beq.w	80064de <_printf_float+0xc2>
 8006690:	f108 0801 	add.w	r8, r8, #1
 8006694:	e7e6      	b.n	8006664 <_printf_float+0x248>
 8006696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc39      	bgt.n	8006710 <_printf_float+0x2f4>
 800669c:	4a1b      	ldr	r2, [pc, #108]	; (800670c <_printf_float+0x2f0>)
 800669e:	2301      	movs	r3, #1
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af19 	beq.w	80064de <_printf_float+0xc2>
 80066ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b0:	4313      	orrs	r3, r2
 80066b2:	d102      	bne.n	80066ba <_printf_float+0x29e>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	07d9      	lsls	r1, r3, #31
 80066b8:	d5d8      	bpl.n	800666c <_printf_float+0x250>
 80066ba:	ee18 3a10 	vmov	r3, s16
 80066be:	4652      	mov	r2, sl
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f af09 	beq.w	80064de <_printf_float+0xc2>
 80066cc:	f04f 0900 	mov.w	r9, #0
 80066d0:	f104 0a1a 	add.w	sl, r4, #26
 80066d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d6:	425b      	negs	r3, r3
 80066d8:	454b      	cmp	r3, r9
 80066da:	dc01      	bgt.n	80066e0 <_printf_float+0x2c4>
 80066dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066de:	e792      	b.n	8006606 <_printf_float+0x1ea>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4652      	mov	r2, sl
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	f43f aef7 	beq.w	80064de <_printf_float+0xc2>
 80066f0:	f109 0901 	add.w	r9, r9, #1
 80066f4:	e7ee      	b.n	80066d4 <_printf_float+0x2b8>
 80066f6:	bf00      	nop
 80066f8:	7fefffff 	.word	0x7fefffff
 80066fc:	08008fdc 	.word	0x08008fdc
 8006700:	08008fe0 	.word	0x08008fe0
 8006704:	08008fe8 	.word	0x08008fe8
 8006708:	08008fe4 	.word	0x08008fe4
 800670c:	08008fec 	.word	0x08008fec
 8006710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006714:	429a      	cmp	r2, r3
 8006716:	bfa8      	it	ge
 8006718:	461a      	movge	r2, r3
 800671a:	2a00      	cmp	r2, #0
 800671c:	4691      	mov	r9, r2
 800671e:	dc37      	bgt.n	8006790 <_printf_float+0x374>
 8006720:	f04f 0b00 	mov.w	fp, #0
 8006724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006728:	f104 021a 	add.w	r2, r4, #26
 800672c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800672e:	9305      	str	r3, [sp, #20]
 8006730:	eba3 0309 	sub.w	r3, r3, r9
 8006734:	455b      	cmp	r3, fp
 8006736:	dc33      	bgt.n	80067a0 <_printf_float+0x384>
 8006738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800673c:	429a      	cmp	r2, r3
 800673e:	db3b      	blt.n	80067b8 <_printf_float+0x39c>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07da      	lsls	r2, r3, #31
 8006744:	d438      	bmi.n	80067b8 <_printf_float+0x39c>
 8006746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006748:	9a05      	ldr	r2, [sp, #20]
 800674a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800674c:	1a9a      	subs	r2, r3, r2
 800674e:	eba3 0901 	sub.w	r9, r3, r1
 8006752:	4591      	cmp	r9, r2
 8006754:	bfa8      	it	ge
 8006756:	4691      	movge	r9, r2
 8006758:	f1b9 0f00 	cmp.w	r9, #0
 800675c:	dc35      	bgt.n	80067ca <_printf_float+0x3ae>
 800675e:	f04f 0800 	mov.w	r8, #0
 8006762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006766:	f104 0a1a 	add.w	sl, r4, #26
 800676a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800676e:	1a9b      	subs	r3, r3, r2
 8006770:	eba3 0309 	sub.w	r3, r3, r9
 8006774:	4543      	cmp	r3, r8
 8006776:	f77f af79 	ble.w	800666c <_printf_float+0x250>
 800677a:	2301      	movs	r3, #1
 800677c:	4652      	mov	r2, sl
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	f43f aeaa 	beq.w	80064de <_printf_float+0xc2>
 800678a:	f108 0801 	add.w	r8, r8, #1
 800678e:	e7ec      	b.n	800676a <_printf_float+0x34e>
 8006790:	4613      	mov	r3, r2
 8006792:	4631      	mov	r1, r6
 8006794:	4642      	mov	r2, r8
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	d1c0      	bne.n	8006720 <_printf_float+0x304>
 800679e:	e69e      	b.n	80064de <_printf_float+0xc2>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4631      	mov	r1, r6
 80067a4:	4628      	mov	r0, r5
 80067a6:	9205      	str	r2, [sp, #20]
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f ae97 	beq.w	80064de <_printf_float+0xc2>
 80067b0:	9a05      	ldr	r2, [sp, #20]
 80067b2:	f10b 0b01 	add.w	fp, fp, #1
 80067b6:	e7b9      	b.n	800672c <_printf_float+0x310>
 80067b8:	ee18 3a10 	vmov	r3, s16
 80067bc:	4652      	mov	r2, sl
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	d1be      	bne.n	8006746 <_printf_float+0x32a>
 80067c8:	e689      	b.n	80064de <_printf_float+0xc2>
 80067ca:	9a05      	ldr	r2, [sp, #20]
 80067cc:	464b      	mov	r3, r9
 80067ce:	4442      	add	r2, r8
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	d1c1      	bne.n	800675e <_printf_float+0x342>
 80067da:	e680      	b.n	80064de <_printf_float+0xc2>
 80067dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067de:	2a01      	cmp	r2, #1
 80067e0:	dc01      	bgt.n	80067e6 <_printf_float+0x3ca>
 80067e2:	07db      	lsls	r3, r3, #31
 80067e4:	d538      	bpl.n	8006858 <_printf_float+0x43c>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4642      	mov	r2, r8
 80067ea:	4631      	mov	r1, r6
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b8      	blx	r7
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f ae74 	beq.w	80064de <_printf_float+0xc2>
 80067f6:	ee18 3a10 	vmov	r3, s16
 80067fa:	4652      	mov	r2, sl
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f ae6b 	beq.w	80064de <_printf_float+0xc2>
 8006808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800680c:	2200      	movs	r2, #0
 800680e:	2300      	movs	r3, #0
 8006810:	f7fa f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006814:	b9d8      	cbnz	r0, 800684e <_printf_float+0x432>
 8006816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006818:	f108 0201 	add.w	r2, r8, #1
 800681c:	3b01      	subs	r3, #1
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	d10e      	bne.n	8006846 <_printf_float+0x42a>
 8006828:	e659      	b.n	80064de <_printf_float+0xc2>
 800682a:	2301      	movs	r3, #1
 800682c:	4652      	mov	r2, sl
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f ae52 	beq.w	80064de <_printf_float+0xc2>
 800683a:	f108 0801 	add.w	r8, r8, #1
 800683e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006840:	3b01      	subs	r3, #1
 8006842:	4543      	cmp	r3, r8
 8006844:	dcf1      	bgt.n	800682a <_printf_float+0x40e>
 8006846:	464b      	mov	r3, r9
 8006848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800684c:	e6dc      	b.n	8006608 <_printf_float+0x1ec>
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	f104 0a1a 	add.w	sl, r4, #26
 8006856:	e7f2      	b.n	800683e <_printf_float+0x422>
 8006858:	2301      	movs	r3, #1
 800685a:	4642      	mov	r2, r8
 800685c:	e7df      	b.n	800681e <_printf_float+0x402>
 800685e:	2301      	movs	r3, #1
 8006860:	464a      	mov	r2, r9
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	f43f ae38 	beq.w	80064de <_printf_float+0xc2>
 800686e:	f108 0801 	add.w	r8, r8, #1
 8006872:	68e3      	ldr	r3, [r4, #12]
 8006874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006876:	1a5b      	subs	r3, r3, r1
 8006878:	4543      	cmp	r3, r8
 800687a:	dcf0      	bgt.n	800685e <_printf_float+0x442>
 800687c:	e6fa      	b.n	8006674 <_printf_float+0x258>
 800687e:	f04f 0800 	mov.w	r8, #0
 8006882:	f104 0919 	add.w	r9, r4, #25
 8006886:	e7f4      	b.n	8006872 <_printf_float+0x456>

08006888 <_printf_common>:
 8006888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800688c:	4616      	mov	r6, r2
 800688e:	4699      	mov	r9, r3
 8006890:	688a      	ldr	r2, [r1, #8]
 8006892:	690b      	ldr	r3, [r1, #16]
 8006894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006898:	4293      	cmp	r3, r2
 800689a:	bfb8      	it	lt
 800689c:	4613      	movlt	r3, r2
 800689e:	6033      	str	r3, [r6, #0]
 80068a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068a4:	4607      	mov	r7, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	b10a      	cbz	r2, 80068ae <_printf_common+0x26>
 80068aa:	3301      	adds	r3, #1
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	0699      	lsls	r1, r3, #26
 80068b2:	bf42      	ittt	mi
 80068b4:	6833      	ldrmi	r3, [r6, #0]
 80068b6:	3302      	addmi	r3, #2
 80068b8:	6033      	strmi	r3, [r6, #0]
 80068ba:	6825      	ldr	r5, [r4, #0]
 80068bc:	f015 0506 	ands.w	r5, r5, #6
 80068c0:	d106      	bne.n	80068d0 <_printf_common+0x48>
 80068c2:	f104 0a19 	add.w	sl, r4, #25
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	6832      	ldr	r2, [r6, #0]
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	dc26      	bgt.n	800691e <_printf_common+0x96>
 80068d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068d4:	1e13      	subs	r3, r2, #0
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	bf18      	it	ne
 80068da:	2301      	movne	r3, #1
 80068dc:	0692      	lsls	r2, r2, #26
 80068de:	d42b      	bmi.n	8006938 <_printf_common+0xb0>
 80068e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068e4:	4649      	mov	r1, r9
 80068e6:	4638      	mov	r0, r7
 80068e8:	47c0      	blx	r8
 80068ea:	3001      	adds	r0, #1
 80068ec:	d01e      	beq.n	800692c <_printf_common+0xa4>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	68e5      	ldr	r5, [r4, #12]
 80068f2:	6832      	ldr	r2, [r6, #0]
 80068f4:	f003 0306 	and.w	r3, r3, #6
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	bf08      	it	eq
 80068fc:	1aad      	subeq	r5, r5, r2
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	bf0c      	ite	eq
 8006904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006908:	2500      	movne	r5, #0
 800690a:	4293      	cmp	r3, r2
 800690c:	bfc4      	itt	gt
 800690e:	1a9b      	subgt	r3, r3, r2
 8006910:	18ed      	addgt	r5, r5, r3
 8006912:	2600      	movs	r6, #0
 8006914:	341a      	adds	r4, #26
 8006916:	42b5      	cmp	r5, r6
 8006918:	d11a      	bne.n	8006950 <_printf_common+0xc8>
 800691a:	2000      	movs	r0, #0
 800691c:	e008      	b.n	8006930 <_printf_common+0xa8>
 800691e:	2301      	movs	r3, #1
 8006920:	4652      	mov	r2, sl
 8006922:	4649      	mov	r1, r9
 8006924:	4638      	mov	r0, r7
 8006926:	47c0      	blx	r8
 8006928:	3001      	adds	r0, #1
 800692a:	d103      	bne.n	8006934 <_printf_common+0xac>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006934:	3501      	adds	r5, #1
 8006936:	e7c6      	b.n	80068c6 <_printf_common+0x3e>
 8006938:	18e1      	adds	r1, r4, r3
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	2030      	movs	r0, #48	; 0x30
 800693e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006942:	4422      	add	r2, r4
 8006944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800694c:	3302      	adds	r3, #2
 800694e:	e7c7      	b.n	80068e0 <_printf_common+0x58>
 8006950:	2301      	movs	r3, #1
 8006952:	4622      	mov	r2, r4
 8006954:	4649      	mov	r1, r9
 8006956:	4638      	mov	r0, r7
 8006958:	47c0      	blx	r8
 800695a:	3001      	adds	r0, #1
 800695c:	d0e6      	beq.n	800692c <_printf_common+0xa4>
 800695e:	3601      	adds	r6, #1
 8006960:	e7d9      	b.n	8006916 <_printf_common+0x8e>
	...

08006964 <_printf_i>:
 8006964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	7e0f      	ldrb	r7, [r1, #24]
 800696a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800696c:	2f78      	cmp	r7, #120	; 0x78
 800696e:	4691      	mov	r9, r2
 8006970:	4680      	mov	r8, r0
 8006972:	460c      	mov	r4, r1
 8006974:	469a      	mov	sl, r3
 8006976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800697a:	d807      	bhi.n	800698c <_printf_i+0x28>
 800697c:	2f62      	cmp	r7, #98	; 0x62
 800697e:	d80a      	bhi.n	8006996 <_printf_i+0x32>
 8006980:	2f00      	cmp	r7, #0
 8006982:	f000 80d8 	beq.w	8006b36 <_printf_i+0x1d2>
 8006986:	2f58      	cmp	r7, #88	; 0x58
 8006988:	f000 80a3 	beq.w	8006ad2 <_printf_i+0x16e>
 800698c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006994:	e03a      	b.n	8006a0c <_printf_i+0xa8>
 8006996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800699a:	2b15      	cmp	r3, #21
 800699c:	d8f6      	bhi.n	800698c <_printf_i+0x28>
 800699e:	a101      	add	r1, pc, #4	; (adr r1, 80069a4 <_printf_i+0x40>)
 80069a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a4:	080069fd 	.word	0x080069fd
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	0800698d 	.word	0x0800698d
 80069b0:	0800698d 	.word	0x0800698d
 80069b4:	0800698d 	.word	0x0800698d
 80069b8:	0800698d 	.word	0x0800698d
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	0800698d 	.word	0x0800698d
 80069c4:	0800698d 	.word	0x0800698d
 80069c8:	0800698d 	.word	0x0800698d
 80069cc:	0800698d 	.word	0x0800698d
 80069d0:	08006b1d 	.word	0x08006b1d
 80069d4:	08006a41 	.word	0x08006a41
 80069d8:	08006aff 	.word	0x08006aff
 80069dc:	0800698d 	.word	0x0800698d
 80069e0:	0800698d 	.word	0x0800698d
 80069e4:	08006b3f 	.word	0x08006b3f
 80069e8:	0800698d 	.word	0x0800698d
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	0800698d 	.word	0x0800698d
 80069f4:	0800698d 	.word	0x0800698d
 80069f8:	08006b07 	.word	0x08006b07
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	602a      	str	r2, [r5, #0]
 8006a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0a3      	b.n	8006b58 <_printf_i+0x1f4>
 8006a10:	6820      	ldr	r0, [r4, #0]
 8006a12:	6829      	ldr	r1, [r5, #0]
 8006a14:	0606      	lsls	r6, r0, #24
 8006a16:	f101 0304 	add.w	r3, r1, #4
 8006a1a:	d50a      	bpl.n	8006a32 <_printf_i+0xce>
 8006a1c:	680e      	ldr	r6, [r1, #0]
 8006a1e:	602b      	str	r3, [r5, #0]
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	da03      	bge.n	8006a2c <_printf_i+0xc8>
 8006a24:	232d      	movs	r3, #45	; 0x2d
 8006a26:	4276      	negs	r6, r6
 8006a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a2c:	485e      	ldr	r0, [pc, #376]	; (8006ba8 <_printf_i+0x244>)
 8006a2e:	230a      	movs	r3, #10
 8006a30:	e019      	b.n	8006a66 <_printf_i+0x102>
 8006a32:	680e      	ldr	r6, [r1, #0]
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a3a:	bf18      	it	ne
 8006a3c:	b236      	sxthne	r6, r6
 8006a3e:	e7ef      	b.n	8006a20 <_printf_i+0xbc>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	1d19      	adds	r1, r3, #4
 8006a46:	6029      	str	r1, [r5, #0]
 8006a48:	0601      	lsls	r1, r0, #24
 8006a4a:	d501      	bpl.n	8006a50 <_printf_i+0xec>
 8006a4c:	681e      	ldr	r6, [r3, #0]
 8006a4e:	e002      	b.n	8006a56 <_printf_i+0xf2>
 8006a50:	0646      	lsls	r6, r0, #25
 8006a52:	d5fb      	bpl.n	8006a4c <_printf_i+0xe8>
 8006a54:	881e      	ldrh	r6, [r3, #0]
 8006a56:	4854      	ldr	r0, [pc, #336]	; (8006ba8 <_printf_i+0x244>)
 8006a58:	2f6f      	cmp	r7, #111	; 0x6f
 8006a5a:	bf0c      	ite	eq
 8006a5c:	2308      	moveq	r3, #8
 8006a5e:	230a      	movne	r3, #10
 8006a60:	2100      	movs	r1, #0
 8006a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a66:	6865      	ldr	r5, [r4, #4]
 8006a68:	60a5      	str	r5, [r4, #8]
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	bfa2      	ittt	ge
 8006a6e:	6821      	ldrge	r1, [r4, #0]
 8006a70:	f021 0104 	bicge.w	r1, r1, #4
 8006a74:	6021      	strge	r1, [r4, #0]
 8006a76:	b90e      	cbnz	r6, 8006a7c <_printf_i+0x118>
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	d04d      	beq.n	8006b18 <_printf_i+0x1b4>
 8006a7c:	4615      	mov	r5, r2
 8006a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a82:	fb03 6711 	mls	r7, r3, r1, r6
 8006a86:	5dc7      	ldrb	r7, [r0, r7]
 8006a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a8c:	4637      	mov	r7, r6
 8006a8e:	42bb      	cmp	r3, r7
 8006a90:	460e      	mov	r6, r1
 8006a92:	d9f4      	bls.n	8006a7e <_printf_i+0x11a>
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d10b      	bne.n	8006ab0 <_printf_i+0x14c>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	07de      	lsls	r6, r3, #31
 8006a9c:	d508      	bpl.n	8006ab0 <_printf_i+0x14c>
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	6861      	ldr	r1, [r4, #4]
 8006aa2:	4299      	cmp	r1, r3
 8006aa4:	bfde      	ittt	le
 8006aa6:	2330      	movle	r3, #48	; 0x30
 8006aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ab0:	1b52      	subs	r2, r2, r5
 8006ab2:	6122      	str	r2, [r4, #16]
 8006ab4:	f8cd a000 	str.w	sl, [sp]
 8006ab8:	464b      	mov	r3, r9
 8006aba:	aa03      	add	r2, sp, #12
 8006abc:	4621      	mov	r1, r4
 8006abe:	4640      	mov	r0, r8
 8006ac0:	f7ff fee2 	bl	8006888 <_printf_common>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d14c      	bne.n	8006b62 <_printf_i+0x1fe>
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	b004      	add	sp, #16
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	4835      	ldr	r0, [pc, #212]	; (8006ba8 <_printf_i+0x244>)
 8006ad4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ad8:	6829      	ldr	r1, [r5, #0]
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ae0:	6029      	str	r1, [r5, #0]
 8006ae2:	061d      	lsls	r5, r3, #24
 8006ae4:	d514      	bpl.n	8006b10 <_printf_i+0x1ac>
 8006ae6:	07df      	lsls	r7, r3, #31
 8006ae8:	bf44      	itt	mi
 8006aea:	f043 0320 	orrmi.w	r3, r3, #32
 8006aee:	6023      	strmi	r3, [r4, #0]
 8006af0:	b91e      	cbnz	r6, 8006afa <_printf_i+0x196>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	f023 0320 	bic.w	r3, r3, #32
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	2310      	movs	r3, #16
 8006afc:	e7b0      	b.n	8006a60 <_printf_i+0xfc>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	f043 0320 	orr.w	r3, r3, #32
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	2378      	movs	r3, #120	; 0x78
 8006b08:	4828      	ldr	r0, [pc, #160]	; (8006bac <_printf_i+0x248>)
 8006b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b0e:	e7e3      	b.n	8006ad8 <_printf_i+0x174>
 8006b10:	0659      	lsls	r1, r3, #25
 8006b12:	bf48      	it	mi
 8006b14:	b2b6      	uxthmi	r6, r6
 8006b16:	e7e6      	b.n	8006ae6 <_printf_i+0x182>
 8006b18:	4615      	mov	r5, r2
 8006b1a:	e7bb      	b.n	8006a94 <_printf_i+0x130>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	6826      	ldr	r6, [r4, #0]
 8006b20:	6961      	ldr	r1, [r4, #20]
 8006b22:	1d18      	adds	r0, r3, #4
 8006b24:	6028      	str	r0, [r5, #0]
 8006b26:	0635      	lsls	r5, r6, #24
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	d501      	bpl.n	8006b30 <_printf_i+0x1cc>
 8006b2c:	6019      	str	r1, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <_printf_i+0x1d2>
 8006b30:	0670      	lsls	r0, r6, #25
 8006b32:	d5fb      	bpl.n	8006b2c <_printf_i+0x1c8>
 8006b34:	8019      	strh	r1, [r3, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	4615      	mov	r5, r2
 8006b3c:	e7ba      	b.n	8006ab4 <_printf_i+0x150>
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	1d1a      	adds	r2, r3, #4
 8006b42:	602a      	str	r2, [r5, #0]
 8006b44:	681d      	ldr	r5, [r3, #0]
 8006b46:	6862      	ldr	r2, [r4, #4]
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f7f9 fb48 	bl	80001e0 <memchr>
 8006b50:	b108      	cbz	r0, 8006b56 <_printf_i+0x1f2>
 8006b52:	1b40      	subs	r0, r0, r5
 8006b54:	6060      	str	r0, [r4, #4]
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	6123      	str	r3, [r4, #16]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b60:	e7a8      	b.n	8006ab4 <_printf_i+0x150>
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4649      	mov	r1, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	47d0      	blx	sl
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d0ab      	beq.n	8006ac8 <_printf_i+0x164>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	079b      	lsls	r3, r3, #30
 8006b74:	d413      	bmi.n	8006b9e <_printf_i+0x23a>
 8006b76:	68e0      	ldr	r0, [r4, #12]
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	4298      	cmp	r0, r3
 8006b7c:	bfb8      	it	lt
 8006b7e:	4618      	movlt	r0, r3
 8006b80:	e7a4      	b.n	8006acc <_printf_i+0x168>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4632      	mov	r2, r6
 8006b86:	4649      	mov	r1, r9
 8006b88:	4640      	mov	r0, r8
 8006b8a:	47d0      	blx	sl
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d09b      	beq.n	8006ac8 <_printf_i+0x164>
 8006b90:	3501      	adds	r5, #1
 8006b92:	68e3      	ldr	r3, [r4, #12]
 8006b94:	9903      	ldr	r1, [sp, #12]
 8006b96:	1a5b      	subs	r3, r3, r1
 8006b98:	42ab      	cmp	r3, r5
 8006b9a:	dcf2      	bgt.n	8006b82 <_printf_i+0x21e>
 8006b9c:	e7eb      	b.n	8006b76 <_printf_i+0x212>
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	f104 0619 	add.w	r6, r4, #25
 8006ba4:	e7f5      	b.n	8006b92 <_printf_i+0x22e>
 8006ba6:	bf00      	nop
 8006ba8:	08008fee 	.word	0x08008fee
 8006bac:	08008fff 	.word	0x08008fff

08006bb0 <_sbrk_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d06      	ldr	r5, [pc, #24]	; (8006bcc <_sbrk_r+0x1c>)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	f7fa fd04 	bl	80015c8 <_sbrk>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_sbrk_r+0x1a>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_sbrk_r+0x1a>
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	20000724 	.word	0x20000724

08006bd0 <quorem>:
 8006bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	6903      	ldr	r3, [r0, #16]
 8006bd6:	690c      	ldr	r4, [r1, #16]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	4607      	mov	r7, r0
 8006bdc:	f2c0 8081 	blt.w	8006ce2 <quorem+0x112>
 8006be0:	3c01      	subs	r4, #1
 8006be2:	f101 0814 	add.w	r8, r1, #20
 8006be6:	f100 0514 	add.w	r5, r0, #20
 8006bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c04:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c08:	d331      	bcc.n	8006c6e <quorem+0x9e>
 8006c0a:	f04f 0e00 	mov.w	lr, #0
 8006c0e:	4640      	mov	r0, r8
 8006c10:	46ac      	mov	ip, r5
 8006c12:	46f2      	mov	sl, lr
 8006c14:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c18:	b293      	uxth	r3, r2
 8006c1a:	fb06 e303 	mla	r3, r6, r3, lr
 8006c1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	ebaa 0303 	sub.w	r3, sl, r3
 8006c28:	f8dc a000 	ldr.w	sl, [ip]
 8006c2c:	0c12      	lsrs	r2, r2, #16
 8006c2e:	fa13 f38a 	uxtah	r3, r3, sl
 8006c32:	fb06 e202 	mla	r2, r6, r2, lr
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	9b00      	ldr	r3, [sp, #0]
 8006c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c3e:	b292      	uxth	r2, r2
 8006c40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c48:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c4c:	4581      	cmp	r9, r0
 8006c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c52:	f84c 3b04 	str.w	r3, [ip], #4
 8006c56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c5a:	d2db      	bcs.n	8006c14 <quorem+0x44>
 8006c5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c60:	b92b      	cbnz	r3, 8006c6e <quorem+0x9e>
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	3b04      	subs	r3, #4
 8006c66:	429d      	cmp	r5, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	d32e      	bcc.n	8006cca <quorem+0xfa>
 8006c6c:	613c      	str	r4, [r7, #16]
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f001 f8c2 	bl	8007df8 <__mcmp>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	db24      	blt.n	8006cc2 <quorem+0xf2>
 8006c78:	3601      	adds	r6, #1
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f04f 0c00 	mov.w	ip, #0
 8006c80:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c84:	f8d0 e000 	ldr.w	lr, [r0]
 8006c88:	b293      	uxth	r3, r2
 8006c8a:	ebac 0303 	sub.w	r3, ip, r3
 8006c8e:	0c12      	lsrs	r2, r2, #16
 8006c90:	fa13 f38e 	uxtah	r3, r3, lr
 8006c94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ca2:	45c1      	cmp	r9, r8
 8006ca4:	f840 3b04 	str.w	r3, [r0], #4
 8006ca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cac:	d2e8      	bcs.n	8006c80 <quorem+0xb0>
 8006cae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cb6:	b922      	cbnz	r2, 8006cc2 <quorem+0xf2>
 8006cb8:	3b04      	subs	r3, #4
 8006cba:	429d      	cmp	r5, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	d30a      	bcc.n	8006cd6 <quorem+0x106>
 8006cc0:	613c      	str	r4, [r7, #16]
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	b003      	add	sp, #12
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	3b04      	subs	r3, #4
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	d1cc      	bne.n	8006c6c <quorem+0x9c>
 8006cd2:	3c01      	subs	r4, #1
 8006cd4:	e7c7      	b.n	8006c66 <quorem+0x96>
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <quorem+0xf0>
 8006cde:	3c01      	subs	r4, #1
 8006ce0:	e7eb      	b.n	8006cba <quorem+0xea>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e7ee      	b.n	8006cc4 <quorem+0xf4>
	...

08006ce8 <_dtoa_r>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	ed2d 8b04 	vpush	{d8-d9}
 8006cf0:	ec57 6b10 	vmov	r6, r7, d0
 8006cf4:	b093      	sub	sp, #76	; 0x4c
 8006cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006cfc:	9106      	str	r1, [sp, #24]
 8006cfe:	ee10 aa10 	vmov	sl, s0
 8006d02:	4604      	mov	r4, r0
 8006d04:	9209      	str	r2, [sp, #36]	; 0x24
 8006d06:	930c      	str	r3, [sp, #48]	; 0x30
 8006d08:	46bb      	mov	fp, r7
 8006d0a:	b975      	cbnz	r5, 8006d2a <_dtoa_r+0x42>
 8006d0c:	2010      	movs	r0, #16
 8006d0e:	f000 fddd 	bl	80078cc <malloc>
 8006d12:	4602      	mov	r2, r0
 8006d14:	6260      	str	r0, [r4, #36]	; 0x24
 8006d16:	b920      	cbnz	r0, 8006d22 <_dtoa_r+0x3a>
 8006d18:	4ba7      	ldr	r3, [pc, #668]	; (8006fb8 <_dtoa_r+0x2d0>)
 8006d1a:	21ea      	movs	r1, #234	; 0xea
 8006d1c:	48a7      	ldr	r0, [pc, #668]	; (8006fbc <_dtoa_r+0x2d4>)
 8006d1e:	f001 f9b9 	bl	8008094 <__assert_func>
 8006d22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d26:	6005      	str	r5, [r0, #0]
 8006d28:	60c5      	str	r5, [r0, #12]
 8006d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	b151      	cbz	r1, 8006d46 <_dtoa_r+0x5e>
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	604a      	str	r2, [r1, #4]
 8006d34:	2301      	movs	r3, #1
 8006d36:	4093      	lsls	r3, r2
 8006d38:	608b      	str	r3, [r1, #8]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fe1a 	bl	8007974 <_Bfree>
 8006d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	1e3b      	subs	r3, r7, #0
 8006d48:	bfaa      	itet	ge
 8006d4a:	2300      	movge	r3, #0
 8006d4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d50:	f8c8 3000 	strge.w	r3, [r8]
 8006d54:	4b9a      	ldr	r3, [pc, #616]	; (8006fc0 <_dtoa_r+0x2d8>)
 8006d56:	bfbc      	itt	lt
 8006d58:	2201      	movlt	r2, #1
 8006d5a:	f8c8 2000 	strlt.w	r2, [r8]
 8006d5e:	ea33 030b 	bics.w	r3, r3, fp
 8006d62:	d11b      	bne.n	8006d9c <_dtoa_r+0xb4>
 8006d64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d66:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d70:	4333      	orrs	r3, r6
 8006d72:	f000 8592 	beq.w	800789a <_dtoa_r+0xbb2>
 8006d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d78:	b963      	cbnz	r3, 8006d94 <_dtoa_r+0xac>
 8006d7a:	4b92      	ldr	r3, [pc, #584]	; (8006fc4 <_dtoa_r+0x2dc>)
 8006d7c:	e022      	b.n	8006dc4 <_dtoa_r+0xdc>
 8006d7e:	4b92      	ldr	r3, [pc, #584]	; (8006fc8 <_dtoa_r+0x2e0>)
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	3308      	adds	r3, #8
 8006d84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	9801      	ldr	r0, [sp, #4]
 8006d8a:	b013      	add	sp, #76	; 0x4c
 8006d8c:	ecbd 8b04 	vpop	{d8-d9}
 8006d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d94:	4b8b      	ldr	r3, [pc, #556]	; (8006fc4 <_dtoa_r+0x2dc>)
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	3303      	adds	r3, #3
 8006d9a:	e7f3      	b.n	8006d84 <_dtoa_r+0x9c>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	4650      	mov	r0, sl
 8006da2:	4659      	mov	r1, fp
 8006da4:	f7f9 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da8:	ec4b ab19 	vmov	d9, sl, fp
 8006dac:	4680      	mov	r8, r0
 8006dae:	b158      	cbz	r0, 8006dc8 <_dtoa_r+0xe0>
 8006db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006db2:	2301      	movs	r3, #1
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 856b 	beq.w	8007894 <_dtoa_r+0xbac>
 8006dbe:	4883      	ldr	r0, [pc, #524]	; (8006fcc <_dtoa_r+0x2e4>)
 8006dc0:	6018      	str	r0, [r3, #0]
 8006dc2:	1e43      	subs	r3, r0, #1
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	e7df      	b.n	8006d88 <_dtoa_r+0xa0>
 8006dc8:	ec4b ab10 	vmov	d0, sl, fp
 8006dcc:	aa10      	add	r2, sp, #64	; 0x40
 8006dce:	a911      	add	r1, sp, #68	; 0x44
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f001 f8b7 	bl	8007f44 <__d2b>
 8006dd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006dda:	ee08 0a10 	vmov	s16, r0
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	f000 8084 	beq.w	8006eec <_dtoa_r+0x204>
 8006de4:	ee19 3a90 	vmov	r3, s19
 8006de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006df0:	4656      	mov	r6, sl
 8006df2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006df6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006dfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006dfe:	4b74      	ldr	r3, [pc, #464]	; (8006fd0 <_dtoa_r+0x2e8>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	4630      	mov	r0, r6
 8006e04:	4639      	mov	r1, r7
 8006e06:	f7f9 fa3f 	bl	8000288 <__aeabi_dsub>
 8006e0a:	a365      	add	r3, pc, #404	; (adr r3, 8006fa0 <_dtoa_r+0x2b8>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 fbf2 	bl	80005f8 <__aeabi_dmul>
 8006e14:	a364      	add	r3, pc, #400	; (adr r3, 8006fa8 <_dtoa_r+0x2c0>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fa37 	bl	800028c <__adddf3>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	4628      	mov	r0, r5
 8006e22:	460f      	mov	r7, r1
 8006e24:	f7f9 fb7e 	bl	8000524 <__aeabi_i2d>
 8006e28:	a361      	add	r3, pc, #388	; (adr r3, 8006fb0 <_dtoa_r+0x2c8>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fbe3 	bl	80005f8 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4630      	mov	r0, r6
 8006e38:	4639      	mov	r1, r7
 8006e3a:	f7f9 fa27 	bl	800028c <__adddf3>
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460f      	mov	r7, r1
 8006e42:	f7f9 fe89 	bl	8000b58 <__aeabi_d2iz>
 8006e46:	2200      	movs	r2, #0
 8006e48:	9000      	str	r0, [sp, #0]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	4639      	mov	r1, r7
 8006e50:	f7f9 fe44 	bl	8000adc <__aeabi_dcmplt>
 8006e54:	b150      	cbz	r0, 8006e6c <_dtoa_r+0x184>
 8006e56:	9800      	ldr	r0, [sp, #0]
 8006e58:	f7f9 fb64 	bl	8000524 <__aeabi_i2d>
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	463b      	mov	r3, r7
 8006e60:	f7f9 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e64:	b910      	cbnz	r0, 8006e6c <_dtoa_r+0x184>
 8006e66:	9b00      	ldr	r3, [sp, #0]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	9b00      	ldr	r3, [sp, #0]
 8006e6e:	2b16      	cmp	r3, #22
 8006e70:	d85a      	bhi.n	8006f28 <_dtoa_r+0x240>
 8006e72:	9a00      	ldr	r2, [sp, #0]
 8006e74:	4b57      	ldr	r3, [pc, #348]	; (8006fd4 <_dtoa_r+0x2ec>)
 8006e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	ec51 0b19 	vmov	r0, r1, d9
 8006e82:	f7f9 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d050      	beq.n	8006f2c <_dtoa_r+0x244>
 8006e8a:	9b00      	ldr	r3, [sp, #0]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	2300      	movs	r3, #0
 8006e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e96:	1b5d      	subs	r5, r3, r5
 8006e98:	1e6b      	subs	r3, r5, #1
 8006e9a:	9305      	str	r3, [sp, #20]
 8006e9c:	bf45      	ittet	mi
 8006e9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ea2:	9304      	strmi	r3, [sp, #16]
 8006ea4:	2300      	movpl	r3, #0
 8006ea6:	2300      	movmi	r3, #0
 8006ea8:	bf4c      	ite	mi
 8006eaa:	9305      	strmi	r3, [sp, #20]
 8006eac:	9304      	strpl	r3, [sp, #16]
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db3d      	blt.n	8006f30 <_dtoa_r+0x248>
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	9a00      	ldr	r2, [sp, #0]
 8006eb8:	920a      	str	r2, [sp, #40]	; 0x28
 8006eba:	4413      	add	r3, r2
 8006ebc:	9305      	str	r3, [sp, #20]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9307      	str	r3, [sp, #28]
 8006ec2:	9b06      	ldr	r3, [sp, #24]
 8006ec4:	2b09      	cmp	r3, #9
 8006ec6:	f200 8089 	bhi.w	8006fdc <_dtoa_r+0x2f4>
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	bfc4      	itt	gt
 8006ece:	3b04      	subgt	r3, #4
 8006ed0:	9306      	strgt	r3, [sp, #24]
 8006ed2:	9b06      	ldr	r3, [sp, #24]
 8006ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ed8:	bfcc      	ite	gt
 8006eda:	2500      	movgt	r5, #0
 8006edc:	2501      	movle	r5, #1
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	f200 8087 	bhi.w	8006ff2 <_dtoa_r+0x30a>
 8006ee4:	e8df f003 	tbb	[pc, r3]
 8006ee8:	59383a2d 	.word	0x59383a2d
 8006eec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ef0:	441d      	add	r5, r3
 8006ef2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	bfc1      	itttt	gt
 8006efa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006efe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f02:	fa0b f303 	lslgt.w	r3, fp, r3
 8006f06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f0a:	bfda      	itte	le
 8006f0c:	f1c3 0320 	rsble	r3, r3, #32
 8006f10:	fa06 f003 	lslle.w	r0, r6, r3
 8006f14:	4318      	orrgt	r0, r3
 8006f16:	f7f9 faf5 	bl	8000504 <__aeabi_ui2d>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f22:	3d01      	subs	r5, #1
 8006f24:	930e      	str	r3, [sp, #56]	; 0x38
 8006f26:	e76a      	b.n	8006dfe <_dtoa_r+0x116>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e7b2      	b.n	8006e92 <_dtoa_r+0x1aa>
 8006f2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f2e:	e7b1      	b.n	8006e94 <_dtoa_r+0x1ac>
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	9a00      	ldr	r2, [sp, #0]
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	9304      	str	r3, [sp, #16]
 8006f38:	4253      	negs	r3, r2
 8006f3a:	9307      	str	r3, [sp, #28]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f40:	e7bf      	b.n	8006ec2 <_dtoa_r+0x1da>
 8006f42:	2300      	movs	r3, #0
 8006f44:	9308      	str	r3, [sp, #32]
 8006f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dc55      	bgt.n	8006ff8 <_dtoa_r+0x310>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f52:	461a      	mov	r2, r3
 8006f54:	9209      	str	r2, [sp, #36]	; 0x24
 8006f56:	e00c      	b.n	8006f72 <_dtoa_r+0x28a>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e7f3      	b.n	8006f44 <_dtoa_r+0x25c>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f60:	9308      	str	r3, [sp, #32]
 8006f62:	9b00      	ldr	r3, [sp, #0]
 8006f64:	4413      	add	r3, r2
 8006f66:	9302      	str	r3, [sp, #8]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	bfb8      	it	lt
 8006f70:	2301      	movlt	r3, #1
 8006f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f74:	2200      	movs	r2, #0
 8006f76:	6042      	str	r2, [r0, #4]
 8006f78:	2204      	movs	r2, #4
 8006f7a:	f102 0614 	add.w	r6, r2, #20
 8006f7e:	429e      	cmp	r6, r3
 8006f80:	6841      	ldr	r1, [r0, #4]
 8006f82:	d93d      	bls.n	8007000 <_dtoa_r+0x318>
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 fcb5 	bl	80078f4 <_Balloc>
 8006f8a:	9001      	str	r0, [sp, #4]
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d13b      	bne.n	8007008 <_dtoa_r+0x320>
 8006f90:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <_dtoa_r+0x2f0>)
 8006f92:	4602      	mov	r2, r0
 8006f94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f98:	e6c0      	b.n	8006d1c <_dtoa_r+0x34>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7df      	b.n	8006f5e <_dtoa_r+0x276>
 8006f9e:	bf00      	nop
 8006fa0:	636f4361 	.word	0x636f4361
 8006fa4:	3fd287a7 	.word	0x3fd287a7
 8006fa8:	8b60c8b3 	.word	0x8b60c8b3
 8006fac:	3fc68a28 	.word	0x3fc68a28
 8006fb0:	509f79fb 	.word	0x509f79fb
 8006fb4:	3fd34413 	.word	0x3fd34413
 8006fb8:	0800901d 	.word	0x0800901d
 8006fbc:	08009034 	.word	0x08009034
 8006fc0:	7ff00000 	.word	0x7ff00000
 8006fc4:	08009019 	.word	0x08009019
 8006fc8:	08009010 	.word	0x08009010
 8006fcc:	08008fed 	.word	0x08008fed
 8006fd0:	3ff80000 	.word	0x3ff80000
 8006fd4:	08009128 	.word	0x08009128
 8006fd8:	0800908f 	.word	0x0800908f
 8006fdc:	2501      	movs	r5, #1
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9306      	str	r3, [sp, #24]
 8006fe2:	9508      	str	r5, [sp, #32]
 8006fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2312      	movs	r3, #18
 8006ff0:	e7b0      	b.n	8006f54 <_dtoa_r+0x26c>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	9308      	str	r3, [sp, #32]
 8006ff6:	e7f5      	b.n	8006fe4 <_dtoa_r+0x2fc>
 8006ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ffe:	e7b8      	b.n	8006f72 <_dtoa_r+0x28a>
 8007000:	3101      	adds	r1, #1
 8007002:	6041      	str	r1, [r0, #4]
 8007004:	0052      	lsls	r2, r2, #1
 8007006:	e7b8      	b.n	8006f7a <_dtoa_r+0x292>
 8007008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800700a:	9a01      	ldr	r2, [sp, #4]
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	2b0e      	cmp	r3, #14
 8007012:	f200 809d 	bhi.w	8007150 <_dtoa_r+0x468>
 8007016:	2d00      	cmp	r5, #0
 8007018:	f000 809a 	beq.w	8007150 <_dtoa_r+0x468>
 800701c:	9b00      	ldr	r3, [sp, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dd32      	ble.n	8007088 <_dtoa_r+0x3a0>
 8007022:	4ab7      	ldr	r2, [pc, #732]	; (8007300 <_dtoa_r+0x618>)
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800702c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007030:	9b00      	ldr	r3, [sp, #0]
 8007032:	05d8      	lsls	r0, r3, #23
 8007034:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007038:	d516      	bpl.n	8007068 <_dtoa_r+0x380>
 800703a:	4bb2      	ldr	r3, [pc, #712]	; (8007304 <_dtoa_r+0x61c>)
 800703c:	ec51 0b19 	vmov	r0, r1, d9
 8007040:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007044:	f7f9 fc02 	bl	800084c <__aeabi_ddiv>
 8007048:	f007 070f 	and.w	r7, r7, #15
 800704c:	4682      	mov	sl, r0
 800704e:	468b      	mov	fp, r1
 8007050:	2503      	movs	r5, #3
 8007052:	4eac      	ldr	r6, [pc, #688]	; (8007304 <_dtoa_r+0x61c>)
 8007054:	b957      	cbnz	r7, 800706c <_dtoa_r+0x384>
 8007056:	4642      	mov	r2, r8
 8007058:	464b      	mov	r3, r9
 800705a:	4650      	mov	r0, sl
 800705c:	4659      	mov	r1, fp
 800705e:	f7f9 fbf5 	bl	800084c <__aeabi_ddiv>
 8007062:	4682      	mov	sl, r0
 8007064:	468b      	mov	fp, r1
 8007066:	e028      	b.n	80070ba <_dtoa_r+0x3d2>
 8007068:	2502      	movs	r5, #2
 800706a:	e7f2      	b.n	8007052 <_dtoa_r+0x36a>
 800706c:	07f9      	lsls	r1, r7, #31
 800706e:	d508      	bpl.n	8007082 <_dtoa_r+0x39a>
 8007070:	4640      	mov	r0, r8
 8007072:	4649      	mov	r1, r9
 8007074:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007078:	f7f9 fabe 	bl	80005f8 <__aeabi_dmul>
 800707c:	3501      	adds	r5, #1
 800707e:	4680      	mov	r8, r0
 8007080:	4689      	mov	r9, r1
 8007082:	107f      	asrs	r7, r7, #1
 8007084:	3608      	adds	r6, #8
 8007086:	e7e5      	b.n	8007054 <_dtoa_r+0x36c>
 8007088:	f000 809b 	beq.w	80071c2 <_dtoa_r+0x4da>
 800708c:	9b00      	ldr	r3, [sp, #0]
 800708e:	4f9d      	ldr	r7, [pc, #628]	; (8007304 <_dtoa_r+0x61c>)
 8007090:	425e      	negs	r6, r3
 8007092:	4b9b      	ldr	r3, [pc, #620]	; (8007300 <_dtoa_r+0x618>)
 8007094:	f006 020f 	and.w	r2, r6, #15
 8007098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	ec51 0b19 	vmov	r0, r1, d9
 80070a4:	f7f9 faa8 	bl	80005f8 <__aeabi_dmul>
 80070a8:	1136      	asrs	r6, r6, #4
 80070aa:	4682      	mov	sl, r0
 80070ac:	468b      	mov	fp, r1
 80070ae:	2300      	movs	r3, #0
 80070b0:	2502      	movs	r5, #2
 80070b2:	2e00      	cmp	r6, #0
 80070b4:	d17a      	bne.n	80071ac <_dtoa_r+0x4c4>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1d3      	bne.n	8007062 <_dtoa_r+0x37a>
 80070ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8082 	beq.w	80071c6 <_dtoa_r+0x4de>
 80070c2:	4b91      	ldr	r3, [pc, #580]	; (8007308 <_dtoa_r+0x620>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	4650      	mov	r0, sl
 80070c8:	4659      	mov	r1, fp
 80070ca:	f7f9 fd07 	bl	8000adc <__aeabi_dcmplt>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d079      	beq.n	80071c6 <_dtoa_r+0x4de>
 80070d2:	9b03      	ldr	r3, [sp, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d076      	beq.n	80071c6 <_dtoa_r+0x4de>
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dd36      	ble.n	800714c <_dtoa_r+0x464>
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	4650      	mov	r0, sl
 80070e2:	4659      	mov	r1, fp
 80070e4:	1e5f      	subs	r7, r3, #1
 80070e6:	2200      	movs	r2, #0
 80070e8:	4b88      	ldr	r3, [pc, #544]	; (800730c <_dtoa_r+0x624>)
 80070ea:	f7f9 fa85 	bl	80005f8 <__aeabi_dmul>
 80070ee:	9e02      	ldr	r6, [sp, #8]
 80070f0:	4682      	mov	sl, r0
 80070f2:	468b      	mov	fp, r1
 80070f4:	3501      	adds	r5, #1
 80070f6:	4628      	mov	r0, r5
 80070f8:	f7f9 fa14 	bl	8000524 <__aeabi_i2d>
 80070fc:	4652      	mov	r2, sl
 80070fe:	465b      	mov	r3, fp
 8007100:	f7f9 fa7a 	bl	80005f8 <__aeabi_dmul>
 8007104:	4b82      	ldr	r3, [pc, #520]	; (8007310 <_dtoa_r+0x628>)
 8007106:	2200      	movs	r2, #0
 8007108:	f7f9 f8c0 	bl	800028c <__adddf3>
 800710c:	46d0      	mov	r8, sl
 800710e:	46d9      	mov	r9, fp
 8007110:	4682      	mov	sl, r0
 8007112:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007116:	2e00      	cmp	r6, #0
 8007118:	d158      	bne.n	80071cc <_dtoa_r+0x4e4>
 800711a:	4b7e      	ldr	r3, [pc, #504]	; (8007314 <_dtoa_r+0x62c>)
 800711c:	2200      	movs	r2, #0
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 f8b1 	bl	8000288 <__aeabi_dsub>
 8007126:	4652      	mov	r2, sl
 8007128:	465b      	mov	r3, fp
 800712a:	4680      	mov	r8, r0
 800712c:	4689      	mov	r9, r1
 800712e:	f7f9 fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 8007132:	2800      	cmp	r0, #0
 8007134:	f040 8295 	bne.w	8007662 <_dtoa_r+0x97a>
 8007138:	4652      	mov	r2, sl
 800713a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800713e:	4640      	mov	r0, r8
 8007140:	4649      	mov	r1, r9
 8007142:	f7f9 fccb 	bl	8000adc <__aeabi_dcmplt>
 8007146:	2800      	cmp	r0, #0
 8007148:	f040 8289 	bne.w	800765e <_dtoa_r+0x976>
 800714c:	ec5b ab19 	vmov	sl, fp, d9
 8007150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007152:	2b00      	cmp	r3, #0
 8007154:	f2c0 8148 	blt.w	80073e8 <_dtoa_r+0x700>
 8007158:	9a00      	ldr	r2, [sp, #0]
 800715a:	2a0e      	cmp	r2, #14
 800715c:	f300 8144 	bgt.w	80073e8 <_dtoa_r+0x700>
 8007160:	4b67      	ldr	r3, [pc, #412]	; (8007300 <_dtoa_r+0x618>)
 8007162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007166:	e9d3 8900 	ldrd	r8, r9, [r3]
 800716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	f280 80d5 	bge.w	800731c <_dtoa_r+0x634>
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f300 80d1 	bgt.w	800731c <_dtoa_r+0x634>
 800717a:	f040 826f 	bne.w	800765c <_dtoa_r+0x974>
 800717e:	4b65      	ldr	r3, [pc, #404]	; (8007314 <_dtoa_r+0x62c>)
 8007180:	2200      	movs	r2, #0
 8007182:	4640      	mov	r0, r8
 8007184:	4649      	mov	r1, r9
 8007186:	f7f9 fa37 	bl	80005f8 <__aeabi_dmul>
 800718a:	4652      	mov	r2, sl
 800718c:	465b      	mov	r3, fp
 800718e:	f7f9 fcb9 	bl	8000b04 <__aeabi_dcmpge>
 8007192:	9e03      	ldr	r6, [sp, #12]
 8007194:	4637      	mov	r7, r6
 8007196:	2800      	cmp	r0, #0
 8007198:	f040 8245 	bne.w	8007626 <_dtoa_r+0x93e>
 800719c:	9d01      	ldr	r5, [sp, #4]
 800719e:	2331      	movs	r3, #49	; 0x31
 80071a0:	f805 3b01 	strb.w	r3, [r5], #1
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	3301      	adds	r3, #1
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	e240      	b.n	800762e <_dtoa_r+0x946>
 80071ac:	07f2      	lsls	r2, r6, #31
 80071ae:	d505      	bpl.n	80071bc <_dtoa_r+0x4d4>
 80071b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b4:	f7f9 fa20 	bl	80005f8 <__aeabi_dmul>
 80071b8:	3501      	adds	r5, #1
 80071ba:	2301      	movs	r3, #1
 80071bc:	1076      	asrs	r6, r6, #1
 80071be:	3708      	adds	r7, #8
 80071c0:	e777      	b.n	80070b2 <_dtoa_r+0x3ca>
 80071c2:	2502      	movs	r5, #2
 80071c4:	e779      	b.n	80070ba <_dtoa_r+0x3d2>
 80071c6:	9f00      	ldr	r7, [sp, #0]
 80071c8:	9e03      	ldr	r6, [sp, #12]
 80071ca:	e794      	b.n	80070f6 <_dtoa_r+0x40e>
 80071cc:	9901      	ldr	r1, [sp, #4]
 80071ce:	4b4c      	ldr	r3, [pc, #304]	; (8007300 <_dtoa_r+0x618>)
 80071d0:	4431      	add	r1, r6
 80071d2:	910d      	str	r1, [sp, #52]	; 0x34
 80071d4:	9908      	ldr	r1, [sp, #32]
 80071d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071de:	2900      	cmp	r1, #0
 80071e0:	d043      	beq.n	800726a <_dtoa_r+0x582>
 80071e2:	494d      	ldr	r1, [pc, #308]	; (8007318 <_dtoa_r+0x630>)
 80071e4:	2000      	movs	r0, #0
 80071e6:	f7f9 fb31 	bl	800084c <__aeabi_ddiv>
 80071ea:	4652      	mov	r2, sl
 80071ec:	465b      	mov	r3, fp
 80071ee:	f7f9 f84b 	bl	8000288 <__aeabi_dsub>
 80071f2:	9d01      	ldr	r5, [sp, #4]
 80071f4:	4682      	mov	sl, r0
 80071f6:	468b      	mov	fp, r1
 80071f8:	4649      	mov	r1, r9
 80071fa:	4640      	mov	r0, r8
 80071fc:	f7f9 fcac 	bl	8000b58 <__aeabi_d2iz>
 8007200:	4606      	mov	r6, r0
 8007202:	f7f9 f98f 	bl	8000524 <__aeabi_i2d>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4640      	mov	r0, r8
 800720c:	4649      	mov	r1, r9
 800720e:	f7f9 f83b 	bl	8000288 <__aeabi_dsub>
 8007212:	3630      	adds	r6, #48	; 0x30
 8007214:	f805 6b01 	strb.w	r6, [r5], #1
 8007218:	4652      	mov	r2, sl
 800721a:	465b      	mov	r3, fp
 800721c:	4680      	mov	r8, r0
 800721e:	4689      	mov	r9, r1
 8007220:	f7f9 fc5c 	bl	8000adc <__aeabi_dcmplt>
 8007224:	2800      	cmp	r0, #0
 8007226:	d163      	bne.n	80072f0 <_dtoa_r+0x608>
 8007228:	4642      	mov	r2, r8
 800722a:	464b      	mov	r3, r9
 800722c:	4936      	ldr	r1, [pc, #216]	; (8007308 <_dtoa_r+0x620>)
 800722e:	2000      	movs	r0, #0
 8007230:	f7f9 f82a 	bl	8000288 <__aeabi_dsub>
 8007234:	4652      	mov	r2, sl
 8007236:	465b      	mov	r3, fp
 8007238:	f7f9 fc50 	bl	8000adc <__aeabi_dcmplt>
 800723c:	2800      	cmp	r0, #0
 800723e:	f040 80b5 	bne.w	80073ac <_dtoa_r+0x6c4>
 8007242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007244:	429d      	cmp	r5, r3
 8007246:	d081      	beq.n	800714c <_dtoa_r+0x464>
 8007248:	4b30      	ldr	r3, [pc, #192]	; (800730c <_dtoa_r+0x624>)
 800724a:	2200      	movs	r2, #0
 800724c:	4650      	mov	r0, sl
 800724e:	4659      	mov	r1, fp
 8007250:	f7f9 f9d2 	bl	80005f8 <__aeabi_dmul>
 8007254:	4b2d      	ldr	r3, [pc, #180]	; (800730c <_dtoa_r+0x624>)
 8007256:	4682      	mov	sl, r0
 8007258:	468b      	mov	fp, r1
 800725a:	4640      	mov	r0, r8
 800725c:	4649      	mov	r1, r9
 800725e:	2200      	movs	r2, #0
 8007260:	f7f9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8007264:	4680      	mov	r8, r0
 8007266:	4689      	mov	r9, r1
 8007268:	e7c6      	b.n	80071f8 <_dtoa_r+0x510>
 800726a:	4650      	mov	r0, sl
 800726c:	4659      	mov	r1, fp
 800726e:	f7f9 f9c3 	bl	80005f8 <__aeabi_dmul>
 8007272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007274:	9d01      	ldr	r5, [sp, #4]
 8007276:	930f      	str	r3, [sp, #60]	; 0x3c
 8007278:	4682      	mov	sl, r0
 800727a:	468b      	mov	fp, r1
 800727c:	4649      	mov	r1, r9
 800727e:	4640      	mov	r0, r8
 8007280:	f7f9 fc6a 	bl	8000b58 <__aeabi_d2iz>
 8007284:	4606      	mov	r6, r0
 8007286:	f7f9 f94d 	bl	8000524 <__aeabi_i2d>
 800728a:	3630      	adds	r6, #48	; 0x30
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4640      	mov	r0, r8
 8007292:	4649      	mov	r1, r9
 8007294:	f7f8 fff8 	bl	8000288 <__aeabi_dsub>
 8007298:	f805 6b01 	strb.w	r6, [r5], #1
 800729c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800729e:	429d      	cmp	r5, r3
 80072a0:	4680      	mov	r8, r0
 80072a2:	4689      	mov	r9, r1
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	d124      	bne.n	80072f4 <_dtoa_r+0x60c>
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <_dtoa_r+0x630>)
 80072ac:	4650      	mov	r0, sl
 80072ae:	4659      	mov	r1, fp
 80072b0:	f7f8 ffec 	bl	800028c <__adddf3>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f7f9 fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d173      	bne.n	80073ac <_dtoa_r+0x6c4>
 80072c4:	4652      	mov	r2, sl
 80072c6:	465b      	mov	r3, fp
 80072c8:	4913      	ldr	r1, [pc, #76]	; (8007318 <_dtoa_r+0x630>)
 80072ca:	2000      	movs	r0, #0
 80072cc:	f7f8 ffdc 	bl	8000288 <__aeabi_dsub>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4640      	mov	r0, r8
 80072d6:	4649      	mov	r1, r9
 80072d8:	f7f9 fc00 	bl	8000adc <__aeabi_dcmplt>
 80072dc:	2800      	cmp	r0, #0
 80072de:	f43f af35 	beq.w	800714c <_dtoa_r+0x464>
 80072e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80072e4:	1e6b      	subs	r3, r5, #1
 80072e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80072e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80072ec:	2b30      	cmp	r3, #48	; 0x30
 80072ee:	d0f8      	beq.n	80072e2 <_dtoa_r+0x5fa>
 80072f0:	9700      	str	r7, [sp, #0]
 80072f2:	e049      	b.n	8007388 <_dtoa_r+0x6a0>
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <_dtoa_r+0x624>)
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	4680      	mov	r8, r0
 80072fc:	4689      	mov	r9, r1
 80072fe:	e7bd      	b.n	800727c <_dtoa_r+0x594>
 8007300:	08009128 	.word	0x08009128
 8007304:	08009100 	.word	0x08009100
 8007308:	3ff00000 	.word	0x3ff00000
 800730c:	40240000 	.word	0x40240000
 8007310:	401c0000 	.word	0x401c0000
 8007314:	40140000 	.word	0x40140000
 8007318:	3fe00000 	.word	0x3fe00000
 800731c:	9d01      	ldr	r5, [sp, #4]
 800731e:	4656      	mov	r6, sl
 8007320:	465f      	mov	r7, fp
 8007322:	4642      	mov	r2, r8
 8007324:	464b      	mov	r3, r9
 8007326:	4630      	mov	r0, r6
 8007328:	4639      	mov	r1, r7
 800732a:	f7f9 fa8f 	bl	800084c <__aeabi_ddiv>
 800732e:	f7f9 fc13 	bl	8000b58 <__aeabi_d2iz>
 8007332:	4682      	mov	sl, r0
 8007334:	f7f9 f8f6 	bl	8000524 <__aeabi_i2d>
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4630      	mov	r0, r6
 8007346:	4639      	mov	r1, r7
 8007348:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800734c:	f7f8 ff9c 	bl	8000288 <__aeabi_dsub>
 8007350:	f805 6b01 	strb.w	r6, [r5], #1
 8007354:	9e01      	ldr	r6, [sp, #4]
 8007356:	9f03      	ldr	r7, [sp, #12]
 8007358:	1bae      	subs	r6, r5, r6
 800735a:	42b7      	cmp	r7, r6
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	d135      	bne.n	80073ce <_dtoa_r+0x6e6>
 8007362:	f7f8 ff93 	bl	800028c <__adddf3>
 8007366:	4642      	mov	r2, r8
 8007368:	464b      	mov	r3, r9
 800736a:	4606      	mov	r6, r0
 800736c:	460f      	mov	r7, r1
 800736e:	f7f9 fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 8007372:	b9d0      	cbnz	r0, 80073aa <_dtoa_r+0x6c2>
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007380:	b110      	cbz	r0, 8007388 <_dtoa_r+0x6a0>
 8007382:	f01a 0f01 	tst.w	sl, #1
 8007386:	d110      	bne.n	80073aa <_dtoa_r+0x6c2>
 8007388:	4620      	mov	r0, r4
 800738a:	ee18 1a10 	vmov	r1, s16
 800738e:	f000 faf1 	bl	8007974 <_Bfree>
 8007392:	2300      	movs	r3, #0
 8007394:	9800      	ldr	r0, [sp, #0]
 8007396:	702b      	strb	r3, [r5, #0]
 8007398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800739a:	3001      	adds	r0, #1
 800739c:	6018      	str	r0, [r3, #0]
 800739e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f43f acf1 	beq.w	8006d88 <_dtoa_r+0xa0>
 80073a6:	601d      	str	r5, [r3, #0]
 80073a8:	e4ee      	b.n	8006d88 <_dtoa_r+0xa0>
 80073aa:	9f00      	ldr	r7, [sp, #0]
 80073ac:	462b      	mov	r3, r5
 80073ae:	461d      	mov	r5, r3
 80073b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073b4:	2a39      	cmp	r2, #57	; 0x39
 80073b6:	d106      	bne.n	80073c6 <_dtoa_r+0x6de>
 80073b8:	9a01      	ldr	r2, [sp, #4]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d1f7      	bne.n	80073ae <_dtoa_r+0x6c6>
 80073be:	9901      	ldr	r1, [sp, #4]
 80073c0:	2230      	movs	r2, #48	; 0x30
 80073c2:	3701      	adds	r7, #1
 80073c4:	700a      	strb	r2, [r1, #0]
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	3201      	adds	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e790      	b.n	80072f0 <_dtoa_r+0x608>
 80073ce:	4ba6      	ldr	r3, [pc, #664]	; (8007668 <_dtoa_r+0x980>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	f7f9 f911 	bl	80005f8 <__aeabi_dmul>
 80073d6:	2200      	movs	r2, #0
 80073d8:	2300      	movs	r3, #0
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	f7f9 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d09d      	beq.n	8007322 <_dtoa_r+0x63a>
 80073e6:	e7cf      	b.n	8007388 <_dtoa_r+0x6a0>
 80073e8:	9a08      	ldr	r2, [sp, #32]
 80073ea:	2a00      	cmp	r2, #0
 80073ec:	f000 80d7 	beq.w	800759e <_dtoa_r+0x8b6>
 80073f0:	9a06      	ldr	r2, [sp, #24]
 80073f2:	2a01      	cmp	r2, #1
 80073f4:	f300 80ba 	bgt.w	800756c <_dtoa_r+0x884>
 80073f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073fa:	2a00      	cmp	r2, #0
 80073fc:	f000 80b2 	beq.w	8007564 <_dtoa_r+0x87c>
 8007400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007404:	9e07      	ldr	r6, [sp, #28]
 8007406:	9d04      	ldr	r5, [sp, #16]
 8007408:	9a04      	ldr	r2, [sp, #16]
 800740a:	441a      	add	r2, r3
 800740c:	9204      	str	r2, [sp, #16]
 800740e:	9a05      	ldr	r2, [sp, #20]
 8007410:	2101      	movs	r1, #1
 8007412:	441a      	add	r2, r3
 8007414:	4620      	mov	r0, r4
 8007416:	9205      	str	r2, [sp, #20]
 8007418:	f000 fb64 	bl	8007ae4 <__i2b>
 800741c:	4607      	mov	r7, r0
 800741e:	2d00      	cmp	r5, #0
 8007420:	dd0c      	ble.n	800743c <_dtoa_r+0x754>
 8007422:	9b05      	ldr	r3, [sp, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	dd09      	ble.n	800743c <_dtoa_r+0x754>
 8007428:	42ab      	cmp	r3, r5
 800742a:	9a04      	ldr	r2, [sp, #16]
 800742c:	bfa8      	it	ge
 800742e:	462b      	movge	r3, r5
 8007430:	1ad2      	subs	r2, r2, r3
 8007432:	9204      	str	r2, [sp, #16]
 8007434:	9a05      	ldr	r2, [sp, #20]
 8007436:	1aed      	subs	r5, r5, r3
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	b31b      	cbz	r3, 8007488 <_dtoa_r+0x7a0>
 8007440:	9b08      	ldr	r3, [sp, #32]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80af 	beq.w	80075a6 <_dtoa_r+0x8be>
 8007448:	2e00      	cmp	r6, #0
 800744a:	dd13      	ble.n	8007474 <_dtoa_r+0x78c>
 800744c:	4639      	mov	r1, r7
 800744e:	4632      	mov	r2, r6
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fc07 	bl	8007c64 <__pow5mult>
 8007456:	ee18 2a10 	vmov	r2, s16
 800745a:	4601      	mov	r1, r0
 800745c:	4607      	mov	r7, r0
 800745e:	4620      	mov	r0, r4
 8007460:	f000 fb56 	bl	8007b10 <__multiply>
 8007464:	ee18 1a10 	vmov	r1, s16
 8007468:	4680      	mov	r8, r0
 800746a:	4620      	mov	r0, r4
 800746c:	f000 fa82 	bl	8007974 <_Bfree>
 8007470:	ee08 8a10 	vmov	s16, r8
 8007474:	9b07      	ldr	r3, [sp, #28]
 8007476:	1b9a      	subs	r2, r3, r6
 8007478:	d006      	beq.n	8007488 <_dtoa_r+0x7a0>
 800747a:	ee18 1a10 	vmov	r1, s16
 800747e:	4620      	mov	r0, r4
 8007480:	f000 fbf0 	bl	8007c64 <__pow5mult>
 8007484:	ee08 0a10 	vmov	s16, r0
 8007488:	2101      	movs	r1, #1
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fb2a 	bl	8007ae4 <__i2b>
 8007490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	4606      	mov	r6, r0
 8007496:	f340 8088 	ble.w	80075aa <_dtoa_r+0x8c2>
 800749a:	461a      	mov	r2, r3
 800749c:	4601      	mov	r1, r0
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 fbe0 	bl	8007c64 <__pow5mult>
 80074a4:	9b06      	ldr	r3, [sp, #24]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	4606      	mov	r6, r0
 80074aa:	f340 8081 	ble.w	80075b0 <_dtoa_r+0x8c8>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	6933      	ldr	r3, [r6, #16]
 80074b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074b8:	6918      	ldr	r0, [r3, #16]
 80074ba:	f000 fac3 	bl	8007a44 <__hi0bits>
 80074be:	f1c0 0020 	rsb	r0, r0, #32
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	4418      	add	r0, r3
 80074c6:	f010 001f 	ands.w	r0, r0, #31
 80074ca:	f000 8092 	beq.w	80075f2 <_dtoa_r+0x90a>
 80074ce:	f1c0 0320 	rsb	r3, r0, #32
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	f340 808a 	ble.w	80075ec <_dtoa_r+0x904>
 80074d8:	f1c0 001c 	rsb	r0, r0, #28
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	4403      	add	r3, r0
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	9b05      	ldr	r3, [sp, #20]
 80074e4:	4403      	add	r3, r0
 80074e6:	4405      	add	r5, r0
 80074e8:	9305      	str	r3, [sp, #20]
 80074ea:	9b04      	ldr	r3, [sp, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dd07      	ble.n	8007500 <_dtoa_r+0x818>
 80074f0:	ee18 1a10 	vmov	r1, s16
 80074f4:	461a      	mov	r2, r3
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fc0e 	bl	8007d18 <__lshift>
 80074fc:	ee08 0a10 	vmov	s16, r0
 8007500:	9b05      	ldr	r3, [sp, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	dd05      	ble.n	8007512 <_dtoa_r+0x82a>
 8007506:	4631      	mov	r1, r6
 8007508:	461a      	mov	r2, r3
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fc04 	bl	8007d18 <__lshift>
 8007510:	4606      	mov	r6, r0
 8007512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d06e      	beq.n	80075f6 <_dtoa_r+0x90e>
 8007518:	ee18 0a10 	vmov	r0, s16
 800751c:	4631      	mov	r1, r6
 800751e:	f000 fc6b 	bl	8007df8 <__mcmp>
 8007522:	2800      	cmp	r0, #0
 8007524:	da67      	bge.n	80075f6 <_dtoa_r+0x90e>
 8007526:	9b00      	ldr	r3, [sp, #0]
 8007528:	3b01      	subs	r3, #1
 800752a:	ee18 1a10 	vmov	r1, s16
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	220a      	movs	r2, #10
 8007532:	2300      	movs	r3, #0
 8007534:	4620      	mov	r0, r4
 8007536:	f000 fa3f 	bl	80079b8 <__multadd>
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	ee08 0a10 	vmov	s16, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 81b1 	beq.w	80078a8 <_dtoa_r+0xbc0>
 8007546:	2300      	movs	r3, #0
 8007548:	4639      	mov	r1, r7
 800754a:	220a      	movs	r2, #10
 800754c:	4620      	mov	r0, r4
 800754e:	f000 fa33 	bl	80079b8 <__multadd>
 8007552:	9b02      	ldr	r3, [sp, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	4607      	mov	r7, r0
 8007558:	f300 808e 	bgt.w	8007678 <_dtoa_r+0x990>
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	2b02      	cmp	r3, #2
 8007560:	dc51      	bgt.n	8007606 <_dtoa_r+0x91e>
 8007562:	e089      	b.n	8007678 <_dtoa_r+0x990>
 8007564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800756a:	e74b      	b.n	8007404 <_dtoa_r+0x71c>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	1e5e      	subs	r6, r3, #1
 8007570:	9b07      	ldr	r3, [sp, #28]
 8007572:	42b3      	cmp	r3, r6
 8007574:	bfbf      	itttt	lt
 8007576:	9b07      	ldrlt	r3, [sp, #28]
 8007578:	9607      	strlt	r6, [sp, #28]
 800757a:	1af2      	sublt	r2, r6, r3
 800757c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800757e:	bfb6      	itet	lt
 8007580:	189b      	addlt	r3, r3, r2
 8007582:	1b9e      	subge	r6, r3, r6
 8007584:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	bfb8      	it	lt
 800758a:	2600      	movlt	r6, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	bfb7      	itett	lt
 8007590:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007594:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007598:	1a9d      	sublt	r5, r3, r2
 800759a:	2300      	movlt	r3, #0
 800759c:	e734      	b.n	8007408 <_dtoa_r+0x720>
 800759e:	9e07      	ldr	r6, [sp, #28]
 80075a0:	9d04      	ldr	r5, [sp, #16]
 80075a2:	9f08      	ldr	r7, [sp, #32]
 80075a4:	e73b      	b.n	800741e <_dtoa_r+0x736>
 80075a6:	9a07      	ldr	r2, [sp, #28]
 80075a8:	e767      	b.n	800747a <_dtoa_r+0x792>
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	dc18      	bgt.n	80075e2 <_dtoa_r+0x8fa>
 80075b0:	f1ba 0f00 	cmp.w	sl, #0
 80075b4:	d115      	bne.n	80075e2 <_dtoa_r+0x8fa>
 80075b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075ba:	b993      	cbnz	r3, 80075e2 <_dtoa_r+0x8fa>
 80075bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075c0:	0d1b      	lsrs	r3, r3, #20
 80075c2:	051b      	lsls	r3, r3, #20
 80075c4:	b183      	cbz	r3, 80075e8 <_dtoa_r+0x900>
 80075c6:	9b04      	ldr	r3, [sp, #16]
 80075c8:	3301      	adds	r3, #1
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	9b05      	ldr	r3, [sp, #20]
 80075ce:	3301      	adds	r3, #1
 80075d0:	9305      	str	r3, [sp, #20]
 80075d2:	f04f 0801 	mov.w	r8, #1
 80075d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f47f af6a 	bne.w	80074b2 <_dtoa_r+0x7ca>
 80075de:	2001      	movs	r0, #1
 80075e0:	e76f      	b.n	80074c2 <_dtoa_r+0x7da>
 80075e2:	f04f 0800 	mov.w	r8, #0
 80075e6:	e7f6      	b.n	80075d6 <_dtoa_r+0x8ee>
 80075e8:	4698      	mov	r8, r3
 80075ea:	e7f4      	b.n	80075d6 <_dtoa_r+0x8ee>
 80075ec:	f43f af7d 	beq.w	80074ea <_dtoa_r+0x802>
 80075f0:	4618      	mov	r0, r3
 80075f2:	301c      	adds	r0, #28
 80075f4:	e772      	b.n	80074dc <_dtoa_r+0x7f4>
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	dc37      	bgt.n	800766c <_dtoa_r+0x984>
 80075fc:	9b06      	ldr	r3, [sp, #24]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	dd34      	ble.n	800766c <_dtoa_r+0x984>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	9302      	str	r3, [sp, #8]
 8007606:	9b02      	ldr	r3, [sp, #8]
 8007608:	b96b      	cbnz	r3, 8007626 <_dtoa_r+0x93e>
 800760a:	4631      	mov	r1, r6
 800760c:	2205      	movs	r2, #5
 800760e:	4620      	mov	r0, r4
 8007610:	f000 f9d2 	bl	80079b8 <__multadd>
 8007614:	4601      	mov	r1, r0
 8007616:	4606      	mov	r6, r0
 8007618:	ee18 0a10 	vmov	r0, s16
 800761c:	f000 fbec 	bl	8007df8 <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	f73f adbb 	bgt.w	800719c <_dtoa_r+0x4b4>
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	9d01      	ldr	r5, [sp, #4]
 800762a:	43db      	mvns	r3, r3
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	f04f 0800 	mov.w	r8, #0
 8007632:	4631      	mov	r1, r6
 8007634:	4620      	mov	r0, r4
 8007636:	f000 f99d 	bl	8007974 <_Bfree>
 800763a:	2f00      	cmp	r7, #0
 800763c:	f43f aea4 	beq.w	8007388 <_dtoa_r+0x6a0>
 8007640:	f1b8 0f00 	cmp.w	r8, #0
 8007644:	d005      	beq.n	8007652 <_dtoa_r+0x96a>
 8007646:	45b8      	cmp	r8, r7
 8007648:	d003      	beq.n	8007652 <_dtoa_r+0x96a>
 800764a:	4641      	mov	r1, r8
 800764c:	4620      	mov	r0, r4
 800764e:	f000 f991 	bl	8007974 <_Bfree>
 8007652:	4639      	mov	r1, r7
 8007654:	4620      	mov	r0, r4
 8007656:	f000 f98d 	bl	8007974 <_Bfree>
 800765a:	e695      	b.n	8007388 <_dtoa_r+0x6a0>
 800765c:	2600      	movs	r6, #0
 800765e:	4637      	mov	r7, r6
 8007660:	e7e1      	b.n	8007626 <_dtoa_r+0x93e>
 8007662:	9700      	str	r7, [sp, #0]
 8007664:	4637      	mov	r7, r6
 8007666:	e599      	b.n	800719c <_dtoa_r+0x4b4>
 8007668:	40240000 	.word	0x40240000
 800766c:	9b08      	ldr	r3, [sp, #32]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 80ca 	beq.w	8007808 <_dtoa_r+0xb20>
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	9302      	str	r3, [sp, #8]
 8007678:	2d00      	cmp	r5, #0
 800767a:	dd05      	ble.n	8007688 <_dtoa_r+0x9a0>
 800767c:	4639      	mov	r1, r7
 800767e:	462a      	mov	r2, r5
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fb49 	bl	8007d18 <__lshift>
 8007686:	4607      	mov	r7, r0
 8007688:	f1b8 0f00 	cmp.w	r8, #0
 800768c:	d05b      	beq.n	8007746 <_dtoa_r+0xa5e>
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4620      	mov	r0, r4
 8007692:	f000 f92f 	bl	80078f4 <_Balloc>
 8007696:	4605      	mov	r5, r0
 8007698:	b928      	cbnz	r0, 80076a6 <_dtoa_r+0x9be>
 800769a:	4b87      	ldr	r3, [pc, #540]	; (80078b8 <_dtoa_r+0xbd0>)
 800769c:	4602      	mov	r2, r0
 800769e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076a2:	f7ff bb3b 	b.w	8006d1c <_dtoa_r+0x34>
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	3202      	adds	r2, #2
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	f107 010c 	add.w	r1, r7, #12
 80076b0:	300c      	adds	r0, #12
 80076b2:	f7fe fd53 	bl	800615c <memcpy>
 80076b6:	2201      	movs	r2, #1
 80076b8:	4629      	mov	r1, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fb2c 	bl	8007d18 <__lshift>
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	f103 0901 	add.w	r9, r3, #1
 80076c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80076ca:	4413      	add	r3, r2
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	f00a 0301 	and.w	r3, sl, #1
 80076d2:	46b8      	mov	r8, r7
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	4607      	mov	r7, r0
 80076d8:	4631      	mov	r1, r6
 80076da:	ee18 0a10 	vmov	r0, s16
 80076de:	f7ff fa77 	bl	8006bd0 <quorem>
 80076e2:	4641      	mov	r1, r8
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076ea:	ee18 0a10 	vmov	r0, s16
 80076ee:	f000 fb83 	bl	8007df8 <__mcmp>
 80076f2:	463a      	mov	r2, r7
 80076f4:	9003      	str	r0, [sp, #12]
 80076f6:	4631      	mov	r1, r6
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 fb99 	bl	8007e30 <__mdiff>
 80076fe:	68c2      	ldr	r2, [r0, #12]
 8007700:	f109 3bff 	add.w	fp, r9, #4294967295
 8007704:	4605      	mov	r5, r0
 8007706:	bb02      	cbnz	r2, 800774a <_dtoa_r+0xa62>
 8007708:	4601      	mov	r1, r0
 800770a:	ee18 0a10 	vmov	r0, s16
 800770e:	f000 fb73 	bl	8007df8 <__mcmp>
 8007712:	4602      	mov	r2, r0
 8007714:	4629      	mov	r1, r5
 8007716:	4620      	mov	r0, r4
 8007718:	9207      	str	r2, [sp, #28]
 800771a:	f000 f92b 	bl	8007974 <_Bfree>
 800771e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007722:	ea43 0102 	orr.w	r1, r3, r2
 8007726:	9b04      	ldr	r3, [sp, #16]
 8007728:	430b      	orrs	r3, r1
 800772a:	464d      	mov	r5, r9
 800772c:	d10f      	bne.n	800774e <_dtoa_r+0xa66>
 800772e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007732:	d02a      	beq.n	800778a <_dtoa_r+0xaa2>
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	dd02      	ble.n	8007740 <_dtoa_r+0xa58>
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007740:	f88b a000 	strb.w	sl, [fp]
 8007744:	e775      	b.n	8007632 <_dtoa_r+0x94a>
 8007746:	4638      	mov	r0, r7
 8007748:	e7ba      	b.n	80076c0 <_dtoa_r+0x9d8>
 800774a:	2201      	movs	r2, #1
 800774c:	e7e2      	b.n	8007714 <_dtoa_r+0xa2c>
 800774e:	9b03      	ldr	r3, [sp, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	db04      	blt.n	800775e <_dtoa_r+0xa76>
 8007754:	9906      	ldr	r1, [sp, #24]
 8007756:	430b      	orrs	r3, r1
 8007758:	9904      	ldr	r1, [sp, #16]
 800775a:	430b      	orrs	r3, r1
 800775c:	d122      	bne.n	80077a4 <_dtoa_r+0xabc>
 800775e:	2a00      	cmp	r2, #0
 8007760:	ddee      	ble.n	8007740 <_dtoa_r+0xa58>
 8007762:	ee18 1a10 	vmov	r1, s16
 8007766:	2201      	movs	r2, #1
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fad5 	bl	8007d18 <__lshift>
 800776e:	4631      	mov	r1, r6
 8007770:	ee08 0a10 	vmov	s16, r0
 8007774:	f000 fb40 	bl	8007df8 <__mcmp>
 8007778:	2800      	cmp	r0, #0
 800777a:	dc03      	bgt.n	8007784 <_dtoa_r+0xa9c>
 800777c:	d1e0      	bne.n	8007740 <_dtoa_r+0xa58>
 800777e:	f01a 0f01 	tst.w	sl, #1
 8007782:	d0dd      	beq.n	8007740 <_dtoa_r+0xa58>
 8007784:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007788:	d1d7      	bne.n	800773a <_dtoa_r+0xa52>
 800778a:	2339      	movs	r3, #57	; 0x39
 800778c:	f88b 3000 	strb.w	r3, [fp]
 8007790:	462b      	mov	r3, r5
 8007792:	461d      	mov	r5, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800779a:	2a39      	cmp	r2, #57	; 0x39
 800779c:	d071      	beq.n	8007882 <_dtoa_r+0xb9a>
 800779e:	3201      	adds	r2, #1
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	e746      	b.n	8007632 <_dtoa_r+0x94a>
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	dd07      	ble.n	80077b8 <_dtoa_r+0xad0>
 80077a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077ac:	d0ed      	beq.n	800778a <_dtoa_r+0xaa2>
 80077ae:	f10a 0301 	add.w	r3, sl, #1
 80077b2:	f88b 3000 	strb.w	r3, [fp]
 80077b6:	e73c      	b.n	8007632 <_dtoa_r+0x94a>
 80077b8:	9b05      	ldr	r3, [sp, #20]
 80077ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80077be:	4599      	cmp	r9, r3
 80077c0:	d047      	beq.n	8007852 <_dtoa_r+0xb6a>
 80077c2:	ee18 1a10 	vmov	r1, s16
 80077c6:	2300      	movs	r3, #0
 80077c8:	220a      	movs	r2, #10
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 f8f4 	bl	80079b8 <__multadd>
 80077d0:	45b8      	cmp	r8, r7
 80077d2:	ee08 0a10 	vmov	s16, r0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	f04f 020a 	mov.w	r2, #10
 80077de:	4641      	mov	r1, r8
 80077e0:	4620      	mov	r0, r4
 80077e2:	d106      	bne.n	80077f2 <_dtoa_r+0xb0a>
 80077e4:	f000 f8e8 	bl	80079b8 <__multadd>
 80077e8:	4680      	mov	r8, r0
 80077ea:	4607      	mov	r7, r0
 80077ec:	f109 0901 	add.w	r9, r9, #1
 80077f0:	e772      	b.n	80076d8 <_dtoa_r+0x9f0>
 80077f2:	f000 f8e1 	bl	80079b8 <__multadd>
 80077f6:	4639      	mov	r1, r7
 80077f8:	4680      	mov	r8, r0
 80077fa:	2300      	movs	r3, #0
 80077fc:	220a      	movs	r2, #10
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 f8da 	bl	80079b8 <__multadd>
 8007804:	4607      	mov	r7, r0
 8007806:	e7f1      	b.n	80077ec <_dtoa_r+0xb04>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	9302      	str	r3, [sp, #8]
 800780c:	9d01      	ldr	r5, [sp, #4]
 800780e:	ee18 0a10 	vmov	r0, s16
 8007812:	4631      	mov	r1, r6
 8007814:	f7ff f9dc 	bl	8006bd0 <quorem>
 8007818:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800781c:	9b01      	ldr	r3, [sp, #4]
 800781e:	f805 ab01 	strb.w	sl, [r5], #1
 8007822:	1aea      	subs	r2, r5, r3
 8007824:	9b02      	ldr	r3, [sp, #8]
 8007826:	4293      	cmp	r3, r2
 8007828:	dd09      	ble.n	800783e <_dtoa_r+0xb56>
 800782a:	ee18 1a10 	vmov	r1, s16
 800782e:	2300      	movs	r3, #0
 8007830:	220a      	movs	r2, #10
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f8c0 	bl	80079b8 <__multadd>
 8007838:	ee08 0a10 	vmov	s16, r0
 800783c:	e7e7      	b.n	800780e <_dtoa_r+0xb26>
 800783e:	9b02      	ldr	r3, [sp, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	bfc8      	it	gt
 8007844:	461d      	movgt	r5, r3
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	bfd8      	it	le
 800784a:	2501      	movle	r5, #1
 800784c:	441d      	add	r5, r3
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	ee18 1a10 	vmov	r1, s16
 8007856:	2201      	movs	r2, #1
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fa5d 	bl	8007d18 <__lshift>
 800785e:	4631      	mov	r1, r6
 8007860:	ee08 0a10 	vmov	s16, r0
 8007864:	f000 fac8 	bl	8007df8 <__mcmp>
 8007868:	2800      	cmp	r0, #0
 800786a:	dc91      	bgt.n	8007790 <_dtoa_r+0xaa8>
 800786c:	d102      	bne.n	8007874 <_dtoa_r+0xb8c>
 800786e:	f01a 0f01 	tst.w	sl, #1
 8007872:	d18d      	bne.n	8007790 <_dtoa_r+0xaa8>
 8007874:	462b      	mov	r3, r5
 8007876:	461d      	mov	r5, r3
 8007878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800787c:	2a30      	cmp	r2, #48	; 0x30
 800787e:	d0fa      	beq.n	8007876 <_dtoa_r+0xb8e>
 8007880:	e6d7      	b.n	8007632 <_dtoa_r+0x94a>
 8007882:	9a01      	ldr	r2, [sp, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d184      	bne.n	8007792 <_dtoa_r+0xaaa>
 8007888:	9b00      	ldr	r3, [sp, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	2331      	movs	r3, #49	; 0x31
 8007890:	7013      	strb	r3, [r2, #0]
 8007892:	e6ce      	b.n	8007632 <_dtoa_r+0x94a>
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <_dtoa_r+0xbd4>)
 8007896:	f7ff ba95 	b.w	8006dc4 <_dtoa_r+0xdc>
 800789a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800789c:	2b00      	cmp	r3, #0
 800789e:	f47f aa6e 	bne.w	8006d7e <_dtoa_r+0x96>
 80078a2:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <_dtoa_r+0xbd8>)
 80078a4:	f7ff ba8e 	b.w	8006dc4 <_dtoa_r+0xdc>
 80078a8:	9b02      	ldr	r3, [sp, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dcae      	bgt.n	800780c <_dtoa_r+0xb24>
 80078ae:	9b06      	ldr	r3, [sp, #24]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	f73f aea8 	bgt.w	8007606 <_dtoa_r+0x91e>
 80078b6:	e7a9      	b.n	800780c <_dtoa_r+0xb24>
 80078b8:	0800908f 	.word	0x0800908f
 80078bc:	08008fec 	.word	0x08008fec
 80078c0:	08009010 	.word	0x08009010

080078c4 <_localeconv_r>:
 80078c4:	4800      	ldr	r0, [pc, #0]	; (80078c8 <_localeconv_r+0x4>)
 80078c6:	4770      	bx	lr
 80078c8:	20000464 	.word	0x20000464

080078cc <malloc>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <malloc+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f7fe bc8f 	b.w	80061f4 <_malloc_r>
 80078d6:	bf00      	nop
 80078d8:	20000310 	.word	0x20000310

080078dc <__malloc_lock>:
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <__malloc_lock+0x8>)
 80078de:	f000 bc0a 	b.w	80080f6 <__retarget_lock_acquire_recursive>
 80078e2:	bf00      	nop
 80078e4:	20000728 	.word	0x20000728

080078e8 <__malloc_unlock>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__malloc_unlock+0x8>)
 80078ea:	f000 bc05 	b.w	80080f8 <__retarget_lock_release_recursive>
 80078ee:	bf00      	nop
 80078f0:	20000728 	.word	0x20000728

080078f4 <_Balloc>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078f8:	4604      	mov	r4, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	b976      	cbnz	r6, 800791c <_Balloc+0x28>
 80078fe:	2010      	movs	r0, #16
 8007900:	f7ff ffe4 	bl	80078cc <malloc>
 8007904:	4602      	mov	r2, r0
 8007906:	6260      	str	r0, [r4, #36]	; 0x24
 8007908:	b920      	cbnz	r0, 8007914 <_Balloc+0x20>
 800790a:	4b18      	ldr	r3, [pc, #96]	; (800796c <_Balloc+0x78>)
 800790c:	4818      	ldr	r0, [pc, #96]	; (8007970 <_Balloc+0x7c>)
 800790e:	2166      	movs	r1, #102	; 0x66
 8007910:	f000 fbc0 	bl	8008094 <__assert_func>
 8007914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007918:	6006      	str	r6, [r0, #0]
 800791a:	60c6      	str	r6, [r0, #12]
 800791c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800791e:	68f3      	ldr	r3, [r6, #12]
 8007920:	b183      	cbz	r3, 8007944 <_Balloc+0x50>
 8007922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800792a:	b9b8      	cbnz	r0, 800795c <_Balloc+0x68>
 800792c:	2101      	movs	r1, #1
 800792e:	fa01 f605 	lsl.w	r6, r1, r5
 8007932:	1d72      	adds	r2, r6, #5
 8007934:	0092      	lsls	r2, r2, #2
 8007936:	4620      	mov	r0, r4
 8007938:	f7fe fc26 	bl	8006188 <_calloc_r>
 800793c:	b160      	cbz	r0, 8007958 <_Balloc+0x64>
 800793e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007942:	e00e      	b.n	8007962 <_Balloc+0x6e>
 8007944:	2221      	movs	r2, #33	; 0x21
 8007946:	2104      	movs	r1, #4
 8007948:	4620      	mov	r0, r4
 800794a:	f7fe fc1d 	bl	8006188 <_calloc_r>
 800794e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007950:	60f0      	str	r0, [r6, #12]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e4      	bne.n	8007922 <_Balloc+0x2e>
 8007958:	2000      	movs	r0, #0
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	6802      	ldr	r2, [r0, #0]
 800795e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007962:	2300      	movs	r3, #0
 8007964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007968:	e7f7      	b.n	800795a <_Balloc+0x66>
 800796a:	bf00      	nop
 800796c:	0800901d 	.word	0x0800901d
 8007970:	080090a0 	.word	0x080090a0

08007974 <_Bfree>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007978:	4605      	mov	r5, r0
 800797a:	460c      	mov	r4, r1
 800797c:	b976      	cbnz	r6, 800799c <_Bfree+0x28>
 800797e:	2010      	movs	r0, #16
 8007980:	f7ff ffa4 	bl	80078cc <malloc>
 8007984:	4602      	mov	r2, r0
 8007986:	6268      	str	r0, [r5, #36]	; 0x24
 8007988:	b920      	cbnz	r0, 8007994 <_Bfree+0x20>
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <_Bfree+0x3c>)
 800798c:	4809      	ldr	r0, [pc, #36]	; (80079b4 <_Bfree+0x40>)
 800798e:	218a      	movs	r1, #138	; 0x8a
 8007990:	f000 fb80 	bl	8008094 <__assert_func>
 8007994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007998:	6006      	str	r6, [r0, #0]
 800799a:	60c6      	str	r6, [r0, #12]
 800799c:	b13c      	cbz	r4, 80079ae <_Bfree+0x3a>
 800799e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079a0:	6862      	ldr	r2, [r4, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079a8:	6021      	str	r1, [r4, #0]
 80079aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	0800901d 	.word	0x0800901d
 80079b4:	080090a0 	.word	0x080090a0

080079b8 <__multadd>:
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	690d      	ldr	r5, [r1, #16]
 80079be:	4607      	mov	r7, r0
 80079c0:	460c      	mov	r4, r1
 80079c2:	461e      	mov	r6, r3
 80079c4:	f101 0c14 	add.w	ip, r1, #20
 80079c8:	2000      	movs	r0, #0
 80079ca:	f8dc 3000 	ldr.w	r3, [ip]
 80079ce:	b299      	uxth	r1, r3
 80079d0:	fb02 6101 	mla	r1, r2, r1, r6
 80079d4:	0c1e      	lsrs	r6, r3, #16
 80079d6:	0c0b      	lsrs	r3, r1, #16
 80079d8:	fb02 3306 	mla	r3, r2, r6, r3
 80079dc:	b289      	uxth	r1, r1
 80079de:	3001      	adds	r0, #1
 80079e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079e4:	4285      	cmp	r5, r0
 80079e6:	f84c 1b04 	str.w	r1, [ip], #4
 80079ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ee:	dcec      	bgt.n	80079ca <__multadd+0x12>
 80079f0:	b30e      	cbz	r6, 8007a36 <__multadd+0x7e>
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	42ab      	cmp	r3, r5
 80079f6:	dc19      	bgt.n	8007a2c <__multadd+0x74>
 80079f8:	6861      	ldr	r1, [r4, #4]
 80079fa:	4638      	mov	r0, r7
 80079fc:	3101      	adds	r1, #1
 80079fe:	f7ff ff79 	bl	80078f4 <_Balloc>
 8007a02:	4680      	mov	r8, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <__multadd+0x5a>
 8007a06:	4602      	mov	r2, r0
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <__multadd+0x84>)
 8007a0a:	480d      	ldr	r0, [pc, #52]	; (8007a40 <__multadd+0x88>)
 8007a0c:	21b5      	movs	r1, #181	; 0xb5
 8007a0e:	f000 fb41 	bl	8008094 <__assert_func>
 8007a12:	6922      	ldr	r2, [r4, #16]
 8007a14:	3202      	adds	r2, #2
 8007a16:	f104 010c 	add.w	r1, r4, #12
 8007a1a:	0092      	lsls	r2, r2, #2
 8007a1c:	300c      	adds	r0, #12
 8007a1e:	f7fe fb9d 	bl	800615c <memcpy>
 8007a22:	4621      	mov	r1, r4
 8007a24:	4638      	mov	r0, r7
 8007a26:	f7ff ffa5 	bl	8007974 <_Bfree>
 8007a2a:	4644      	mov	r4, r8
 8007a2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a30:	3501      	adds	r5, #1
 8007a32:	615e      	str	r6, [r3, #20]
 8007a34:	6125      	str	r5, [r4, #16]
 8007a36:	4620      	mov	r0, r4
 8007a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a3c:	0800908f 	.word	0x0800908f
 8007a40:	080090a0 	.word	0x080090a0

08007a44 <__hi0bits>:
 8007a44:	0c03      	lsrs	r3, r0, #16
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	b9d3      	cbnz	r3, 8007a80 <__hi0bits+0x3c>
 8007a4a:	0400      	lsls	r0, r0, #16
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a52:	bf04      	itt	eq
 8007a54:	0200      	lsleq	r0, r0, #8
 8007a56:	3308      	addeq	r3, #8
 8007a58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a5c:	bf04      	itt	eq
 8007a5e:	0100      	lsleq	r0, r0, #4
 8007a60:	3304      	addeq	r3, #4
 8007a62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a66:	bf04      	itt	eq
 8007a68:	0080      	lsleq	r0, r0, #2
 8007a6a:	3302      	addeq	r3, #2
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	db05      	blt.n	8007a7c <__hi0bits+0x38>
 8007a70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a74:	f103 0301 	add.w	r3, r3, #1
 8007a78:	bf08      	it	eq
 8007a7a:	2320      	moveq	r3, #32
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	4770      	bx	lr
 8007a80:	2300      	movs	r3, #0
 8007a82:	e7e4      	b.n	8007a4e <__hi0bits+0xa>

08007a84 <__lo0bits>:
 8007a84:	6803      	ldr	r3, [r0, #0]
 8007a86:	f013 0207 	ands.w	r2, r3, #7
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	d00b      	beq.n	8007aa6 <__lo0bits+0x22>
 8007a8e:	07da      	lsls	r2, r3, #31
 8007a90:	d423      	bmi.n	8007ada <__lo0bits+0x56>
 8007a92:	0798      	lsls	r0, r3, #30
 8007a94:	bf49      	itett	mi
 8007a96:	085b      	lsrmi	r3, r3, #1
 8007a98:	089b      	lsrpl	r3, r3, #2
 8007a9a:	2001      	movmi	r0, #1
 8007a9c:	600b      	strmi	r3, [r1, #0]
 8007a9e:	bf5c      	itt	pl
 8007aa0:	600b      	strpl	r3, [r1, #0]
 8007aa2:	2002      	movpl	r0, #2
 8007aa4:	4770      	bx	lr
 8007aa6:	b298      	uxth	r0, r3
 8007aa8:	b9a8      	cbnz	r0, 8007ad6 <__lo0bits+0x52>
 8007aaa:	0c1b      	lsrs	r3, r3, #16
 8007aac:	2010      	movs	r0, #16
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	b90a      	cbnz	r2, 8007ab6 <__lo0bits+0x32>
 8007ab2:	3008      	adds	r0, #8
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	071a      	lsls	r2, r3, #28
 8007ab8:	bf04      	itt	eq
 8007aba:	091b      	lsreq	r3, r3, #4
 8007abc:	3004      	addeq	r0, #4
 8007abe:	079a      	lsls	r2, r3, #30
 8007ac0:	bf04      	itt	eq
 8007ac2:	089b      	lsreq	r3, r3, #2
 8007ac4:	3002      	addeq	r0, #2
 8007ac6:	07da      	lsls	r2, r3, #31
 8007ac8:	d403      	bmi.n	8007ad2 <__lo0bits+0x4e>
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	f100 0001 	add.w	r0, r0, #1
 8007ad0:	d005      	beq.n	8007ade <__lo0bits+0x5a>
 8007ad2:	600b      	str	r3, [r1, #0]
 8007ad4:	4770      	bx	lr
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	e7e9      	b.n	8007aae <__lo0bits+0x2a>
 8007ada:	2000      	movs	r0, #0
 8007adc:	4770      	bx	lr
 8007ade:	2020      	movs	r0, #32
 8007ae0:	4770      	bx	lr
	...

08007ae4 <__i2b>:
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	2101      	movs	r1, #1
 8007aea:	f7ff ff03 	bl	80078f4 <_Balloc>
 8007aee:	4602      	mov	r2, r0
 8007af0:	b928      	cbnz	r0, 8007afe <__i2b+0x1a>
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <__i2b+0x24>)
 8007af4:	4805      	ldr	r0, [pc, #20]	; (8007b0c <__i2b+0x28>)
 8007af6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007afa:	f000 facb 	bl	8008094 <__assert_func>
 8007afe:	2301      	movs	r3, #1
 8007b00:	6144      	str	r4, [r0, #20]
 8007b02:	6103      	str	r3, [r0, #16]
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	bf00      	nop
 8007b08:	0800908f 	.word	0x0800908f
 8007b0c:	080090a0 	.word	0x080090a0

08007b10 <__multiply>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	4691      	mov	r9, r2
 8007b16:	690a      	ldr	r2, [r1, #16]
 8007b18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	bfb8      	it	lt
 8007b20:	460b      	movlt	r3, r1
 8007b22:	460c      	mov	r4, r1
 8007b24:	bfbc      	itt	lt
 8007b26:	464c      	movlt	r4, r9
 8007b28:	4699      	movlt	r9, r3
 8007b2a:	6927      	ldr	r7, [r4, #16]
 8007b2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b30:	68a3      	ldr	r3, [r4, #8]
 8007b32:	6861      	ldr	r1, [r4, #4]
 8007b34:	eb07 060a 	add.w	r6, r7, sl
 8007b38:	42b3      	cmp	r3, r6
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	bfb8      	it	lt
 8007b3e:	3101      	addlt	r1, #1
 8007b40:	f7ff fed8 	bl	80078f4 <_Balloc>
 8007b44:	b930      	cbnz	r0, 8007b54 <__multiply+0x44>
 8007b46:	4602      	mov	r2, r0
 8007b48:	4b44      	ldr	r3, [pc, #272]	; (8007c5c <__multiply+0x14c>)
 8007b4a:	4845      	ldr	r0, [pc, #276]	; (8007c60 <__multiply+0x150>)
 8007b4c:	f240 115d 	movw	r1, #349	; 0x15d
 8007b50:	f000 faa0 	bl	8008094 <__assert_func>
 8007b54:	f100 0514 	add.w	r5, r0, #20
 8007b58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	2200      	movs	r2, #0
 8007b60:	4543      	cmp	r3, r8
 8007b62:	d321      	bcc.n	8007ba8 <__multiply+0x98>
 8007b64:	f104 0314 	add.w	r3, r4, #20
 8007b68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b6c:	f109 0314 	add.w	r3, r9, #20
 8007b70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b74:	9202      	str	r2, [sp, #8]
 8007b76:	1b3a      	subs	r2, r7, r4
 8007b78:	3a15      	subs	r2, #21
 8007b7a:	f022 0203 	bic.w	r2, r2, #3
 8007b7e:	3204      	adds	r2, #4
 8007b80:	f104 0115 	add.w	r1, r4, #21
 8007b84:	428f      	cmp	r7, r1
 8007b86:	bf38      	it	cc
 8007b88:	2204      	movcc	r2, #4
 8007b8a:	9201      	str	r2, [sp, #4]
 8007b8c:	9a02      	ldr	r2, [sp, #8]
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d80c      	bhi.n	8007bae <__multiply+0x9e>
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	dd03      	ble.n	8007ba0 <__multiply+0x90>
 8007b98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d05a      	beq.n	8007c56 <__multiply+0x146>
 8007ba0:	6106      	str	r6, [r0, #16]
 8007ba2:	b005      	add	sp, #20
 8007ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba8:	f843 2b04 	str.w	r2, [r3], #4
 8007bac:	e7d8      	b.n	8007b60 <__multiply+0x50>
 8007bae:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bb2:	f1ba 0f00 	cmp.w	sl, #0
 8007bb6:	d024      	beq.n	8007c02 <__multiply+0xf2>
 8007bb8:	f104 0e14 	add.w	lr, r4, #20
 8007bbc:	46a9      	mov	r9, r5
 8007bbe:	f04f 0c00 	mov.w	ip, #0
 8007bc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007bc6:	f8d9 1000 	ldr.w	r1, [r9]
 8007bca:	fa1f fb82 	uxth.w	fp, r2
 8007bce:	b289      	uxth	r1, r1
 8007bd0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007bd8:	f8d9 2000 	ldr.w	r2, [r9]
 8007bdc:	4461      	add	r1, ip
 8007bde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007be2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007be6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bea:	b289      	uxth	r1, r1
 8007bec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bf0:	4577      	cmp	r7, lr
 8007bf2:	f849 1b04 	str.w	r1, [r9], #4
 8007bf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bfa:	d8e2      	bhi.n	8007bc2 <__multiply+0xb2>
 8007bfc:	9a01      	ldr	r2, [sp, #4]
 8007bfe:	f845 c002 	str.w	ip, [r5, r2]
 8007c02:	9a03      	ldr	r2, [sp, #12]
 8007c04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	f1b9 0f00 	cmp.w	r9, #0
 8007c0e:	d020      	beq.n	8007c52 <__multiply+0x142>
 8007c10:	6829      	ldr	r1, [r5, #0]
 8007c12:	f104 0c14 	add.w	ip, r4, #20
 8007c16:	46ae      	mov	lr, r5
 8007c18:	f04f 0a00 	mov.w	sl, #0
 8007c1c:	f8bc b000 	ldrh.w	fp, [ip]
 8007c20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c24:	fb09 220b 	mla	r2, r9, fp, r2
 8007c28:	4492      	add	sl, r2
 8007c2a:	b289      	uxth	r1, r1
 8007c2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c30:	f84e 1b04 	str.w	r1, [lr], #4
 8007c34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c38:	f8be 1000 	ldrh.w	r1, [lr]
 8007c3c:	0c12      	lsrs	r2, r2, #16
 8007c3e:	fb09 1102 	mla	r1, r9, r2, r1
 8007c42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c46:	4567      	cmp	r7, ip
 8007c48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c4c:	d8e6      	bhi.n	8007c1c <__multiply+0x10c>
 8007c4e:	9a01      	ldr	r2, [sp, #4]
 8007c50:	50a9      	str	r1, [r5, r2]
 8007c52:	3504      	adds	r5, #4
 8007c54:	e79a      	b.n	8007b8c <__multiply+0x7c>
 8007c56:	3e01      	subs	r6, #1
 8007c58:	e79c      	b.n	8007b94 <__multiply+0x84>
 8007c5a:	bf00      	nop
 8007c5c:	0800908f 	.word	0x0800908f
 8007c60:	080090a0 	.word	0x080090a0

08007c64 <__pow5mult>:
 8007c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c68:	4615      	mov	r5, r2
 8007c6a:	f012 0203 	ands.w	r2, r2, #3
 8007c6e:	4606      	mov	r6, r0
 8007c70:	460f      	mov	r7, r1
 8007c72:	d007      	beq.n	8007c84 <__pow5mult+0x20>
 8007c74:	4c25      	ldr	r4, [pc, #148]	; (8007d0c <__pow5mult+0xa8>)
 8007c76:	3a01      	subs	r2, #1
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c7e:	f7ff fe9b 	bl	80079b8 <__multadd>
 8007c82:	4607      	mov	r7, r0
 8007c84:	10ad      	asrs	r5, r5, #2
 8007c86:	d03d      	beq.n	8007d04 <__pow5mult+0xa0>
 8007c88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c8a:	b97c      	cbnz	r4, 8007cac <__pow5mult+0x48>
 8007c8c:	2010      	movs	r0, #16
 8007c8e:	f7ff fe1d 	bl	80078cc <malloc>
 8007c92:	4602      	mov	r2, r0
 8007c94:	6270      	str	r0, [r6, #36]	; 0x24
 8007c96:	b928      	cbnz	r0, 8007ca4 <__pow5mult+0x40>
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <__pow5mult+0xac>)
 8007c9a:	481e      	ldr	r0, [pc, #120]	; (8007d14 <__pow5mult+0xb0>)
 8007c9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ca0:	f000 f9f8 	bl	8008094 <__assert_func>
 8007ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ca8:	6004      	str	r4, [r0, #0]
 8007caa:	60c4      	str	r4, [r0, #12]
 8007cac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cb4:	b94c      	cbnz	r4, 8007cca <__pow5mult+0x66>
 8007cb6:	f240 2171 	movw	r1, #625	; 0x271
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f7ff ff12 	bl	8007ae4 <__i2b>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	6003      	str	r3, [r0, #0]
 8007cca:	f04f 0900 	mov.w	r9, #0
 8007cce:	07eb      	lsls	r3, r5, #31
 8007cd0:	d50a      	bpl.n	8007ce8 <__pow5mult+0x84>
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7ff ff1a 	bl	8007b10 <__multiply>
 8007cdc:	4639      	mov	r1, r7
 8007cde:	4680      	mov	r8, r0
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff fe47 	bl	8007974 <_Bfree>
 8007ce6:	4647      	mov	r7, r8
 8007ce8:	106d      	asrs	r5, r5, #1
 8007cea:	d00b      	beq.n	8007d04 <__pow5mult+0xa0>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	b938      	cbnz	r0, 8007d00 <__pow5mult+0x9c>
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7ff ff0b 	bl	8007b10 <__multiply>
 8007cfa:	6020      	str	r0, [r4, #0]
 8007cfc:	f8c0 9000 	str.w	r9, [r0]
 8007d00:	4604      	mov	r4, r0
 8007d02:	e7e4      	b.n	8007cce <__pow5mult+0x6a>
 8007d04:	4638      	mov	r0, r7
 8007d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0a:	bf00      	nop
 8007d0c:	080091f0 	.word	0x080091f0
 8007d10:	0800901d 	.word	0x0800901d
 8007d14:	080090a0 	.word	0x080090a0

08007d18 <__lshift>:
 8007d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	6849      	ldr	r1, [r1, #4]
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	4607      	mov	r7, r0
 8007d2a:	4691      	mov	r9, r2
 8007d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d30:	f108 0601 	add.w	r6, r8, #1
 8007d34:	42b3      	cmp	r3, r6
 8007d36:	db0b      	blt.n	8007d50 <__lshift+0x38>
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f7ff fddb 	bl	80078f4 <_Balloc>
 8007d3e:	4605      	mov	r5, r0
 8007d40:	b948      	cbnz	r0, 8007d56 <__lshift+0x3e>
 8007d42:	4602      	mov	r2, r0
 8007d44:	4b2a      	ldr	r3, [pc, #168]	; (8007df0 <__lshift+0xd8>)
 8007d46:	482b      	ldr	r0, [pc, #172]	; (8007df4 <__lshift+0xdc>)
 8007d48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d4c:	f000 f9a2 	bl	8008094 <__assert_func>
 8007d50:	3101      	adds	r1, #1
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	e7ee      	b.n	8007d34 <__lshift+0x1c>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f100 0114 	add.w	r1, r0, #20
 8007d5c:	f100 0210 	add.w	r2, r0, #16
 8007d60:	4618      	mov	r0, r3
 8007d62:	4553      	cmp	r3, sl
 8007d64:	db37      	blt.n	8007dd6 <__lshift+0xbe>
 8007d66:	6920      	ldr	r0, [r4, #16]
 8007d68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d6c:	f104 0314 	add.w	r3, r4, #20
 8007d70:	f019 091f 	ands.w	r9, r9, #31
 8007d74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d7c:	d02f      	beq.n	8007dde <__lshift+0xc6>
 8007d7e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d82:	468a      	mov	sl, r1
 8007d84:	f04f 0c00 	mov.w	ip, #0
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	fa02 f209 	lsl.w	r2, r2, r9
 8007d8e:	ea42 020c 	orr.w	r2, r2, ip
 8007d92:	f84a 2b04 	str.w	r2, [sl], #4
 8007d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9a:	4298      	cmp	r0, r3
 8007d9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007da0:	d8f2      	bhi.n	8007d88 <__lshift+0x70>
 8007da2:	1b03      	subs	r3, r0, r4
 8007da4:	3b15      	subs	r3, #21
 8007da6:	f023 0303 	bic.w	r3, r3, #3
 8007daa:	3304      	adds	r3, #4
 8007dac:	f104 0215 	add.w	r2, r4, #21
 8007db0:	4290      	cmp	r0, r2
 8007db2:	bf38      	it	cc
 8007db4:	2304      	movcc	r3, #4
 8007db6:	f841 c003 	str.w	ip, [r1, r3]
 8007dba:	f1bc 0f00 	cmp.w	ip, #0
 8007dbe:	d001      	beq.n	8007dc4 <__lshift+0xac>
 8007dc0:	f108 0602 	add.w	r6, r8, #2
 8007dc4:	3e01      	subs	r6, #1
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	612e      	str	r6, [r5, #16]
 8007dca:	4621      	mov	r1, r4
 8007dcc:	f7ff fdd2 	bl	8007974 <_Bfree>
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dda:	3301      	adds	r3, #1
 8007ddc:	e7c1      	b.n	8007d62 <__lshift+0x4a>
 8007dde:	3904      	subs	r1, #4
 8007de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007de8:	4298      	cmp	r0, r3
 8007dea:	d8f9      	bhi.n	8007de0 <__lshift+0xc8>
 8007dec:	e7ea      	b.n	8007dc4 <__lshift+0xac>
 8007dee:	bf00      	nop
 8007df0:	0800908f 	.word	0x0800908f
 8007df4:	080090a0 	.word	0x080090a0

08007df8 <__mcmp>:
 8007df8:	b530      	push	{r4, r5, lr}
 8007dfa:	6902      	ldr	r2, [r0, #16]
 8007dfc:	690c      	ldr	r4, [r1, #16]
 8007dfe:	1b12      	subs	r2, r2, r4
 8007e00:	d10e      	bne.n	8007e20 <__mcmp+0x28>
 8007e02:	f100 0314 	add.w	r3, r0, #20
 8007e06:	3114      	adds	r1, #20
 8007e08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e18:	42a5      	cmp	r5, r4
 8007e1a:	d003      	beq.n	8007e24 <__mcmp+0x2c>
 8007e1c:	d305      	bcc.n	8007e2a <__mcmp+0x32>
 8007e1e:	2201      	movs	r2, #1
 8007e20:	4610      	mov	r0, r2
 8007e22:	bd30      	pop	{r4, r5, pc}
 8007e24:	4283      	cmp	r3, r0
 8007e26:	d3f3      	bcc.n	8007e10 <__mcmp+0x18>
 8007e28:	e7fa      	b.n	8007e20 <__mcmp+0x28>
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2e:	e7f7      	b.n	8007e20 <__mcmp+0x28>

08007e30 <__mdiff>:
 8007e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	460c      	mov	r4, r1
 8007e36:	4606      	mov	r6, r0
 8007e38:	4611      	mov	r1, r2
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4690      	mov	r8, r2
 8007e3e:	f7ff ffdb 	bl	8007df8 <__mcmp>
 8007e42:	1e05      	subs	r5, r0, #0
 8007e44:	d110      	bne.n	8007e68 <__mdiff+0x38>
 8007e46:	4629      	mov	r1, r5
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff fd53 	bl	80078f4 <_Balloc>
 8007e4e:	b930      	cbnz	r0, 8007e5e <__mdiff+0x2e>
 8007e50:	4b3a      	ldr	r3, [pc, #232]	; (8007f3c <__mdiff+0x10c>)
 8007e52:	4602      	mov	r2, r0
 8007e54:	f240 2132 	movw	r1, #562	; 0x232
 8007e58:	4839      	ldr	r0, [pc, #228]	; (8007f40 <__mdiff+0x110>)
 8007e5a:	f000 f91b 	bl	8008094 <__assert_func>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	bfa4      	itt	ge
 8007e6a:	4643      	movge	r3, r8
 8007e6c:	46a0      	movge	r8, r4
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e74:	bfa6      	itte	ge
 8007e76:	461c      	movge	r4, r3
 8007e78:	2500      	movge	r5, #0
 8007e7a:	2501      	movlt	r5, #1
 8007e7c:	f7ff fd3a 	bl	80078f4 <_Balloc>
 8007e80:	b920      	cbnz	r0, 8007e8c <__mdiff+0x5c>
 8007e82:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <__mdiff+0x10c>)
 8007e84:	4602      	mov	r2, r0
 8007e86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e8a:	e7e5      	b.n	8007e58 <__mdiff+0x28>
 8007e8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e90:	6926      	ldr	r6, [r4, #16]
 8007e92:	60c5      	str	r5, [r0, #12]
 8007e94:	f104 0914 	add.w	r9, r4, #20
 8007e98:	f108 0514 	add.w	r5, r8, #20
 8007e9c:	f100 0e14 	add.w	lr, r0, #20
 8007ea0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ea4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ea8:	f108 0210 	add.w	r2, r8, #16
 8007eac:	46f2      	mov	sl, lr
 8007eae:	2100      	movs	r1, #0
 8007eb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007eb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007eb8:	fa1f f883 	uxth.w	r8, r3
 8007ebc:	fa11 f18b 	uxtah	r1, r1, fp
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	eba1 0808 	sub.w	r8, r1, r8
 8007ec6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007eca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ece:	fa1f f888 	uxth.w	r8, r8
 8007ed2:	1419      	asrs	r1, r3, #16
 8007ed4:	454e      	cmp	r6, r9
 8007ed6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007eda:	f84a 3b04 	str.w	r3, [sl], #4
 8007ede:	d8e7      	bhi.n	8007eb0 <__mdiff+0x80>
 8007ee0:	1b33      	subs	r3, r6, r4
 8007ee2:	3b15      	subs	r3, #21
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	3304      	adds	r3, #4
 8007eea:	3415      	adds	r4, #21
 8007eec:	42a6      	cmp	r6, r4
 8007eee:	bf38      	it	cc
 8007ef0:	2304      	movcc	r3, #4
 8007ef2:	441d      	add	r5, r3
 8007ef4:	4473      	add	r3, lr
 8007ef6:	469e      	mov	lr, r3
 8007ef8:	462e      	mov	r6, r5
 8007efa:	4566      	cmp	r6, ip
 8007efc:	d30e      	bcc.n	8007f1c <__mdiff+0xec>
 8007efe:	f10c 0203 	add.w	r2, ip, #3
 8007f02:	1b52      	subs	r2, r2, r5
 8007f04:	f022 0203 	bic.w	r2, r2, #3
 8007f08:	3d03      	subs	r5, #3
 8007f0a:	45ac      	cmp	ip, r5
 8007f0c:	bf38      	it	cc
 8007f0e:	2200      	movcc	r2, #0
 8007f10:	441a      	add	r2, r3
 8007f12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f16:	b17b      	cbz	r3, 8007f38 <__mdiff+0x108>
 8007f18:	6107      	str	r7, [r0, #16]
 8007f1a:	e7a3      	b.n	8007e64 <__mdiff+0x34>
 8007f1c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f20:	fa11 f288 	uxtah	r2, r1, r8
 8007f24:	1414      	asrs	r4, r2, #16
 8007f26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f2a:	b292      	uxth	r2, r2
 8007f2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f30:	f84e 2b04 	str.w	r2, [lr], #4
 8007f34:	1421      	asrs	r1, r4, #16
 8007f36:	e7e0      	b.n	8007efa <__mdiff+0xca>
 8007f38:	3f01      	subs	r7, #1
 8007f3a:	e7ea      	b.n	8007f12 <__mdiff+0xe2>
 8007f3c:	0800908f 	.word	0x0800908f
 8007f40:	080090a0 	.word	0x080090a0

08007f44 <__d2b>:
 8007f44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f48:	4689      	mov	r9, r1
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	ec57 6b10 	vmov	r6, r7, d0
 8007f50:	4690      	mov	r8, r2
 8007f52:	f7ff fccf 	bl	80078f4 <_Balloc>
 8007f56:	4604      	mov	r4, r0
 8007f58:	b930      	cbnz	r0, 8007f68 <__d2b+0x24>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	4b25      	ldr	r3, [pc, #148]	; (8007ff4 <__d2b+0xb0>)
 8007f5e:	4826      	ldr	r0, [pc, #152]	; (8007ff8 <__d2b+0xb4>)
 8007f60:	f240 310a 	movw	r1, #778	; 0x30a
 8007f64:	f000 f896 	bl	8008094 <__assert_func>
 8007f68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f70:	bb35      	cbnz	r5, 8007fc0 <__d2b+0x7c>
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	d028      	beq.n	8007fca <__d2b+0x86>
 8007f78:	4668      	mov	r0, sp
 8007f7a:	9600      	str	r6, [sp, #0]
 8007f7c:	f7ff fd82 	bl	8007a84 <__lo0bits>
 8007f80:	9900      	ldr	r1, [sp, #0]
 8007f82:	b300      	cbz	r0, 8007fc6 <__d2b+0x82>
 8007f84:	9a01      	ldr	r2, [sp, #4]
 8007f86:	f1c0 0320 	rsb	r3, r0, #32
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	40c2      	lsrs	r2, r0
 8007f92:	6163      	str	r3, [r4, #20]
 8007f94:	9201      	str	r2, [sp, #4]
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	61a3      	str	r3, [r4, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bf14      	ite	ne
 8007f9e:	2202      	movne	r2, #2
 8007fa0:	2201      	moveq	r2, #1
 8007fa2:	6122      	str	r2, [r4, #16]
 8007fa4:	b1d5      	cbz	r5, 8007fdc <__d2b+0x98>
 8007fa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007faa:	4405      	add	r5, r0
 8007fac:	f8c9 5000 	str.w	r5, [r9]
 8007fb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fb4:	f8c8 0000 	str.w	r0, [r8]
 8007fb8:	4620      	mov	r0, r4
 8007fba:	b003      	add	sp, #12
 8007fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc4:	e7d5      	b.n	8007f72 <__d2b+0x2e>
 8007fc6:	6161      	str	r1, [r4, #20]
 8007fc8:	e7e5      	b.n	8007f96 <__d2b+0x52>
 8007fca:	a801      	add	r0, sp, #4
 8007fcc:	f7ff fd5a 	bl	8007a84 <__lo0bits>
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	6163      	str	r3, [r4, #20]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	6122      	str	r2, [r4, #16]
 8007fd8:	3020      	adds	r0, #32
 8007fda:	e7e3      	b.n	8007fa4 <__d2b+0x60>
 8007fdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fe4:	f8c9 0000 	str.w	r0, [r9]
 8007fe8:	6918      	ldr	r0, [r3, #16]
 8007fea:	f7ff fd2b 	bl	8007a44 <__hi0bits>
 8007fee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ff2:	e7df      	b.n	8007fb4 <__d2b+0x70>
 8007ff4:	0800908f 	.word	0x0800908f
 8007ff8:	080090a0 	.word	0x080090a0

08007ffc <_free_r>:
 8007ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ffe:	2900      	cmp	r1, #0
 8008000:	d044      	beq.n	800808c <_free_r+0x90>
 8008002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008006:	9001      	str	r0, [sp, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f1a1 0404 	sub.w	r4, r1, #4
 800800e:	bfb8      	it	lt
 8008010:	18e4      	addlt	r4, r4, r3
 8008012:	f7ff fc63 	bl	80078dc <__malloc_lock>
 8008016:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <_free_r+0x94>)
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	b933      	cbnz	r3, 800802c <_free_r+0x30>
 800801e:	6063      	str	r3, [r4, #4]
 8008020:	6014      	str	r4, [r2, #0]
 8008022:	b003      	add	sp, #12
 8008024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008028:	f7ff bc5e 	b.w	80078e8 <__malloc_unlock>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d908      	bls.n	8008042 <_free_r+0x46>
 8008030:	6825      	ldr	r5, [r4, #0]
 8008032:	1961      	adds	r1, r4, r5
 8008034:	428b      	cmp	r3, r1
 8008036:	bf01      	itttt	eq
 8008038:	6819      	ldreq	r1, [r3, #0]
 800803a:	685b      	ldreq	r3, [r3, #4]
 800803c:	1949      	addeq	r1, r1, r5
 800803e:	6021      	streq	r1, [r4, #0]
 8008040:	e7ed      	b.n	800801e <_free_r+0x22>
 8008042:	461a      	mov	r2, r3
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b10b      	cbz	r3, 800804c <_free_r+0x50>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d9fa      	bls.n	8008042 <_free_r+0x46>
 800804c:	6811      	ldr	r1, [r2, #0]
 800804e:	1855      	adds	r5, r2, r1
 8008050:	42a5      	cmp	r5, r4
 8008052:	d10b      	bne.n	800806c <_free_r+0x70>
 8008054:	6824      	ldr	r4, [r4, #0]
 8008056:	4421      	add	r1, r4
 8008058:	1854      	adds	r4, r2, r1
 800805a:	42a3      	cmp	r3, r4
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	d1e0      	bne.n	8008022 <_free_r+0x26>
 8008060:	681c      	ldr	r4, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	6053      	str	r3, [r2, #4]
 8008066:	4421      	add	r1, r4
 8008068:	6011      	str	r1, [r2, #0]
 800806a:	e7da      	b.n	8008022 <_free_r+0x26>
 800806c:	d902      	bls.n	8008074 <_free_r+0x78>
 800806e:	230c      	movs	r3, #12
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	e7d6      	b.n	8008022 <_free_r+0x26>
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	1961      	adds	r1, r4, r5
 8008078:	428b      	cmp	r3, r1
 800807a:	bf04      	itt	eq
 800807c:	6819      	ldreq	r1, [r3, #0]
 800807e:	685b      	ldreq	r3, [r3, #4]
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	bf04      	itt	eq
 8008084:	1949      	addeq	r1, r1, r5
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	6054      	str	r4, [r2, #4]
 800808a:	e7ca      	b.n	8008022 <_free_r+0x26>
 800808c:	b003      	add	sp, #12
 800808e:	bd30      	pop	{r4, r5, pc}
 8008090:	2000071c 	.word	0x2000071c

08008094 <__assert_func>:
 8008094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008096:	4614      	mov	r4, r2
 8008098:	461a      	mov	r2, r3
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <__assert_func+0x2c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4605      	mov	r5, r0
 80080a0:	68d8      	ldr	r0, [r3, #12]
 80080a2:	b14c      	cbz	r4, 80080b8 <__assert_func+0x24>
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <__assert_func+0x30>)
 80080a6:	9100      	str	r1, [sp, #0]
 80080a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080ac:	4906      	ldr	r1, [pc, #24]	; (80080c8 <__assert_func+0x34>)
 80080ae:	462b      	mov	r3, r5
 80080b0:	f000 f80e 	bl	80080d0 <fiprintf>
 80080b4:	f000 fa5a 	bl	800856c <abort>
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <__assert_func+0x38>)
 80080ba:	461c      	mov	r4, r3
 80080bc:	e7f3      	b.n	80080a6 <__assert_func+0x12>
 80080be:	bf00      	nop
 80080c0:	20000310 	.word	0x20000310
 80080c4:	080091fc 	.word	0x080091fc
 80080c8:	08009209 	.word	0x08009209
 80080cc:	08009237 	.word	0x08009237

080080d0 <fiprintf>:
 80080d0:	b40e      	push	{r1, r2, r3}
 80080d2:	b503      	push	{r0, r1, lr}
 80080d4:	4601      	mov	r1, r0
 80080d6:	ab03      	add	r3, sp, #12
 80080d8:	4805      	ldr	r0, [pc, #20]	; (80080f0 <fiprintf+0x20>)
 80080da:	f853 2b04 	ldr.w	r2, [r3], #4
 80080de:	6800      	ldr	r0, [r0, #0]
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	f000 f845 	bl	8008170 <_vfiprintf_r>
 80080e6:	b002      	add	sp, #8
 80080e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080ec:	b003      	add	sp, #12
 80080ee:	4770      	bx	lr
 80080f0:	20000310 	.word	0x20000310

080080f4 <__retarget_lock_init_recursive>:
 80080f4:	4770      	bx	lr

080080f6 <__retarget_lock_acquire_recursive>:
 80080f6:	4770      	bx	lr

080080f8 <__retarget_lock_release_recursive>:
 80080f8:	4770      	bx	lr

080080fa <__ascii_mbtowc>:
 80080fa:	b082      	sub	sp, #8
 80080fc:	b901      	cbnz	r1, 8008100 <__ascii_mbtowc+0x6>
 80080fe:	a901      	add	r1, sp, #4
 8008100:	b142      	cbz	r2, 8008114 <__ascii_mbtowc+0x1a>
 8008102:	b14b      	cbz	r3, 8008118 <__ascii_mbtowc+0x1e>
 8008104:	7813      	ldrb	r3, [r2, #0]
 8008106:	600b      	str	r3, [r1, #0]
 8008108:	7812      	ldrb	r2, [r2, #0]
 800810a:	1e10      	subs	r0, r2, #0
 800810c:	bf18      	it	ne
 800810e:	2001      	movne	r0, #1
 8008110:	b002      	add	sp, #8
 8008112:	4770      	bx	lr
 8008114:	4610      	mov	r0, r2
 8008116:	e7fb      	b.n	8008110 <__ascii_mbtowc+0x16>
 8008118:	f06f 0001 	mvn.w	r0, #1
 800811c:	e7f8      	b.n	8008110 <__ascii_mbtowc+0x16>

0800811e <__sfputc_r>:
 800811e:	6893      	ldr	r3, [r2, #8]
 8008120:	3b01      	subs	r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	b410      	push	{r4}
 8008126:	6093      	str	r3, [r2, #8]
 8008128:	da08      	bge.n	800813c <__sfputc_r+0x1e>
 800812a:	6994      	ldr	r4, [r2, #24]
 800812c:	42a3      	cmp	r3, r4
 800812e:	db01      	blt.n	8008134 <__sfputc_r+0x16>
 8008130:	290a      	cmp	r1, #10
 8008132:	d103      	bne.n	800813c <__sfputc_r+0x1e>
 8008134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008138:	f000 b94a 	b.w	80083d0 <__swbuf_r>
 800813c:	6813      	ldr	r3, [r2, #0]
 800813e:	1c58      	adds	r0, r3, #1
 8008140:	6010      	str	r0, [r2, #0]
 8008142:	7019      	strb	r1, [r3, #0]
 8008144:	4608      	mov	r0, r1
 8008146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800814a:	4770      	bx	lr

0800814c <__sfputs_r>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	4606      	mov	r6, r0
 8008150:	460f      	mov	r7, r1
 8008152:	4614      	mov	r4, r2
 8008154:	18d5      	adds	r5, r2, r3
 8008156:	42ac      	cmp	r4, r5
 8008158:	d101      	bne.n	800815e <__sfputs_r+0x12>
 800815a:	2000      	movs	r0, #0
 800815c:	e007      	b.n	800816e <__sfputs_r+0x22>
 800815e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008162:	463a      	mov	r2, r7
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff ffda 	bl	800811e <__sfputc_r>
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d1f3      	bne.n	8008156 <__sfputs_r+0xa>
 800816e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008170 <_vfiprintf_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	460d      	mov	r5, r1
 8008176:	b09d      	sub	sp, #116	; 0x74
 8008178:	4614      	mov	r4, r2
 800817a:	4698      	mov	r8, r3
 800817c:	4606      	mov	r6, r0
 800817e:	b118      	cbz	r0, 8008188 <_vfiprintf_r+0x18>
 8008180:	6983      	ldr	r3, [r0, #24]
 8008182:	b90b      	cbnz	r3, 8008188 <_vfiprintf_r+0x18>
 8008184:	f000 fb14 	bl	80087b0 <__sinit>
 8008188:	4b89      	ldr	r3, [pc, #548]	; (80083b0 <_vfiprintf_r+0x240>)
 800818a:	429d      	cmp	r5, r3
 800818c:	d11b      	bne.n	80081c6 <_vfiprintf_r+0x56>
 800818e:	6875      	ldr	r5, [r6, #4]
 8008190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008192:	07d9      	lsls	r1, r3, #31
 8008194:	d405      	bmi.n	80081a2 <_vfiprintf_r+0x32>
 8008196:	89ab      	ldrh	r3, [r5, #12]
 8008198:	059a      	lsls	r2, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_vfiprintf_r+0x32>
 800819c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800819e:	f7ff ffaa 	bl	80080f6 <__retarget_lock_acquire_recursive>
 80081a2:	89ab      	ldrh	r3, [r5, #12]
 80081a4:	071b      	lsls	r3, r3, #28
 80081a6:	d501      	bpl.n	80081ac <_vfiprintf_r+0x3c>
 80081a8:	692b      	ldr	r3, [r5, #16]
 80081aa:	b9eb      	cbnz	r3, 80081e8 <_vfiprintf_r+0x78>
 80081ac:	4629      	mov	r1, r5
 80081ae:	4630      	mov	r0, r6
 80081b0:	f000 f96e 	bl	8008490 <__swsetup_r>
 80081b4:	b1c0      	cbz	r0, 80081e8 <_vfiprintf_r+0x78>
 80081b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b8:	07dc      	lsls	r4, r3, #31
 80081ba:	d50e      	bpl.n	80081da <_vfiprintf_r+0x6a>
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	b01d      	add	sp, #116	; 0x74
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	4b7b      	ldr	r3, [pc, #492]	; (80083b4 <_vfiprintf_r+0x244>)
 80081c8:	429d      	cmp	r5, r3
 80081ca:	d101      	bne.n	80081d0 <_vfiprintf_r+0x60>
 80081cc:	68b5      	ldr	r5, [r6, #8]
 80081ce:	e7df      	b.n	8008190 <_vfiprintf_r+0x20>
 80081d0:	4b79      	ldr	r3, [pc, #484]	; (80083b8 <_vfiprintf_r+0x248>)
 80081d2:	429d      	cmp	r5, r3
 80081d4:	bf08      	it	eq
 80081d6:	68f5      	ldreq	r5, [r6, #12]
 80081d8:	e7da      	b.n	8008190 <_vfiprintf_r+0x20>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	0598      	lsls	r0, r3, #22
 80081de:	d4ed      	bmi.n	80081bc <_vfiprintf_r+0x4c>
 80081e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e2:	f7ff ff89 	bl	80080f8 <__retarget_lock_release_recursive>
 80081e6:	e7e9      	b.n	80081bc <_vfiprintf_r+0x4c>
 80081e8:	2300      	movs	r3, #0
 80081ea:	9309      	str	r3, [sp, #36]	; 0x24
 80081ec:	2320      	movs	r3, #32
 80081ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80081f6:	2330      	movs	r3, #48	; 0x30
 80081f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083bc <_vfiprintf_r+0x24c>
 80081fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008200:	f04f 0901 	mov.w	r9, #1
 8008204:	4623      	mov	r3, r4
 8008206:	469a      	mov	sl, r3
 8008208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800820c:	b10a      	cbz	r2, 8008212 <_vfiprintf_r+0xa2>
 800820e:	2a25      	cmp	r2, #37	; 0x25
 8008210:	d1f9      	bne.n	8008206 <_vfiprintf_r+0x96>
 8008212:	ebba 0b04 	subs.w	fp, sl, r4
 8008216:	d00b      	beq.n	8008230 <_vfiprintf_r+0xc0>
 8008218:	465b      	mov	r3, fp
 800821a:	4622      	mov	r2, r4
 800821c:	4629      	mov	r1, r5
 800821e:	4630      	mov	r0, r6
 8008220:	f7ff ff94 	bl	800814c <__sfputs_r>
 8008224:	3001      	adds	r0, #1
 8008226:	f000 80aa 	beq.w	800837e <_vfiprintf_r+0x20e>
 800822a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800822c:	445a      	add	r2, fp
 800822e:	9209      	str	r2, [sp, #36]	; 0x24
 8008230:	f89a 3000 	ldrb.w	r3, [sl]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 80a2 	beq.w	800837e <_vfiprintf_r+0x20e>
 800823a:	2300      	movs	r3, #0
 800823c:	f04f 32ff 	mov.w	r2, #4294967295
 8008240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008244:	f10a 0a01 	add.w	sl, sl, #1
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	9307      	str	r3, [sp, #28]
 800824c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008250:	931a      	str	r3, [sp, #104]	; 0x68
 8008252:	4654      	mov	r4, sl
 8008254:	2205      	movs	r2, #5
 8008256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800825a:	4858      	ldr	r0, [pc, #352]	; (80083bc <_vfiprintf_r+0x24c>)
 800825c:	f7f7 ffc0 	bl	80001e0 <memchr>
 8008260:	9a04      	ldr	r2, [sp, #16]
 8008262:	b9d8      	cbnz	r0, 800829c <_vfiprintf_r+0x12c>
 8008264:	06d1      	lsls	r1, r2, #27
 8008266:	bf44      	itt	mi
 8008268:	2320      	movmi	r3, #32
 800826a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800826e:	0713      	lsls	r3, r2, #28
 8008270:	bf44      	itt	mi
 8008272:	232b      	movmi	r3, #43	; 0x2b
 8008274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008278:	f89a 3000 	ldrb.w	r3, [sl]
 800827c:	2b2a      	cmp	r3, #42	; 0x2a
 800827e:	d015      	beq.n	80082ac <_vfiprintf_r+0x13c>
 8008280:	9a07      	ldr	r2, [sp, #28]
 8008282:	4654      	mov	r4, sl
 8008284:	2000      	movs	r0, #0
 8008286:	f04f 0c0a 	mov.w	ip, #10
 800828a:	4621      	mov	r1, r4
 800828c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008290:	3b30      	subs	r3, #48	; 0x30
 8008292:	2b09      	cmp	r3, #9
 8008294:	d94e      	bls.n	8008334 <_vfiprintf_r+0x1c4>
 8008296:	b1b0      	cbz	r0, 80082c6 <_vfiprintf_r+0x156>
 8008298:	9207      	str	r2, [sp, #28]
 800829a:	e014      	b.n	80082c6 <_vfiprintf_r+0x156>
 800829c:	eba0 0308 	sub.w	r3, r0, r8
 80082a0:	fa09 f303 	lsl.w	r3, r9, r3
 80082a4:	4313      	orrs	r3, r2
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	46a2      	mov	sl, r4
 80082aa:	e7d2      	b.n	8008252 <_vfiprintf_r+0xe2>
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	1d19      	adds	r1, r3, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	9103      	str	r1, [sp, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bfbb      	ittet	lt
 80082b8:	425b      	neglt	r3, r3
 80082ba:	f042 0202 	orrlt.w	r2, r2, #2
 80082be:	9307      	strge	r3, [sp, #28]
 80082c0:	9307      	strlt	r3, [sp, #28]
 80082c2:	bfb8      	it	lt
 80082c4:	9204      	strlt	r2, [sp, #16]
 80082c6:	7823      	ldrb	r3, [r4, #0]
 80082c8:	2b2e      	cmp	r3, #46	; 0x2e
 80082ca:	d10c      	bne.n	80082e6 <_vfiprintf_r+0x176>
 80082cc:	7863      	ldrb	r3, [r4, #1]
 80082ce:	2b2a      	cmp	r3, #42	; 0x2a
 80082d0:	d135      	bne.n	800833e <_vfiprintf_r+0x1ce>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	1d1a      	adds	r2, r3, #4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	9203      	str	r2, [sp, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bfb8      	it	lt
 80082de:	f04f 33ff 	movlt.w	r3, #4294967295
 80082e2:	3402      	adds	r4, #2
 80082e4:	9305      	str	r3, [sp, #20]
 80082e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083cc <_vfiprintf_r+0x25c>
 80082ea:	7821      	ldrb	r1, [r4, #0]
 80082ec:	2203      	movs	r2, #3
 80082ee:	4650      	mov	r0, sl
 80082f0:	f7f7 ff76 	bl	80001e0 <memchr>
 80082f4:	b140      	cbz	r0, 8008308 <_vfiprintf_r+0x198>
 80082f6:	2340      	movs	r3, #64	; 0x40
 80082f8:	eba0 000a 	sub.w	r0, r0, sl
 80082fc:	fa03 f000 	lsl.w	r0, r3, r0
 8008300:	9b04      	ldr	r3, [sp, #16]
 8008302:	4303      	orrs	r3, r0
 8008304:	3401      	adds	r4, #1
 8008306:	9304      	str	r3, [sp, #16]
 8008308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830c:	482c      	ldr	r0, [pc, #176]	; (80083c0 <_vfiprintf_r+0x250>)
 800830e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008312:	2206      	movs	r2, #6
 8008314:	f7f7 ff64 	bl	80001e0 <memchr>
 8008318:	2800      	cmp	r0, #0
 800831a:	d03f      	beq.n	800839c <_vfiprintf_r+0x22c>
 800831c:	4b29      	ldr	r3, [pc, #164]	; (80083c4 <_vfiprintf_r+0x254>)
 800831e:	bb1b      	cbnz	r3, 8008368 <_vfiprintf_r+0x1f8>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	3307      	adds	r3, #7
 8008324:	f023 0307 	bic.w	r3, r3, #7
 8008328:	3308      	adds	r3, #8
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832e:	443b      	add	r3, r7
 8008330:	9309      	str	r3, [sp, #36]	; 0x24
 8008332:	e767      	b.n	8008204 <_vfiprintf_r+0x94>
 8008334:	fb0c 3202 	mla	r2, ip, r2, r3
 8008338:	460c      	mov	r4, r1
 800833a:	2001      	movs	r0, #1
 800833c:	e7a5      	b.n	800828a <_vfiprintf_r+0x11a>
 800833e:	2300      	movs	r3, #0
 8008340:	3401      	adds	r4, #1
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	4619      	mov	r1, r3
 8008346:	f04f 0c0a 	mov.w	ip, #10
 800834a:	4620      	mov	r0, r4
 800834c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008350:	3a30      	subs	r2, #48	; 0x30
 8008352:	2a09      	cmp	r2, #9
 8008354:	d903      	bls.n	800835e <_vfiprintf_r+0x1ee>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0c5      	beq.n	80082e6 <_vfiprintf_r+0x176>
 800835a:	9105      	str	r1, [sp, #20]
 800835c:	e7c3      	b.n	80082e6 <_vfiprintf_r+0x176>
 800835e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008362:	4604      	mov	r4, r0
 8008364:	2301      	movs	r3, #1
 8008366:	e7f0      	b.n	800834a <_vfiprintf_r+0x1da>
 8008368:	ab03      	add	r3, sp, #12
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	462a      	mov	r2, r5
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <_vfiprintf_r+0x258>)
 8008370:	a904      	add	r1, sp, #16
 8008372:	4630      	mov	r0, r6
 8008374:	f7fe f852 	bl	800641c <_printf_float>
 8008378:	4607      	mov	r7, r0
 800837a:	1c78      	adds	r0, r7, #1
 800837c:	d1d6      	bne.n	800832c <_vfiprintf_r+0x1bc>
 800837e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008380:	07d9      	lsls	r1, r3, #31
 8008382:	d405      	bmi.n	8008390 <_vfiprintf_r+0x220>
 8008384:	89ab      	ldrh	r3, [r5, #12]
 8008386:	059a      	lsls	r2, r3, #22
 8008388:	d402      	bmi.n	8008390 <_vfiprintf_r+0x220>
 800838a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800838c:	f7ff feb4 	bl	80080f8 <__retarget_lock_release_recursive>
 8008390:	89ab      	ldrh	r3, [r5, #12]
 8008392:	065b      	lsls	r3, r3, #25
 8008394:	f53f af12 	bmi.w	80081bc <_vfiprintf_r+0x4c>
 8008398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800839a:	e711      	b.n	80081c0 <_vfiprintf_r+0x50>
 800839c:	ab03      	add	r3, sp, #12
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	462a      	mov	r2, r5
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <_vfiprintf_r+0x258>)
 80083a4:	a904      	add	r1, sp, #16
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7fe fadc 	bl	8006964 <_printf_i>
 80083ac:	e7e4      	b.n	8008378 <_vfiprintf_r+0x208>
 80083ae:	bf00      	nop
 80083b0:	08009374 	.word	0x08009374
 80083b4:	08009394 	.word	0x08009394
 80083b8:	08009354 	.word	0x08009354
 80083bc:	08009242 	.word	0x08009242
 80083c0:	0800924c 	.word	0x0800924c
 80083c4:	0800641d 	.word	0x0800641d
 80083c8:	0800814d 	.word	0x0800814d
 80083cc:	08009248 	.word	0x08009248

080083d0 <__swbuf_r>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	460e      	mov	r6, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	4605      	mov	r5, r0
 80083d8:	b118      	cbz	r0, 80083e2 <__swbuf_r+0x12>
 80083da:	6983      	ldr	r3, [r0, #24]
 80083dc:	b90b      	cbnz	r3, 80083e2 <__swbuf_r+0x12>
 80083de:	f000 f9e7 	bl	80087b0 <__sinit>
 80083e2:	4b21      	ldr	r3, [pc, #132]	; (8008468 <__swbuf_r+0x98>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	d12b      	bne.n	8008440 <__swbuf_r+0x70>
 80083e8:	686c      	ldr	r4, [r5, #4]
 80083ea:	69a3      	ldr	r3, [r4, #24]
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	071a      	lsls	r2, r3, #28
 80083f2:	d52f      	bpl.n	8008454 <__swbuf_r+0x84>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	b36b      	cbz	r3, 8008454 <__swbuf_r+0x84>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	6820      	ldr	r0, [r4, #0]
 80083fc:	1ac0      	subs	r0, r0, r3
 80083fe:	6963      	ldr	r3, [r4, #20]
 8008400:	b2f6      	uxtb	r6, r6
 8008402:	4283      	cmp	r3, r0
 8008404:	4637      	mov	r7, r6
 8008406:	dc04      	bgt.n	8008412 <__swbuf_r+0x42>
 8008408:	4621      	mov	r1, r4
 800840a:	4628      	mov	r0, r5
 800840c:	f000 f93c 	bl	8008688 <_fflush_r>
 8008410:	bb30      	cbnz	r0, 8008460 <__swbuf_r+0x90>
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	3b01      	subs	r3, #1
 8008416:	60a3      	str	r3, [r4, #8]
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	701e      	strb	r6, [r3, #0]
 8008420:	6963      	ldr	r3, [r4, #20]
 8008422:	3001      	adds	r0, #1
 8008424:	4283      	cmp	r3, r0
 8008426:	d004      	beq.n	8008432 <__swbuf_r+0x62>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	07db      	lsls	r3, r3, #31
 800842c:	d506      	bpl.n	800843c <__swbuf_r+0x6c>
 800842e:	2e0a      	cmp	r6, #10
 8008430:	d104      	bne.n	800843c <__swbuf_r+0x6c>
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	f000 f927 	bl	8008688 <_fflush_r>
 800843a:	b988      	cbnz	r0, 8008460 <__swbuf_r+0x90>
 800843c:	4638      	mov	r0, r7
 800843e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008440:	4b0a      	ldr	r3, [pc, #40]	; (800846c <__swbuf_r+0x9c>)
 8008442:	429c      	cmp	r4, r3
 8008444:	d101      	bne.n	800844a <__swbuf_r+0x7a>
 8008446:	68ac      	ldr	r4, [r5, #8]
 8008448:	e7cf      	b.n	80083ea <__swbuf_r+0x1a>
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <__swbuf_r+0xa0>)
 800844c:	429c      	cmp	r4, r3
 800844e:	bf08      	it	eq
 8008450:	68ec      	ldreq	r4, [r5, #12]
 8008452:	e7ca      	b.n	80083ea <__swbuf_r+0x1a>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f81a 	bl	8008490 <__swsetup_r>
 800845c:	2800      	cmp	r0, #0
 800845e:	d0cb      	beq.n	80083f8 <__swbuf_r+0x28>
 8008460:	f04f 37ff 	mov.w	r7, #4294967295
 8008464:	e7ea      	b.n	800843c <__swbuf_r+0x6c>
 8008466:	bf00      	nop
 8008468:	08009374 	.word	0x08009374
 800846c:	08009394 	.word	0x08009394
 8008470:	08009354 	.word	0x08009354

08008474 <__ascii_wctomb>:
 8008474:	b149      	cbz	r1, 800848a <__ascii_wctomb+0x16>
 8008476:	2aff      	cmp	r2, #255	; 0xff
 8008478:	bf85      	ittet	hi
 800847a:	238a      	movhi	r3, #138	; 0x8a
 800847c:	6003      	strhi	r3, [r0, #0]
 800847e:	700a      	strbls	r2, [r1, #0]
 8008480:	f04f 30ff 	movhi.w	r0, #4294967295
 8008484:	bf98      	it	ls
 8008486:	2001      	movls	r0, #1
 8008488:	4770      	bx	lr
 800848a:	4608      	mov	r0, r1
 800848c:	4770      	bx	lr
	...

08008490 <__swsetup_r>:
 8008490:	4b32      	ldr	r3, [pc, #200]	; (800855c <__swsetup_r+0xcc>)
 8008492:	b570      	push	{r4, r5, r6, lr}
 8008494:	681d      	ldr	r5, [r3, #0]
 8008496:	4606      	mov	r6, r0
 8008498:	460c      	mov	r4, r1
 800849a:	b125      	cbz	r5, 80084a6 <__swsetup_r+0x16>
 800849c:	69ab      	ldr	r3, [r5, #24]
 800849e:	b913      	cbnz	r3, 80084a6 <__swsetup_r+0x16>
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 f985 	bl	80087b0 <__sinit>
 80084a6:	4b2e      	ldr	r3, [pc, #184]	; (8008560 <__swsetup_r+0xd0>)
 80084a8:	429c      	cmp	r4, r3
 80084aa:	d10f      	bne.n	80084cc <__swsetup_r+0x3c>
 80084ac:	686c      	ldr	r4, [r5, #4]
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084b4:	0719      	lsls	r1, r3, #28
 80084b6:	d42c      	bmi.n	8008512 <__swsetup_r+0x82>
 80084b8:	06dd      	lsls	r5, r3, #27
 80084ba:	d411      	bmi.n	80084e0 <__swsetup_r+0x50>
 80084bc:	2309      	movs	r3, #9
 80084be:	6033      	str	r3, [r6, #0]
 80084c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ca:	e03e      	b.n	800854a <__swsetup_r+0xba>
 80084cc:	4b25      	ldr	r3, [pc, #148]	; (8008564 <__swsetup_r+0xd4>)
 80084ce:	429c      	cmp	r4, r3
 80084d0:	d101      	bne.n	80084d6 <__swsetup_r+0x46>
 80084d2:	68ac      	ldr	r4, [r5, #8]
 80084d4:	e7eb      	b.n	80084ae <__swsetup_r+0x1e>
 80084d6:	4b24      	ldr	r3, [pc, #144]	; (8008568 <__swsetup_r+0xd8>)
 80084d8:	429c      	cmp	r4, r3
 80084da:	bf08      	it	eq
 80084dc:	68ec      	ldreq	r4, [r5, #12]
 80084de:	e7e6      	b.n	80084ae <__swsetup_r+0x1e>
 80084e0:	0758      	lsls	r0, r3, #29
 80084e2:	d512      	bpl.n	800850a <__swsetup_r+0x7a>
 80084e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084e6:	b141      	cbz	r1, 80084fa <__swsetup_r+0x6a>
 80084e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084ec:	4299      	cmp	r1, r3
 80084ee:	d002      	beq.n	80084f6 <__swsetup_r+0x66>
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff fd83 	bl	8007ffc <_free_r>
 80084f6:	2300      	movs	r3, #0
 80084f8:	6363      	str	r3, [r4, #52]	; 0x34
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	2300      	movs	r3, #0
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f043 0308 	orr.w	r3, r3, #8
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	b94b      	cbnz	r3, 800852a <__swsetup_r+0x9a>
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800851c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008520:	d003      	beq.n	800852a <__swsetup_r+0x9a>
 8008522:	4621      	mov	r1, r4
 8008524:	4630      	mov	r0, r6
 8008526:	f000 fa05 	bl	8008934 <__smakebuf_r>
 800852a:	89a0      	ldrh	r0, [r4, #12]
 800852c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008530:	f010 0301 	ands.w	r3, r0, #1
 8008534:	d00a      	beq.n	800854c <__swsetup_r+0xbc>
 8008536:	2300      	movs	r3, #0
 8008538:	60a3      	str	r3, [r4, #8]
 800853a:	6963      	ldr	r3, [r4, #20]
 800853c:	425b      	negs	r3, r3
 800853e:	61a3      	str	r3, [r4, #24]
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	b943      	cbnz	r3, 8008556 <__swsetup_r+0xc6>
 8008544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008548:	d1ba      	bne.n	80084c0 <__swsetup_r+0x30>
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	0781      	lsls	r1, r0, #30
 800854e:	bf58      	it	pl
 8008550:	6963      	ldrpl	r3, [r4, #20]
 8008552:	60a3      	str	r3, [r4, #8]
 8008554:	e7f4      	b.n	8008540 <__swsetup_r+0xb0>
 8008556:	2000      	movs	r0, #0
 8008558:	e7f7      	b.n	800854a <__swsetup_r+0xba>
 800855a:	bf00      	nop
 800855c:	20000310 	.word	0x20000310
 8008560:	08009374 	.word	0x08009374
 8008564:	08009394 	.word	0x08009394
 8008568:	08009354 	.word	0x08009354

0800856c <abort>:
 800856c:	b508      	push	{r3, lr}
 800856e:	2006      	movs	r0, #6
 8008570:	f000 fa48 	bl	8008a04 <raise>
 8008574:	2001      	movs	r0, #1
 8008576:	f7f8 ffaf 	bl	80014d8 <_exit>
	...

0800857c <__sflush_r>:
 800857c:	898a      	ldrh	r2, [r1, #12]
 800857e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008582:	4605      	mov	r5, r0
 8008584:	0710      	lsls	r0, r2, #28
 8008586:	460c      	mov	r4, r1
 8008588:	d458      	bmi.n	800863c <__sflush_r+0xc0>
 800858a:	684b      	ldr	r3, [r1, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	dc05      	bgt.n	800859c <__sflush_r+0x20>
 8008590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008592:	2b00      	cmp	r3, #0
 8008594:	dc02      	bgt.n	800859c <__sflush_r+0x20>
 8008596:	2000      	movs	r0, #0
 8008598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d0f9      	beq.n	8008596 <__sflush_r+0x1a>
 80085a2:	2300      	movs	r3, #0
 80085a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085a8:	682f      	ldr	r7, [r5, #0]
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	d032      	beq.n	8008614 <__sflush_r+0x98>
 80085ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	075a      	lsls	r2, r3, #29
 80085b4:	d505      	bpl.n	80085c2 <__sflush_r+0x46>
 80085b6:	6863      	ldr	r3, [r4, #4]
 80085b8:	1ac0      	subs	r0, r0, r3
 80085ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085bc:	b10b      	cbz	r3, 80085c2 <__sflush_r+0x46>
 80085be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085c0:	1ac0      	subs	r0, r0, r3
 80085c2:	2300      	movs	r3, #0
 80085c4:	4602      	mov	r2, r0
 80085c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c8:	6a21      	ldr	r1, [r4, #32]
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b0      	blx	r6
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	d106      	bne.n	80085e2 <__sflush_r+0x66>
 80085d4:	6829      	ldr	r1, [r5, #0]
 80085d6:	291d      	cmp	r1, #29
 80085d8:	d82c      	bhi.n	8008634 <__sflush_r+0xb8>
 80085da:	4a2a      	ldr	r2, [pc, #168]	; (8008684 <__sflush_r+0x108>)
 80085dc:	40ca      	lsrs	r2, r1
 80085de:	07d6      	lsls	r6, r2, #31
 80085e0:	d528      	bpl.n	8008634 <__sflush_r+0xb8>
 80085e2:	2200      	movs	r2, #0
 80085e4:	6062      	str	r2, [r4, #4]
 80085e6:	04d9      	lsls	r1, r3, #19
 80085e8:	6922      	ldr	r2, [r4, #16]
 80085ea:	6022      	str	r2, [r4, #0]
 80085ec:	d504      	bpl.n	80085f8 <__sflush_r+0x7c>
 80085ee:	1c42      	adds	r2, r0, #1
 80085f0:	d101      	bne.n	80085f6 <__sflush_r+0x7a>
 80085f2:	682b      	ldr	r3, [r5, #0]
 80085f4:	b903      	cbnz	r3, 80085f8 <__sflush_r+0x7c>
 80085f6:	6560      	str	r0, [r4, #84]	; 0x54
 80085f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085fa:	602f      	str	r7, [r5, #0]
 80085fc:	2900      	cmp	r1, #0
 80085fe:	d0ca      	beq.n	8008596 <__sflush_r+0x1a>
 8008600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008604:	4299      	cmp	r1, r3
 8008606:	d002      	beq.n	800860e <__sflush_r+0x92>
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff fcf7 	bl	8007ffc <_free_r>
 800860e:	2000      	movs	r0, #0
 8008610:	6360      	str	r0, [r4, #52]	; 0x34
 8008612:	e7c1      	b.n	8008598 <__sflush_r+0x1c>
 8008614:	6a21      	ldr	r1, [r4, #32]
 8008616:	2301      	movs	r3, #1
 8008618:	4628      	mov	r0, r5
 800861a:	47b0      	blx	r6
 800861c:	1c41      	adds	r1, r0, #1
 800861e:	d1c7      	bne.n	80085b0 <__sflush_r+0x34>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0c4      	beq.n	80085b0 <__sflush_r+0x34>
 8008626:	2b1d      	cmp	r3, #29
 8008628:	d001      	beq.n	800862e <__sflush_r+0xb2>
 800862a:	2b16      	cmp	r3, #22
 800862c:	d101      	bne.n	8008632 <__sflush_r+0xb6>
 800862e:	602f      	str	r7, [r5, #0]
 8008630:	e7b1      	b.n	8008596 <__sflush_r+0x1a>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008638:	81a3      	strh	r3, [r4, #12]
 800863a:	e7ad      	b.n	8008598 <__sflush_r+0x1c>
 800863c:	690f      	ldr	r7, [r1, #16]
 800863e:	2f00      	cmp	r7, #0
 8008640:	d0a9      	beq.n	8008596 <__sflush_r+0x1a>
 8008642:	0793      	lsls	r3, r2, #30
 8008644:	680e      	ldr	r6, [r1, #0]
 8008646:	bf08      	it	eq
 8008648:	694b      	ldreq	r3, [r1, #20]
 800864a:	600f      	str	r7, [r1, #0]
 800864c:	bf18      	it	ne
 800864e:	2300      	movne	r3, #0
 8008650:	eba6 0807 	sub.w	r8, r6, r7
 8008654:	608b      	str	r3, [r1, #8]
 8008656:	f1b8 0f00 	cmp.w	r8, #0
 800865a:	dd9c      	ble.n	8008596 <__sflush_r+0x1a>
 800865c:	6a21      	ldr	r1, [r4, #32]
 800865e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008660:	4643      	mov	r3, r8
 8008662:	463a      	mov	r2, r7
 8008664:	4628      	mov	r0, r5
 8008666:	47b0      	blx	r6
 8008668:	2800      	cmp	r0, #0
 800866a:	dc06      	bgt.n	800867a <__sflush_r+0xfe>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	e78e      	b.n	8008598 <__sflush_r+0x1c>
 800867a:	4407      	add	r7, r0
 800867c:	eba8 0800 	sub.w	r8, r8, r0
 8008680:	e7e9      	b.n	8008656 <__sflush_r+0xda>
 8008682:	bf00      	nop
 8008684:	20400001 	.word	0x20400001

08008688 <_fflush_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	690b      	ldr	r3, [r1, #16]
 800868c:	4605      	mov	r5, r0
 800868e:	460c      	mov	r4, r1
 8008690:	b913      	cbnz	r3, 8008698 <_fflush_r+0x10>
 8008692:	2500      	movs	r5, #0
 8008694:	4628      	mov	r0, r5
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	b118      	cbz	r0, 80086a2 <_fflush_r+0x1a>
 800869a:	6983      	ldr	r3, [r0, #24]
 800869c:	b90b      	cbnz	r3, 80086a2 <_fflush_r+0x1a>
 800869e:	f000 f887 	bl	80087b0 <__sinit>
 80086a2:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <_fflush_r+0x6c>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	d11b      	bne.n	80086e0 <_fflush_r+0x58>
 80086a8:	686c      	ldr	r4, [r5, #4]
 80086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0ef      	beq.n	8008692 <_fflush_r+0xa>
 80086b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086b4:	07d0      	lsls	r0, r2, #31
 80086b6:	d404      	bmi.n	80086c2 <_fflush_r+0x3a>
 80086b8:	0599      	lsls	r1, r3, #22
 80086ba:	d402      	bmi.n	80086c2 <_fflush_r+0x3a>
 80086bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086be:	f7ff fd1a 	bl	80080f6 <__retarget_lock_acquire_recursive>
 80086c2:	4628      	mov	r0, r5
 80086c4:	4621      	mov	r1, r4
 80086c6:	f7ff ff59 	bl	800857c <__sflush_r>
 80086ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086cc:	07da      	lsls	r2, r3, #31
 80086ce:	4605      	mov	r5, r0
 80086d0:	d4e0      	bmi.n	8008694 <_fflush_r+0xc>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	059b      	lsls	r3, r3, #22
 80086d6:	d4dd      	bmi.n	8008694 <_fflush_r+0xc>
 80086d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086da:	f7ff fd0d 	bl	80080f8 <__retarget_lock_release_recursive>
 80086de:	e7d9      	b.n	8008694 <_fflush_r+0xc>
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <_fflush_r+0x70>)
 80086e2:	429c      	cmp	r4, r3
 80086e4:	d101      	bne.n	80086ea <_fflush_r+0x62>
 80086e6:	68ac      	ldr	r4, [r5, #8]
 80086e8:	e7df      	b.n	80086aa <_fflush_r+0x22>
 80086ea:	4b04      	ldr	r3, [pc, #16]	; (80086fc <_fflush_r+0x74>)
 80086ec:	429c      	cmp	r4, r3
 80086ee:	bf08      	it	eq
 80086f0:	68ec      	ldreq	r4, [r5, #12]
 80086f2:	e7da      	b.n	80086aa <_fflush_r+0x22>
 80086f4:	08009374 	.word	0x08009374
 80086f8:	08009394 	.word	0x08009394
 80086fc:	08009354 	.word	0x08009354

08008700 <std>:
 8008700:	2300      	movs	r3, #0
 8008702:	b510      	push	{r4, lr}
 8008704:	4604      	mov	r4, r0
 8008706:	e9c0 3300 	strd	r3, r3, [r0]
 800870a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800870e:	6083      	str	r3, [r0, #8]
 8008710:	8181      	strh	r1, [r0, #12]
 8008712:	6643      	str	r3, [r0, #100]	; 0x64
 8008714:	81c2      	strh	r2, [r0, #14]
 8008716:	6183      	str	r3, [r0, #24]
 8008718:	4619      	mov	r1, r3
 800871a:	2208      	movs	r2, #8
 800871c:	305c      	adds	r0, #92	; 0x5c
 800871e:	f7fd fd2b 	bl	8006178 <memset>
 8008722:	4b05      	ldr	r3, [pc, #20]	; (8008738 <std+0x38>)
 8008724:	6263      	str	r3, [r4, #36]	; 0x24
 8008726:	4b05      	ldr	r3, [pc, #20]	; (800873c <std+0x3c>)
 8008728:	62a3      	str	r3, [r4, #40]	; 0x28
 800872a:	4b05      	ldr	r3, [pc, #20]	; (8008740 <std+0x40>)
 800872c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <std+0x44>)
 8008730:	6224      	str	r4, [r4, #32]
 8008732:	6323      	str	r3, [r4, #48]	; 0x30
 8008734:	bd10      	pop	{r4, pc}
 8008736:	bf00      	nop
 8008738:	08008a3d 	.word	0x08008a3d
 800873c:	08008a5f 	.word	0x08008a5f
 8008740:	08008a97 	.word	0x08008a97
 8008744:	08008abb 	.word	0x08008abb

08008748 <_cleanup_r>:
 8008748:	4901      	ldr	r1, [pc, #4]	; (8008750 <_cleanup_r+0x8>)
 800874a:	f000 b8af 	b.w	80088ac <_fwalk_reent>
 800874e:	bf00      	nop
 8008750:	08008689 	.word	0x08008689

08008754 <__sfmoreglue>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	2268      	movs	r2, #104	; 0x68
 8008758:	1e4d      	subs	r5, r1, #1
 800875a:	4355      	muls	r5, r2
 800875c:	460e      	mov	r6, r1
 800875e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008762:	f7fd fd47 	bl	80061f4 <_malloc_r>
 8008766:	4604      	mov	r4, r0
 8008768:	b140      	cbz	r0, 800877c <__sfmoreglue+0x28>
 800876a:	2100      	movs	r1, #0
 800876c:	e9c0 1600 	strd	r1, r6, [r0]
 8008770:	300c      	adds	r0, #12
 8008772:	60a0      	str	r0, [r4, #8]
 8008774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008778:	f7fd fcfe 	bl	8006178 <memset>
 800877c:	4620      	mov	r0, r4
 800877e:	bd70      	pop	{r4, r5, r6, pc}

08008780 <__sfp_lock_acquire>:
 8008780:	4801      	ldr	r0, [pc, #4]	; (8008788 <__sfp_lock_acquire+0x8>)
 8008782:	f7ff bcb8 	b.w	80080f6 <__retarget_lock_acquire_recursive>
 8008786:	bf00      	nop
 8008788:	20000729 	.word	0x20000729

0800878c <__sfp_lock_release>:
 800878c:	4801      	ldr	r0, [pc, #4]	; (8008794 <__sfp_lock_release+0x8>)
 800878e:	f7ff bcb3 	b.w	80080f8 <__retarget_lock_release_recursive>
 8008792:	bf00      	nop
 8008794:	20000729 	.word	0x20000729

08008798 <__sinit_lock_acquire>:
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <__sinit_lock_acquire+0x8>)
 800879a:	f7ff bcac 	b.w	80080f6 <__retarget_lock_acquire_recursive>
 800879e:	bf00      	nop
 80087a0:	2000072a 	.word	0x2000072a

080087a4 <__sinit_lock_release>:
 80087a4:	4801      	ldr	r0, [pc, #4]	; (80087ac <__sinit_lock_release+0x8>)
 80087a6:	f7ff bca7 	b.w	80080f8 <__retarget_lock_release_recursive>
 80087aa:	bf00      	nop
 80087ac:	2000072a 	.word	0x2000072a

080087b0 <__sinit>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4604      	mov	r4, r0
 80087b4:	f7ff fff0 	bl	8008798 <__sinit_lock_acquire>
 80087b8:	69a3      	ldr	r3, [r4, #24]
 80087ba:	b11b      	cbz	r3, 80087c4 <__sinit+0x14>
 80087bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c0:	f7ff bff0 	b.w	80087a4 <__sinit_lock_release>
 80087c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087c8:	6523      	str	r3, [r4, #80]	; 0x50
 80087ca:	4b13      	ldr	r3, [pc, #76]	; (8008818 <__sinit+0x68>)
 80087cc:	4a13      	ldr	r2, [pc, #76]	; (800881c <__sinit+0x6c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	bf04      	itt	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	61a3      	streq	r3, [r4, #24]
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 f820 	bl	8008820 <__sfp>
 80087e0:	6060      	str	r0, [r4, #4]
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 f81c 	bl	8008820 <__sfp>
 80087e8:	60a0      	str	r0, [r4, #8]
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 f818 	bl	8008820 <__sfp>
 80087f0:	2200      	movs	r2, #0
 80087f2:	60e0      	str	r0, [r4, #12]
 80087f4:	2104      	movs	r1, #4
 80087f6:	6860      	ldr	r0, [r4, #4]
 80087f8:	f7ff ff82 	bl	8008700 <std>
 80087fc:	68a0      	ldr	r0, [r4, #8]
 80087fe:	2201      	movs	r2, #1
 8008800:	2109      	movs	r1, #9
 8008802:	f7ff ff7d 	bl	8008700 <std>
 8008806:	68e0      	ldr	r0, [r4, #12]
 8008808:	2202      	movs	r2, #2
 800880a:	2112      	movs	r1, #18
 800880c:	f7ff ff78 	bl	8008700 <std>
 8008810:	2301      	movs	r3, #1
 8008812:	61a3      	str	r3, [r4, #24]
 8008814:	e7d2      	b.n	80087bc <__sinit+0xc>
 8008816:	bf00      	nop
 8008818:	08008fd8 	.word	0x08008fd8
 800881c:	08008749 	.word	0x08008749

08008820 <__sfp>:
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008822:	4607      	mov	r7, r0
 8008824:	f7ff ffac 	bl	8008780 <__sfp_lock_acquire>
 8008828:	4b1e      	ldr	r3, [pc, #120]	; (80088a4 <__sfp+0x84>)
 800882a:	681e      	ldr	r6, [r3, #0]
 800882c:	69b3      	ldr	r3, [r6, #24]
 800882e:	b913      	cbnz	r3, 8008836 <__sfp+0x16>
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff ffbd 	bl	80087b0 <__sinit>
 8008836:	3648      	adds	r6, #72	; 0x48
 8008838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800883c:	3b01      	subs	r3, #1
 800883e:	d503      	bpl.n	8008848 <__sfp+0x28>
 8008840:	6833      	ldr	r3, [r6, #0]
 8008842:	b30b      	cbz	r3, 8008888 <__sfp+0x68>
 8008844:	6836      	ldr	r6, [r6, #0]
 8008846:	e7f7      	b.n	8008838 <__sfp+0x18>
 8008848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800884c:	b9d5      	cbnz	r5, 8008884 <__sfp+0x64>
 800884e:	4b16      	ldr	r3, [pc, #88]	; (80088a8 <__sfp+0x88>)
 8008850:	60e3      	str	r3, [r4, #12]
 8008852:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008856:	6665      	str	r5, [r4, #100]	; 0x64
 8008858:	f7ff fc4c 	bl	80080f4 <__retarget_lock_init_recursive>
 800885c:	f7ff ff96 	bl	800878c <__sfp_lock_release>
 8008860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008868:	6025      	str	r5, [r4, #0]
 800886a:	61a5      	str	r5, [r4, #24]
 800886c:	2208      	movs	r2, #8
 800886e:	4629      	mov	r1, r5
 8008870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008874:	f7fd fc80 	bl	8006178 <memset>
 8008878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800887c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008880:	4620      	mov	r0, r4
 8008882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008884:	3468      	adds	r4, #104	; 0x68
 8008886:	e7d9      	b.n	800883c <__sfp+0x1c>
 8008888:	2104      	movs	r1, #4
 800888a:	4638      	mov	r0, r7
 800888c:	f7ff ff62 	bl	8008754 <__sfmoreglue>
 8008890:	4604      	mov	r4, r0
 8008892:	6030      	str	r0, [r6, #0]
 8008894:	2800      	cmp	r0, #0
 8008896:	d1d5      	bne.n	8008844 <__sfp+0x24>
 8008898:	f7ff ff78 	bl	800878c <__sfp_lock_release>
 800889c:	230c      	movs	r3, #12
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	e7ee      	b.n	8008880 <__sfp+0x60>
 80088a2:	bf00      	nop
 80088a4:	08008fd8 	.word	0x08008fd8
 80088a8:	ffff0001 	.word	0xffff0001

080088ac <_fwalk_reent>:
 80088ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b0:	4606      	mov	r6, r0
 80088b2:	4688      	mov	r8, r1
 80088b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088b8:	2700      	movs	r7, #0
 80088ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088be:	f1b9 0901 	subs.w	r9, r9, #1
 80088c2:	d505      	bpl.n	80088d0 <_fwalk_reent+0x24>
 80088c4:	6824      	ldr	r4, [r4, #0]
 80088c6:	2c00      	cmp	r4, #0
 80088c8:	d1f7      	bne.n	80088ba <_fwalk_reent+0xe>
 80088ca:	4638      	mov	r0, r7
 80088cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d0:	89ab      	ldrh	r3, [r5, #12]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d907      	bls.n	80088e6 <_fwalk_reent+0x3a>
 80088d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088da:	3301      	adds	r3, #1
 80088dc:	d003      	beq.n	80088e6 <_fwalk_reent+0x3a>
 80088de:	4629      	mov	r1, r5
 80088e0:	4630      	mov	r0, r6
 80088e2:	47c0      	blx	r8
 80088e4:	4307      	orrs	r7, r0
 80088e6:	3568      	adds	r5, #104	; 0x68
 80088e8:	e7e9      	b.n	80088be <_fwalk_reent+0x12>

080088ea <__swhatbuf_r>:
 80088ea:	b570      	push	{r4, r5, r6, lr}
 80088ec:	460e      	mov	r6, r1
 80088ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f2:	2900      	cmp	r1, #0
 80088f4:	b096      	sub	sp, #88	; 0x58
 80088f6:	4614      	mov	r4, r2
 80088f8:	461d      	mov	r5, r3
 80088fa:	da08      	bge.n	800890e <__swhatbuf_r+0x24>
 80088fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	602a      	str	r2, [r5, #0]
 8008904:	061a      	lsls	r2, r3, #24
 8008906:	d410      	bmi.n	800892a <__swhatbuf_r+0x40>
 8008908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890c:	e00e      	b.n	800892c <__swhatbuf_r+0x42>
 800890e:	466a      	mov	r2, sp
 8008910:	f000 f8fa 	bl	8008b08 <_fstat_r>
 8008914:	2800      	cmp	r0, #0
 8008916:	dbf1      	blt.n	80088fc <__swhatbuf_r+0x12>
 8008918:	9a01      	ldr	r2, [sp, #4]
 800891a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800891e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008922:	425a      	negs	r2, r3
 8008924:	415a      	adcs	r2, r3
 8008926:	602a      	str	r2, [r5, #0]
 8008928:	e7ee      	b.n	8008908 <__swhatbuf_r+0x1e>
 800892a:	2340      	movs	r3, #64	; 0x40
 800892c:	2000      	movs	r0, #0
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	b016      	add	sp, #88	; 0x58
 8008932:	bd70      	pop	{r4, r5, r6, pc}

08008934 <__smakebuf_r>:
 8008934:	898b      	ldrh	r3, [r1, #12]
 8008936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008938:	079d      	lsls	r5, r3, #30
 800893a:	4606      	mov	r6, r0
 800893c:	460c      	mov	r4, r1
 800893e:	d507      	bpl.n	8008950 <__smakebuf_r+0x1c>
 8008940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	2301      	movs	r3, #1
 800894a:	6163      	str	r3, [r4, #20]
 800894c:	b002      	add	sp, #8
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	ab01      	add	r3, sp, #4
 8008952:	466a      	mov	r2, sp
 8008954:	f7ff ffc9 	bl	80088ea <__swhatbuf_r>
 8008958:	9900      	ldr	r1, [sp, #0]
 800895a:	4605      	mov	r5, r0
 800895c:	4630      	mov	r0, r6
 800895e:	f7fd fc49 	bl	80061f4 <_malloc_r>
 8008962:	b948      	cbnz	r0, 8008978 <__smakebuf_r+0x44>
 8008964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008968:	059a      	lsls	r2, r3, #22
 800896a:	d4ef      	bmi.n	800894c <__smakebuf_r+0x18>
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	f043 0302 	orr.w	r3, r3, #2
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	e7e3      	b.n	8008940 <__smakebuf_r+0xc>
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <__smakebuf_r+0x7c>)
 800897a:	62b3      	str	r3, [r6, #40]	; 0x28
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	6020      	str	r0, [r4, #0]
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	9b00      	ldr	r3, [sp, #0]
 8008988:	6163      	str	r3, [r4, #20]
 800898a:	9b01      	ldr	r3, [sp, #4]
 800898c:	6120      	str	r0, [r4, #16]
 800898e:	b15b      	cbz	r3, 80089a8 <__smakebuf_r+0x74>
 8008990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f8c9 	bl	8008b2c <_isatty_r>
 800899a:	b128      	cbz	r0, 80089a8 <__smakebuf_r+0x74>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	89a0      	ldrh	r0, [r4, #12]
 80089aa:	4305      	orrs	r5, r0
 80089ac:	81a5      	strh	r5, [r4, #12]
 80089ae:	e7cd      	b.n	800894c <__smakebuf_r+0x18>
 80089b0:	08008749 	.word	0x08008749

080089b4 <_raise_r>:
 80089b4:	291f      	cmp	r1, #31
 80089b6:	b538      	push	{r3, r4, r5, lr}
 80089b8:	4604      	mov	r4, r0
 80089ba:	460d      	mov	r5, r1
 80089bc:	d904      	bls.n	80089c8 <_raise_r+0x14>
 80089be:	2316      	movs	r3, #22
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089ca:	b112      	cbz	r2, 80089d2 <_raise_r+0x1e>
 80089cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089d0:	b94b      	cbnz	r3, 80089e6 <_raise_r+0x32>
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 f830 	bl	8008a38 <_getpid_r>
 80089d8:	462a      	mov	r2, r5
 80089da:	4601      	mov	r1, r0
 80089dc:	4620      	mov	r0, r4
 80089de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e2:	f000 b817 	b.w	8008a14 <_kill_r>
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d00a      	beq.n	8008a00 <_raise_r+0x4c>
 80089ea:	1c59      	adds	r1, r3, #1
 80089ec:	d103      	bne.n	80089f6 <_raise_r+0x42>
 80089ee:	2316      	movs	r3, #22
 80089f0:	6003      	str	r3, [r0, #0]
 80089f2:	2001      	movs	r0, #1
 80089f4:	e7e7      	b.n	80089c6 <_raise_r+0x12>
 80089f6:	2400      	movs	r4, #0
 80089f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089fc:	4628      	mov	r0, r5
 80089fe:	4798      	blx	r3
 8008a00:	2000      	movs	r0, #0
 8008a02:	e7e0      	b.n	80089c6 <_raise_r+0x12>

08008a04 <raise>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	; (8008a10 <raise+0xc>)
 8008a06:	4601      	mov	r1, r0
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	f7ff bfd3 	b.w	80089b4 <_raise_r>
 8008a0e:	bf00      	nop
 8008a10:	20000310 	.word	0x20000310

08008a14 <_kill_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4d07      	ldr	r5, [pc, #28]	; (8008a34 <_kill_r+0x20>)
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	4611      	mov	r1, r2
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	f7f8 fd49 	bl	80014b8 <_kill>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	d102      	bne.n	8008a30 <_kill_r+0x1c>
 8008a2a:	682b      	ldr	r3, [r5, #0]
 8008a2c:	b103      	cbz	r3, 8008a30 <_kill_r+0x1c>
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	bf00      	nop
 8008a34:	20000724 	.word	0x20000724

08008a38 <_getpid_r>:
 8008a38:	f7f8 bd36 	b.w	80014a8 <_getpid>

08008a3c <__sread>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	460c      	mov	r4, r1
 8008a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a44:	f000 f894 	bl	8008b70 <_read_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	bfab      	itete	ge
 8008a4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a50:	181b      	addge	r3, r3, r0
 8008a52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a56:	bfac      	ite	ge
 8008a58:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a5a:	81a3      	strhlt	r3, [r4, #12]
 8008a5c:	bd10      	pop	{r4, pc}

08008a5e <__swrite>:
 8008a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a62:	461f      	mov	r7, r3
 8008a64:	898b      	ldrh	r3, [r1, #12]
 8008a66:	05db      	lsls	r3, r3, #23
 8008a68:	4605      	mov	r5, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	4616      	mov	r6, r2
 8008a6e:	d505      	bpl.n	8008a7c <__swrite+0x1e>
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	2302      	movs	r3, #2
 8008a76:	2200      	movs	r2, #0
 8008a78:	f000 f868 	bl	8008b4c <_lseek_r>
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	4632      	mov	r2, r6
 8008a8a:	463b      	mov	r3, r7
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	f000 b817 	b.w	8008ac4 <_write_r>

08008a96 <__sseek>:
 8008a96:	b510      	push	{r4, lr}
 8008a98:	460c      	mov	r4, r1
 8008a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9e:	f000 f855 	bl	8008b4c <_lseek_r>
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	bf15      	itete	ne
 8008aa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008aae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ab2:	81a3      	strheq	r3, [r4, #12]
 8008ab4:	bf18      	it	ne
 8008ab6:	81a3      	strhne	r3, [r4, #12]
 8008ab8:	bd10      	pop	{r4, pc}

08008aba <__sclose>:
 8008aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abe:	f000 b813 	b.w	8008ae8 <_close_r>
	...

08008ac4 <_write_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d07      	ldr	r5, [pc, #28]	; (8008ae4 <_write_r+0x20>)
 8008ac8:	4604      	mov	r4, r0
 8008aca:	4608      	mov	r0, r1
 8008acc:	4611      	mov	r1, r2
 8008ace:	2200      	movs	r2, #0
 8008ad0:	602a      	str	r2, [r5, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f7f8 fd27 	bl	8001526 <_write>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_write_r+0x1e>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_write_r+0x1e>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	20000724 	.word	0x20000724

08008ae8 <_close_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d06      	ldr	r5, [pc, #24]	; (8008b04 <_close_r+0x1c>)
 8008aec:	2300      	movs	r3, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	f7f8 fd33 	bl	800155e <_close>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_close_r+0x1a>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_close_r+0x1a>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20000724 	.word	0x20000724

08008b08 <_fstat_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	; (8008b28 <_fstat_r+0x20>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	4611      	mov	r1, r2
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f7f8 fd2e 	bl	8001576 <_fstat>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d102      	bne.n	8008b24 <_fstat_r+0x1c>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b103      	cbz	r3, 8008b24 <_fstat_r+0x1c>
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	20000724 	.word	0x20000724

08008b2c <_isatty_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d06      	ldr	r5, [pc, #24]	; (8008b48 <_isatty_r+0x1c>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4604      	mov	r4, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	f7f8 fd2d 	bl	8001596 <_isatty>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_isatty_r+0x1a>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_isatty_r+0x1a>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	20000724 	.word	0x20000724

08008b4c <_lseek_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d07      	ldr	r5, [pc, #28]	; (8008b6c <_lseek_r+0x20>)
 8008b50:	4604      	mov	r4, r0
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f7f8 fd26 	bl	80015ac <_lseek>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_lseek_r+0x1e>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_lseek_r+0x1e>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000724 	.word	0x20000724

08008b70 <_read_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	; (8008b90 <_read_r+0x20>)
 8008b74:	4604      	mov	r4, r0
 8008b76:	4608      	mov	r0, r1
 8008b78:	4611      	mov	r1, r2
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	602a      	str	r2, [r5, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f7f8 fcb4 	bl	80014ec <_read>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	d102      	bne.n	8008b8e <_read_r+0x1e>
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	b103      	cbz	r3, 8008b8e <_read_r+0x1e>
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	20000724 	.word	0x20000724
 8008b94:	00000000 	.word	0x00000000

08008b98 <exp>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	ed2d 8b02 	vpush	{d8}
 8008b9e:	ec55 4b10 	vmov	r4, r5, d0
 8008ba2:	f000 f841 	bl	8008c28 <__ieee754_exp>
 8008ba6:	eeb0 8a40 	vmov.f32	s16, s0
 8008baa:	eef0 8a60 	vmov.f32	s17, s1
 8008bae:	ec45 4b10 	vmov	d0, r4, r5
 8008bb2:	f000 f9eb 	bl	8008f8c <finite>
 8008bb6:	b168      	cbz	r0, 8008bd4 <exp+0x3c>
 8008bb8:	a317      	add	r3, pc, #92	; (adr r3, 8008c18 <exp+0x80>)
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7f7 ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 8008bc6:	b160      	cbz	r0, 8008be2 <exp+0x4a>
 8008bc8:	f7fd fa9e 	bl	8006108 <__errno>
 8008bcc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8008c08 <exp+0x70>
 8008bd0:	2322      	movs	r3, #34	; 0x22
 8008bd2:	6003      	str	r3, [r0, #0]
 8008bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8008bd8:	eef0 0a68 	vmov.f32	s1, s17
 8008bdc:	ecbd 8b02 	vpop	{d8}
 8008be0:	bd38      	pop	{r3, r4, r5, pc}
 8008be2:	a30f      	add	r3, pc, #60	; (adr r3, 8008c20 <exp+0x88>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 ff76 	bl	8000adc <__aeabi_dcmplt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d0ef      	beq.n	8008bd4 <exp+0x3c>
 8008bf4:	f7fd fa88 	bl	8006108 <__errno>
 8008bf8:	2322      	movs	r3, #34	; 0x22
 8008bfa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8008c10 <exp+0x78>
 8008bfe:	6003      	str	r3, [r0, #0]
 8008c00:	e7e8      	b.n	8008bd4 <exp+0x3c>
 8008c02:	bf00      	nop
 8008c04:	f3af 8000 	nop.w
 8008c08:	00000000 	.word	0x00000000
 8008c0c:	7ff00000 	.word	0x7ff00000
	...
 8008c18:	fefa39ef 	.word	0xfefa39ef
 8008c1c:	40862e42 	.word	0x40862e42
 8008c20:	d52d3051 	.word	0xd52d3051
 8008c24:	c0874910 	.word	0xc0874910

08008c28 <__ieee754_exp>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	ec55 4b10 	vmov	r4, r5, d0
 8008c30:	49b5      	ldr	r1, [pc, #724]	; (8008f08 <__ieee754_exp+0x2e0>)
 8008c32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c36:	428b      	cmp	r3, r1
 8008c38:	ed2d 8b04 	vpush	{d8-d9}
 8008c3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8008c40:	d93d      	bls.n	8008cbe <__ieee754_exp+0x96>
 8008c42:	49b2      	ldr	r1, [pc, #712]	; (8008f0c <__ieee754_exp+0x2e4>)
 8008c44:	428b      	cmp	r3, r1
 8008c46:	d918      	bls.n	8008c7a <__ieee754_exp+0x52>
 8008c48:	ee10 3a10 	vmov	r3, s0
 8008c4c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d009      	beq.n	8008c68 <__ieee754_exp+0x40>
 8008c54:	ee10 2a10 	vmov	r2, s0
 8008c58:	462b      	mov	r3, r5
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 fb15 	bl	800028c <__adddf3>
 8008c62:	4604      	mov	r4, r0
 8008c64:	460d      	mov	r5, r1
 8008c66:	e002      	b.n	8008c6e <__ieee754_exp+0x46>
 8008c68:	b10e      	cbz	r6, 8008c6e <__ieee754_exp+0x46>
 8008c6a:	2400      	movs	r4, #0
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	ecbd 8b04 	vpop	{d8-d9}
 8008c72:	ec45 4b10 	vmov	d0, r4, r5
 8008c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c7a:	a38d      	add	r3, pc, #564	; (adr r3, 8008eb0 <__ieee754_exp+0x288>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	ee10 0a10 	vmov	r0, s0
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	b130      	cbz	r0, 8008c9c <__ieee754_exp+0x74>
 8008c8e:	ecbd 8b04 	vpop	{d8-d9}
 8008c92:	2000      	movs	r0, #0
 8008c94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c98:	f000 b96f 	b.w	8008f7a <__math_oflow>
 8008c9c:	a386      	add	r3, pc, #536	; (adr r3, 8008eb8 <__ieee754_exp+0x290>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f7 ff19 	bl	8000adc <__aeabi_dcmplt>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f000 808b 	beq.w	8008dc6 <__ieee754_exp+0x19e>
 8008cb0:	ecbd 8b04 	vpop	{d8-d9}
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cba:	f000 b955 	b.w	8008f68 <__math_uflow>
 8008cbe:	4a94      	ldr	r2, [pc, #592]	; (8008f10 <__ieee754_exp+0x2e8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	f240 80ac 	bls.w	8008e1e <__ieee754_exp+0x1f6>
 8008cc6:	4a93      	ldr	r2, [pc, #588]	; (8008f14 <__ieee754_exp+0x2ec>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d87c      	bhi.n	8008dc6 <__ieee754_exp+0x19e>
 8008ccc:	4b92      	ldr	r3, [pc, #584]	; (8008f18 <__ieee754_exp+0x2f0>)
 8008cce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	ee10 0a10 	vmov	r0, s0
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7f7 fad4 	bl	8000288 <__aeabi_dsub>
 8008ce0:	4b8e      	ldr	r3, [pc, #568]	; (8008f1c <__ieee754_exp+0x2f4>)
 8008ce2:	00f7      	lsls	r7, r6, #3
 8008ce4:	443b      	add	r3, r7
 8008ce6:	ed93 7b00 	vldr	d7, [r3]
 8008cea:	f1c6 0a01 	rsb	sl, r6, #1
 8008cee:	4680      	mov	r8, r0
 8008cf0:	4689      	mov	r9, r1
 8008cf2:	ebaa 0a06 	sub.w	sl, sl, r6
 8008cf6:	eeb0 8a47 	vmov.f32	s16, s14
 8008cfa:	eef0 8a67 	vmov.f32	s17, s15
 8008cfe:	ec53 2b18 	vmov	r2, r3, d8
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	460d      	mov	r5, r1
 8008d0e:	4622      	mov	r2, r4
 8008d10:	462b      	mov	r3, r5
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fc6f 	bl	80005f8 <__aeabi_dmul>
 8008d1a:	a369      	add	r3, pc, #420	; (adr r3, 8008ec0 <__ieee754_exp+0x298>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	f7f7 fc68 	bl	80005f8 <__aeabi_dmul>
 8008d28:	a367      	add	r3, pc, #412	; (adr r3, 8008ec8 <__ieee754_exp+0x2a0>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 faab 	bl	8000288 <__aeabi_dsub>
 8008d32:	4632      	mov	r2, r6
 8008d34:	463b      	mov	r3, r7
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	a365      	add	r3, pc, #404	; (adr r3, 8008ed0 <__ieee754_exp+0x2a8>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f7f7 faa4 	bl	800028c <__adddf3>
 8008d44:	4632      	mov	r2, r6
 8008d46:	463b      	mov	r3, r7
 8008d48:	f7f7 fc56 	bl	80005f8 <__aeabi_dmul>
 8008d4c:	a362      	add	r3, pc, #392	; (adr r3, 8008ed8 <__ieee754_exp+0x2b0>)
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f7f7 fa99 	bl	8000288 <__aeabi_dsub>
 8008d56:	4632      	mov	r2, r6
 8008d58:	463b      	mov	r3, r7
 8008d5a:	f7f7 fc4d 	bl	80005f8 <__aeabi_dmul>
 8008d5e:	a360      	add	r3, pc, #384	; (adr r3, 8008ee0 <__ieee754_exp+0x2b8>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	f7f7 fa92 	bl	800028c <__adddf3>
 8008d68:	4632      	mov	r2, r6
 8008d6a:	463b      	mov	r3, r7
 8008d6c:	f7f7 fc44 	bl	80005f8 <__aeabi_dmul>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4620      	mov	r0, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 fa86 	bl	8000288 <__aeabi_dsub>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4606      	mov	r6, r0
 8008d82:	460f      	mov	r7, r1
 8008d84:	4620      	mov	r0, r4
 8008d86:	4629      	mov	r1, r5
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	ec41 0b19 	vmov	d9, r0, r1
 8008d90:	f1ba 0f00 	cmp.w	sl, #0
 8008d94:	d15d      	bne.n	8008e52 <__ieee754_exp+0x22a>
 8008d96:	2200      	movs	r2, #0
 8008d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f7f7 fa72 	bl	8000288 <__aeabi_dsub>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	ec51 0b19 	vmov	r0, r1, d9
 8008dac:	f7f7 fd4e 	bl	800084c <__aeabi_ddiv>
 8008db0:	4622      	mov	r2, r4
 8008db2:	462b      	mov	r3, r5
 8008db4:	f7f7 fa68 	bl	8000288 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	4958      	ldr	r1, [pc, #352]	; (8008f20 <__ieee754_exp+0x2f8>)
 8008dc0:	f7f7 fa62 	bl	8000288 <__aeabi_dsub>
 8008dc4:	e74d      	b.n	8008c62 <__ieee754_exp+0x3a>
 8008dc6:	4857      	ldr	r0, [pc, #348]	; (8008f24 <__ieee754_exp+0x2fc>)
 8008dc8:	a347      	add	r3, pc, #284	; (adr r3, 8008ee8 <__ieee754_exp+0x2c0>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dde:	f7f7 fa55 	bl	800028c <__adddf3>
 8008de2:	f7f7 feb9 	bl	8000b58 <__aeabi_d2iz>
 8008de6:	4682      	mov	sl, r0
 8008de8:	f7f7 fb9c 	bl	8000524 <__aeabi_i2d>
 8008dec:	a340      	add	r3, pc, #256	; (adr r3, 8008ef0 <__ieee754_exp+0x2c8>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	f7f7 fbff 	bl	80005f8 <__aeabi_dmul>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4620      	mov	r0, r4
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7f7 fa41 	bl	8000288 <__aeabi_dsub>
 8008e06:	a33c      	add	r3, pc, #240	; (adr r3, 8008ef8 <__ieee754_exp+0x2d0>)
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	4689      	mov	r9, r1
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	ec41 0b18 	vmov	d8, r0, r1
 8008e1c:	e76f      	b.n	8008cfe <__ieee754_exp+0xd6>
 8008e1e:	4a42      	ldr	r2, [pc, #264]	; (8008f28 <__ieee754_exp+0x300>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d811      	bhi.n	8008e48 <__ieee754_exp+0x220>
 8008e24:	a336      	add	r3, pc, #216	; (adr r3, 8008f00 <__ieee754_exp+0x2d8>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	ee10 0a10 	vmov	r0, s0
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fa2c 	bl	800028c <__adddf3>
 8008e34:	4b3a      	ldr	r3, [pc, #232]	; (8008f20 <__ieee754_exp+0x2f8>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	f7f7 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 8008e3c:	b138      	cbz	r0, 8008e4e <__ieee754_exp+0x226>
 8008e3e:	4b38      	ldr	r3, [pc, #224]	; (8008f20 <__ieee754_exp+0x2f8>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	e70a      	b.n	8008c5e <__ieee754_exp+0x36>
 8008e48:	f04f 0a00 	mov.w	sl, #0
 8008e4c:	e75f      	b.n	8008d0e <__ieee754_exp+0xe6>
 8008e4e:	4682      	mov	sl, r0
 8008e50:	e75d      	b.n	8008d0e <__ieee754_exp+0xe6>
 8008e52:	4632      	mov	r2, r6
 8008e54:	463b      	mov	r3, r7
 8008e56:	2000      	movs	r0, #0
 8008e58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008e5c:	f7f7 fa14 	bl	8000288 <__aeabi_dsub>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	ec51 0b19 	vmov	r0, r1, d9
 8008e68:	f7f7 fcf0 	bl	800084c <__aeabi_ddiv>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	ec51 0b18 	vmov	r0, r1, d8
 8008e74:	f7f7 fa08 	bl	8000288 <__aeabi_dsub>
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	f7f7 fa04 	bl	8000288 <__aeabi_dsub>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	2000      	movs	r0, #0
 8008e86:	4926      	ldr	r1, [pc, #152]	; (8008f20 <__ieee754_exp+0x2f8>)
 8008e88:	f7f7 f9fe 	bl	8000288 <__aeabi_dsub>
 8008e8c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8008e90:	4592      	cmp	sl, r2
 8008e92:	db02      	blt.n	8008e9a <__ieee754_exp+0x272>
 8008e94:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008e98:	e6e3      	b.n	8008c62 <__ieee754_exp+0x3a>
 8008e9a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8008e9e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8008ea8:	f7f7 fba6 	bl	80005f8 <__aeabi_dmul>
 8008eac:	e6d9      	b.n	8008c62 <__ieee754_exp+0x3a>
 8008eae:	bf00      	nop
 8008eb0:	fefa39ef 	.word	0xfefa39ef
 8008eb4:	40862e42 	.word	0x40862e42
 8008eb8:	d52d3051 	.word	0xd52d3051
 8008ebc:	c0874910 	.word	0xc0874910
 8008ec0:	72bea4d0 	.word	0x72bea4d0
 8008ec4:	3e663769 	.word	0x3e663769
 8008ec8:	c5d26bf1 	.word	0xc5d26bf1
 8008ecc:	3ebbbd41 	.word	0x3ebbbd41
 8008ed0:	af25de2c 	.word	0xaf25de2c
 8008ed4:	3f11566a 	.word	0x3f11566a
 8008ed8:	16bebd93 	.word	0x16bebd93
 8008edc:	3f66c16c 	.word	0x3f66c16c
 8008ee0:	5555553e 	.word	0x5555553e
 8008ee4:	3fc55555 	.word	0x3fc55555
 8008ee8:	652b82fe 	.word	0x652b82fe
 8008eec:	3ff71547 	.word	0x3ff71547
 8008ef0:	fee00000 	.word	0xfee00000
 8008ef4:	3fe62e42 	.word	0x3fe62e42
 8008ef8:	35793c76 	.word	0x35793c76
 8008efc:	3dea39ef 	.word	0x3dea39ef
 8008f00:	8800759c 	.word	0x8800759c
 8008f04:	7e37e43c 	.word	0x7e37e43c
 8008f08:	40862e41 	.word	0x40862e41
 8008f0c:	7fefffff 	.word	0x7fefffff
 8008f10:	3fd62e42 	.word	0x3fd62e42
 8008f14:	3ff0a2b1 	.word	0x3ff0a2b1
 8008f18:	080093c8 	.word	0x080093c8
 8008f1c:	080093d8 	.word	0x080093d8
 8008f20:	3ff00000 	.word	0x3ff00000
 8008f24:	080093b8 	.word	0x080093b8
 8008f28:	3defffff 	.word	0x3defffff

08008f2c <with_errno>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	4616      	mov	r6, r2
 8008f34:	f7fd f8e8 	bl	8006108 <__errno>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	6006      	str	r6, [r0, #0]
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}

08008f40 <xflow>:
 8008f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f42:	4614      	mov	r4, r2
 8008f44:	461d      	mov	r5, r3
 8008f46:	b108      	cbz	r0, 8008f4c <xflow+0xc>
 8008f48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f4c:	e9cd 2300 	strd	r2, r3, [sp]
 8008f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f54:	4620      	mov	r0, r4
 8008f56:	4629      	mov	r1, r5
 8008f58:	f7f7 fb4e 	bl	80005f8 <__aeabi_dmul>
 8008f5c:	2222      	movs	r2, #34	; 0x22
 8008f5e:	b003      	add	sp, #12
 8008f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f64:	f7ff bfe2 	b.w	8008f2c <with_errno>

08008f68 <__math_uflow>:
 8008f68:	b508      	push	{r3, lr}
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f70:	f7ff ffe6 	bl	8008f40 <xflow>
 8008f74:	ec41 0b10 	vmov	d0, r0, r1
 8008f78:	bd08      	pop	{r3, pc}

08008f7a <__math_oflow>:
 8008f7a:	b508      	push	{r3, lr}
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008f82:	f7ff ffdd 	bl	8008f40 <xflow>
 8008f86:	ec41 0b10 	vmov	d0, r0, r1
 8008f8a:	bd08      	pop	{r3, pc}

08008f8c <finite>:
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	ed8d 0b00 	vstr	d0, [sp]
 8008f92:	9801      	ldr	r0, [sp, #4]
 8008f94:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008f98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f9c:	0fc0      	lsrs	r0, r0, #31
 8008f9e:	b002      	add	sp, #8
 8008fa0:	4770      	bx	lr
	...

08008fa4 <_init>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr

08008fb0 <_fini>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr
